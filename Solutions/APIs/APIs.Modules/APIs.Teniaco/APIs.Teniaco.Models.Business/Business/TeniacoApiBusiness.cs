using APIs.Melkavan.Models;
using APIs.Melkavan.Models.Business;
using APIs.Melkavan.Models.Entities;
using APIs.Projects.Models;
using APIs.Projects.Models.Business;
using APIs.Projects.Models.Entities;
using APIs.Public.Models;
using APIs.Public.Models.Business;
using APIs.Public.Models.Entities;
using APIs.Teniaco.Models.Entities;
using AutoMapper;
using FrameWork;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.Extensions.Hosting;
using Models.Business.ConsoleBusiness;
using Models.Entities.Console;
using System.Collections.Generic;
using System.Linq;
using VM.Melkavan;
using VM.Projects;
using VM.Public;
using VM.PVM.Teniaco;
using VM.Teniaco;
using VM.Teniaco.VM.Teniaco;
using Properties = APIs.Teniaco.Models.Entities.Properties;

namespace APIs.Teniaco.Models.Business
{
    public class TeniacoApiBusiness : ITeniacoApiBusiness, IDisposable
    {
        private TeniacoApiContext teniacoApiDb = new TeniacoApiContext();

        private IMapper _mapper;

        private IHostEnvironment hostingEnvironment;

        public TeniacoApiContext TeniacoApiDb
        {
            get { return this.teniacoApiDb; }
            set { }
            //private set { }
        }

        public void Dispose()
        {
            teniacoApiDb.Dispose();
        }

        public TeniacoApiBusiness(IMapper mapper,
            TeniacoApiContext _teniacoApiDb,
            IHostEnvironment _hostingEnvironment)
        {
            try
            {
                _mapper = mapper;

                teniacoApiDb = _teniacoApiDb;

                TeniacoApiDb = teniacoApiDb;

                hostingEnvironment = _hostingEnvironment;
            }
            catch (Exception exc)
            {
            }
        }

        #region Teniaco

        #region Methods for Work With Agencies

        public List<AgenciesVM> GetAllAgenciesList(
            PublicApiContext publicApiDb,
            ref int listCount,
            List<long> childsUsersIds,
            //int? AgencyId = null,
            string AgencyName = "",
            long? stateId = null,
            long? cityId = null,
            long? zoneId = null)
        {
            List<AgenciesVM> agenciesVMList = new List<AgenciesVM>();

            try
            {

                //var zones = (from s in publicApiDb.States
                //             join c in publicApiDb.Cities on s.StateId equals c.StateId
                //             join z in publicApiDb.Zones on c.CityId equals z.CityId
                //             select new ZonesVM
                //             {
                //                 CityId = c.CityId,
                //                 StateId = s.StateId,
                //                 ZoneId = z.ZoneId
                //             }).AsEnumerable();

                //var list = (from a in teniacoApiDb.Agencies
                //            select new AgenciesVM
                //            {
                //                AgencyId = a.AgencyId,
                //                AgencyName = a.AgencyName,
                //                Telephone = a.Telephone,
                //                Address = a.Address,
                //                LocationLat = a.LocationLat,
                //                LocationLon = a.LocationLon,
                //                Site = a.Site,
                //                SocialNetworks = a.SocialNetworks,
                //                UserIdCreator = a.UserIdCreator.Value,
                //                CreateEnDate = a.CreateEnDate,
                //                CreateTime = a.CreateTime,
                //                EditEnDate = a.EditEnDate,
                //                EditTime = a.EditTime,
                //                UserIdEditor = a.UserIdEditor.Value,
                //                RemoveEnDate = a.RemoveEnDate,
                //                RemoveTime = a.EditTime,
                //                UserIdRemover = a.UserIdRemover.Value,
                //                IsActivated = a.IsActivated,
                //                IsDeleted = a.IsDeleted,
                //                StateId = a.StateId,
                //                CityId = a.CityId,
                //                ZoneId = a.ZoneId
                //            }).AsEnumerable()
                //            .Join(zones, a => a.ZoneId, z => z.ZoneId, (a, y) => new { a, y })
                //            .Select(a => new AgenciesVM
                //            {
                //                AgencyId = a.a.AgencyId,
                //                AgencyName = a.a.AgencyName ,
                //                Telephone = a.a.Telephone,
                //                Address = a.a.Address,
                //                LocationLat = a.a.LocationLat,
                //                LocationLon = a.a.LocationLon,
                //                Site = a.a.Site,
                //                SocialNetworks = a.a.SocialNetworks,
                //                UserIdCreator = a.a.UserIdCreator.Value,
                //                CreateEnDate = a.a.CreateEnDate,
                //                CreateTime = a.a.CreateTime,
                //                EditEnDate = a.a.EditEnDate,
                //                EditTime = a.a.EditTime,
                //                UserIdEditor = a.a.UserIdEditor.Value,
                //                RemoveEnDate = a.a.RemoveEnDate,
                //                RemoveTime = a.a.EditTime,
                //                UserIdRemover = a.a.UserIdRemover.Value,
                //                IsActivated = a.a.IsActivated,
                //                IsDeleted = a.a.IsDeleted,
                //                StateId = a.y.StateId,
                //                CityId = a.y.CityId,
                //                ZoneId = a.y.ZoneId
                //            }).AsEnumerable();



                var states = publicApiDb.States.ToList();
                var cities = publicApiDb.Cities.ToList();
                var zones = publicApiDb.Zones.ToList();

                var list = (from p in teniacoApiDb.Agencies
                            where p.IsActivated.Value.Equals(true) &&
                                  p.IsDeleted.Value.Equals(false)
                            select new AgenciesVM
                            {
                                AgencyId = p.AgencyId,
                                AgencyName = p.AgencyName,
                                Telephone = p.Telephone,
                                Address = p.Address,
                                LocationLat = p.LocationLat,
                                LocationLon = p.LocationLon,
                                Site = p.Site,
                                SocialNetworks = p.SocialNetworks,
                                UserIdCreator = p.UserIdCreator.Value,
                                CreateEnDate = p.CreateEnDate,
                                CreateTime = p.CreateTime,
                                EditEnDate = p.EditEnDate,
                                EditTime = p.EditTime,
                                UserIdEditor = p.UserIdEditor.Value,
                                RemoveEnDate = p.RemoveEnDate,
                                RemoveTime = p.EditTime,
                                UserIdRemover = p.UserIdRemover.Value,
                                IsActivated = p.IsActivated,
                                IsDeleted = p.IsDeleted,
                                StateId = p.StateId,
                                CityId = p.CityId,
                                ZoneId = p.ZoneId
                            })
                            .AsEnumerable();



                if (!string.IsNullOrEmpty(AgencyName))
                {
                    list = list.Where(a => a.AgencyName.Contains(AgencyName));
                }


                if (stateId.HasValue)
                    if (stateId.Value > 0)
                        list = list.Where(a => a.StateId.Equals(stateId.Value));



                if (cityId.HasValue)
                    if (cityId.Value > 0)
                        list = list.Where(a => a.CityId.Equals(cityId.Value));


                if (zoneId.HasValue)
                    if (zoneId.Value > 0)
                        list = list.Where(a => a.ZoneId.Equals(zoneId.Value));



                agenciesVMList = list.OrderByDescending(s => s.AgencyId).ToList();


                foreach (var item in agenciesVMList)
                {
                    //Find State
                    try
                    {
                        var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
                        item.StateName = state.StateName;
                    }
                    catch (Exception)
                    {

                        var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
                        item.CityName = city.CityName;

                        var zone = zones.Where(z => z.ZoneId.Equals(item.ZoneId)).FirstOrDefault();
                        item.ZoneName = zone.ZoneName;
                    }


                    //Find City
                    try
                    {
                        var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
                        item.CityName = city.CityName;
                    }
                    catch (Exception)
                    {

                        var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
                        item.StateName = state.StateName;

                        var zone = zones.Where(z => z.ZoneId.Equals(item.ZoneId)).FirstOrDefault();
                        item.ZoneName = zone.ZoneName;
                    }

                    //Find Zone
                    try
                    {
                        var zone = zones.Where(z => z.ZoneId.Equals(item.ZoneId)).FirstOrDefault();
                        item.ZoneName = zone.ZoneName;
                    }
                    catch (Exception)
                    {

                        var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
                        item.StateName = state.StateName;

                        var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
                        item.CityName = city.CityName;
                    }

                }

            }
            catch (Exception ex)
            { }

            return agenciesVMList;
        }

        public List<AgenciesVM> GetListOfAgencies(
            PublicApiContext publicApiDb,
            int jtStartIndex,
            int jtPageSize,
            ref int listCount,
            List<long> childsUsersIds,
            // int? AgencyId = null,
            string AgencyName = "",
            long? stateId = null,
            long? cityId = null,
            long? zoneId = null,
            string jtSorting = null)

        {
            List<AgenciesVM> agenciesVMList = new List<AgenciesVM>();


            var list = (from p in teniacoApiDb.Agencies
                        select new AgenciesVM
                        {
                            AgencyId = p.AgencyId,
                            AgencyName = p.AgencyName,
                            Telephone = p.Telephone,
                            Address = p.Address,
                            LocationLat = p.LocationLat,
                            LocationLon = p.LocationLon,
                            Site = p.Site,
                            SocialNetworks = p.SocialNetworks,
                            UserIdCreator = p.UserIdCreator.Value,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor.Value,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover.Value,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted,
                            StateId = p.StateId,
                            CityId = p.CityId,
                            ZoneId = p.ZoneId.Value
                        })
                        .AsQueryable();


            if (childsUsersIds != null)
            {
                if (childsUsersIds.Count > 1)
                {
                    list = list.Where(c => childsUsersIds.Contains(c.UserIdCreator.Value));
                }
                else
                {
                    if (childsUsersIds.Count == 1)
                    {
                        if (childsUsersIds.FirstOrDefault() > 0)
                        {
                            list = list.Where(c => childsUsersIds.Contains(c.UserIdCreator.Value));
                        }
                    }
                }
            }

            if (!string.IsNullOrEmpty(AgencyName))
                list = list.Where(z => z.AgencyName.Contains(AgencyName));

            //All the Agencies in one State
            if (stateId.HasValue)
                if (stateId.Value > 0)
                    list = list.Where(a => a.StateId.Equals(stateId.Value));



            if (cityId.HasValue)
                if (cityId.Value > 0)
                    list = list.Where(a => a.CityId.Equals(cityId.Value));


            if (zoneId.HasValue)
                if (zoneId.Value > 0)
                    list = list.Where(a => a.ZoneId.Equals(zoneId.Value));

            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        agenciesVMList = list.OrderByDescending(s => s.AgencyId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                        agenciesVMList = list.OrderByDescending(s => s.AgencyId).ToList();
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {
                        switch (jtSorting)
                        {
                            case "AgencyName ASC":
                                list = list.OrderBy(l => l.AgencyName);
                                break;
                            case "AgencyName DESC":
                                list = list.OrderByDescending(l => l.AgencyName);
                                break;
                        }


                        if (string.IsNullOrEmpty(jtSorting))
                            agenciesVMList = list.OrderByDescending(s => s.AgencyId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            agenciesVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {

                        agenciesVMList = list.ToList();
                    }
                }

                #region old codes - comments



                //var states = publicApiDb.States.ToList();
                //var cities = publicApiDb.Cities.ToList();
                //var zones = publicApiDb.Zones.ToList();


                //foreach (var item in agenciesVMList)
                //{
                //    //Find State
                //    try
                //    {
                //        var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
                //        item.StateName = state.StateName;
                //    }
                //    catch (Exception)
                //    {

                //    }


                //    //Find City
                //    try
                //    {
                //        var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
                //        item.CityName = city.CityName;
                //    }
                //    catch (Exception)
                //    {

                //    }

                //    //Find Zone
                //    try
                //    {
                //        var zone = zones.Where(z => z.ZoneId.Equals(item.ZoneId)).FirstOrDefault();
                //        item.ZoneName = zone.ZoneName;
                //    }
                //    catch (Exception)
                //    {

                //    }

                //}

                #endregion


            }
            catch (Exception exc)
            { }
            return agenciesVMList;
        }

        public int AddToAgencies(AgenciesVM agenciesVM,
            IConsoleBusiness consoleBusiness)
        {

            try
            {
                var userIdCreator = agenciesVM.UserIdCreator;

                var agenciesList = teniacoApiDb.Agencies.ToList();


                if (agenciesList.Where(c => c.UserIdCreator.Equals(userIdCreator)).Any())
                {
                    return 0;
                }
                else
                {
                    using (var transaction = teniacoApiDb.Database.BeginTransaction())
                    {
                        try
                        {
                            int agencyId;

                            #region Agencies

                            Agencies agencies = _mapper.Map<AgenciesVM, Agencies>(agenciesVM);

                            teniacoApiDb.Agencies.Add(agencies);
                            teniacoApiDb.SaveChanges();

                            #endregion
                            agencyId = agencies.AgencyId;

                            #region Users 
                            //مدیر املاک

                            if (agenciesVM.CustomUsersVM != null)
                            {
                                //اگر این کاربر وجود نداشته باشد
                                if (!consoleBusiness.CmsDb.Users.Where(u => u.UserName.Equals(agenciesVM.CustomUsersVM.UserName)).Any())
                                {

                                    using (var transaction2 = consoleBusiness.CmsDb.Database.BeginTransaction())
                                    {
                                        try
                                        {
                                            long userId = 0;


                                            #region Add User
                                            Users users = new Users();
                                            users.UserName = agenciesVM.CustomUsersVM.UserName;
                                            users.Password = FrameWork.MD5Hash.GetMD5Hash(agenciesVM.CustomUsersVM.Password);
                                            users.DomainSettingId = agenciesVM.CustomUsersVM.DomainSettingId;
                                            users.UserIdCreator = agenciesVM.UserIdCreator; //this.userId
                                            users.IsActivated = true;
                                            users.IsDeleted = false;
                                            users.CreateEnDate = DateTime.Now;
                                            users.CreateTime = PersianDate.TimeNow;
                                            users.ParentUserId = consoleBusiness.CmsDb.Users.Where(u => u.UserName.Equals("مشاورین املاک")).FirstOrDefault().UserId;


                                            consoleBusiness.CmsDb.Users.Add(users);
                                            consoleBusiness.CmsDb.SaveChanges();

                                            userId = users.UserId;
                                            #endregion

                                            #region Add UsersProfile

                                            UsersProfile usersProfile = new UsersProfile()
                                            {
                                                UserId = userId,
                                                Address = "",
                                                Age = 0,
                                                BirthDateTimeEn = DateTime.Now,
                                                CertificateId = "" +
                                                "",
                                                CreateEnDate = DateTime.Now,
                                                CreateTime = PersianDate.TimeNow,
                                                CreditCardNumber = "",
                                                Email = "",
                                                Name = agenciesVM.CustomUsersVM.Name != null ? agenciesVM.CustomUsersVM.Name : "",
                                                Family = agenciesVM.CustomUsersVM.Family != null ? agenciesVM.CustomUsersVM.Family : "",
                                                Mobile = agenciesVM.CustomUsersVM.Mobile,
                                                Phone = agenciesVM.CustomUsersVM.Mobile,
                                                HasModified = false,
                                                IsActivated = true,
                                                IsDeleted = false,
                                                NationalCode = "",
                                                Picture = "",
                                                PostalCode = "",
                                                Sexuality = false,
                                                SocialNetworkAddress = "",
                                                UniqueKey = "",
                                                UserIdCreator = agenciesVM.UserIdCreator.Value,
                                            };

                                            consoleBusiness.CmsDb.UsersProfile.Add(usersProfile);
                                            consoleBusiness.CmsDb.SaveChanges();

                                            #endregion

                                            #region Add UsersLevels
                                            int levelId = 0;

                                            levelId = consoleBusiness.GetLevelId("مدیر املاک");

                                            UsersLevels usersLevels = new UsersLevels()
                                            {
                                                LevelId = levelId,
                                                UserId = userId,
                                                CreateEnDate = DateTime.Now,
                                                CreateTime = PersianDate.TimeNow,
                                                UserIdCreator = agenciesVM.UserIdCreator.Value,
                                                IsActivated = true,
                                                IsDeleted = false,
                                            };

                                            consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                            consoleBusiness.CmsDb.SaveChanges();

                                            levelId = consoleBusiness.GetLevelId("مشاور");

                                            UsersLevels usersLevels2 = new UsersLevels()
                                            {
                                                LevelId = levelId,
                                                UserId = userId,
                                                CreateEnDate = DateTime.Now,
                                                CreateTime = PersianDate.TimeNow,
                                                UserIdCreator = agenciesVM.UserIdCreator.Value,
                                                IsActivated = true,
                                                IsDeleted = false,
                                            };

                                            consoleBusiness.CmsDb.UsersLevels.Add(usersLevels2);
                                            consoleBusiness.CmsDb.SaveChanges();
                                            #endregion

                                            #region Add UsersRoles

                                            var roleId = consoleBusiness.CmsDb.Roles.Where(r => r.RoleName.Equals("Admins")).FirstOrDefault().RoleId;

                                            UsersRoles usersRoles = new UsersRoles()
                                            {
                                                RoleId = roleId,
                                                UserId = userId,
                                                CreateEnDate = DateTime.Now,
                                                CreateTime = PersianDate.TimeNow,
                                                UserIdCreator = agenciesVM.UserIdCreator.Value,
                                                IsActivated = true,
                                                IsDeleted = false,
                                            };

                                            consoleBusiness.CmsDb.UsersRoles.Add(usersRoles);
                                            consoleBusiness.CmsDb.SaveChanges();

                                            var roleId2 = consoleBusiness.CmsDb.Roles.Where(r => r.RoleName.Equals("Users")).FirstOrDefault().RoleId;

                                            UsersRoles usersRoles2 = new UsersRoles()
                                            {
                                                RoleId = roleId2,
                                                UserId = userId,
                                                CreateEnDate = DateTime.Now,
                                                CreateTime = PersianDate.TimeNow,
                                                UserIdCreator = agenciesVM.UserIdCreator.Value,
                                                IsActivated = true,
                                                IsDeleted = false,
                                            };

                                            consoleBusiness.CmsDb.UsersRoles.Add(usersRoles2);
                                            consoleBusiness.CmsDb.SaveChanges();
                                            #endregion

                                            #region Add AgencyStaff

                                            AgencyStaffs agencyStaffs = new AgencyStaffs();
                                            agencyStaffs.AgencyId = agencyId;
                                            agencyStaffs.UserId = userId;
                                            agencyStaffs.UserIdCreator = agenciesVM.UserIdCreator; //this.userId
                                            agencyStaffs.IsActivated = true;
                                            agencyStaffs.IsDeleted = false;
                                            agencyStaffs.CreateEnDate = DateTime.Now;
                                            agencyStaffs.CreateTime = PersianDate.TimeNow;

                                            teniacoApiDb.AgencyStaffs.Add(agencyStaffs);
                                            teniacoApiDb.SaveChanges();

                                            #endregion

                                            transaction2.Commit();


                                        }
                                        catch (Exception exc)
                                        {

                                            transaction.Rollback();
                                            transaction2.Rollback();


                                            return -1;
                                        }
                                    }
                                }
                                else
                                {
                                    ////اگر این کاربر وجود داشته باشد
                                    var user = consoleBusiness.CmsDb.Users.Where(u => u.UserName.Equals(agenciesVM.CustomUsersVM.UserName)).FirstOrDefault();

                                    if (user != null)
                                    {
                                        if (user.UserId > 0)
                                        {

                                            #region  Check the Levels

                                            var levelIds = consoleBusiness.GetMultiLevelsUserWithUserId(user.UserId).LevelIds;
                                            var levelNames = consoleBusiness.GetLevelsWithLevelIds(levelIds).Select(l => l.LevelName);


                                            ////اگر دسترسی مدیر املاک نداشته باشد
                                            ////اگر نقش admins نداشته باشد

                                            if (levelNames != null)
                                            {
                                                ////اضافه کردن دسترسی مدیر املاک
                                                if (!levelNames.Contains("مدیر املاک"))
                                                {
                                                    //کاربر نباید هیچ کدام از دسترسی های کارمندان آژانس را داشته باشد

                                                    if (
                                                        (!levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها")) ||
                                                        (!levelNames.Contains("مشاور املاک - فقط خود کاربر")) ||
                                                        (!levelNames.Contains("مشاور املاک - فقط زیر گروه ها")) ||
                                                        (!levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))

                                                        )
                                                    {

                                                        #region Update User

                                                        var parentId = consoleBusiness.CmsDb.Users.Where(u => u.UserName.Equals("مشاورین املاک")).FirstOrDefault().UserId;

                                                        if (!parentId.Equals(user.ParentUserId)) //کاربر والد آن مشاورین املاک نبوده باشد
                                                        {
                                                            user.ParentUserId = parentId;
                                                            user.UserIdEditor = agenciesVM.UserIdCreator.Value; //this.userId
                                                            user.EditEnDate = DateTime.Now;
                                                            user.EditTime = PersianDate.TimeNow;

                                                            consoleBusiness.CmsDb.Entry<Users>(user).State = EntityState.Modified;
                                                            consoleBusiness.CmsDb.SaveChanges();
                                                        }
                                                        #endregion

                                                        #region Add  UsersLeveles
                                                        var levelId = consoleBusiness.GetLevelId("مدیر املاک");

                                                        UsersLevels usersLevels = new UsersLevels()
                                                        {
                                                            LevelId = levelId,
                                                            UserId = user.UserId,
                                                            CreateEnDate = DateTime.Now,
                                                            CreateTime = PersianDate.TimeNow,
                                                            UserIdCreator = agenciesVM.UserIdCreator.Value,
                                                            IsActivated = true,
                                                            IsDeleted = false,
                                                        };


                                                        consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                                        consoleBusiness.CmsDb.SaveChanges();



                                                        var levelId2 = consoleBusiness.GetLevelId("مشاور");

                                                        UsersLevels usersLevels2 = new UsersLevels()
                                                        {
                                                            LevelId = levelId2,
                                                            UserId = user.UserId,
                                                            CreateEnDate = DateTime.Now,
                                                            CreateTime = PersianDate.TimeNow,
                                                            UserIdCreator = agenciesVM.UserIdCreator.Value,
                                                            IsActivated = true,
                                                            IsDeleted = false,
                                                        };


                                                        consoleBusiness.CmsDb.UsersLevels.Add(usersLevels2);
                                                        consoleBusiness.CmsDb.SaveChanges();
                                                        #endregion

                                                        #region Add UsersRoles
                                                        var roleIds = consoleBusiness.GetRoleIdsWithUserId(user.UserId);
                                                        var roleNames = consoleBusiness.GetRolesWithRoleIds(roleIds).Select(r => r.RoleName);



                                                        if (roleNames != null)
                                                        {
                                                            if (!roleNames.Contains("Admins"))
                                                            {
                                                                ////اضافه کردن نقش Users
                                                                var roleId = consoleBusiness.CmsDb.Roles.Where(r => r.RoleName.Equals("Admins")).FirstOrDefault().RoleId;

                                                                UsersRoles usersRoles = new UsersRoles()
                                                                {
                                                                    RoleId = roleId,
                                                                    UserId = user.UserId,
                                                                    CreateEnDate = DateTime.Now,
                                                                    CreateTime = PersianDate.TimeNow,
                                                                    UserIdCreator = agenciesVM.UserIdCreator.Value,
                                                                    IsActivated = true,
                                                                    IsDeleted = false,
                                                                };


                                                                consoleBusiness.CmsDb.UsersRoles.Add(usersRoles);
                                                                consoleBusiness.CmsDb.SaveChanges();
                                                            }
                                                        }
                                                        #endregion

                                                        #region Update UsersProfile

                                                        var userProfile = consoleBusiness.CmsDb.UsersProfile.Where(p => p.UserId.Equals(user.UserId)).FirstOrDefault();
                                                        if (userProfile != null)
                                                        {
                                                            userProfile.Name = agenciesVM.CustomUsersVM.Name != null ? agenciesVM.CustomUsersVM.Name : "";
                                                            userProfile.Family = agenciesVM.CustomUsersVM.Family != null ? agenciesVM.CustomUsersVM.Family : "";
                                                            userProfile.Mobile = agenciesVM.CustomUsersVM.Mobile;
                                                            userProfile.Phone = agenciesVM.CustomUsersVM.Mobile;

                                                            userProfile.UserIdEditor = agenciesVM.UserIdCreator.Value; //this.userId
                                                            userProfile.EditEnDate = DateTime.Now;
                                                            userProfile.EditTime = PersianDate.TimeNow;

                                                            consoleBusiness.CmsDb.Entry<UsersProfile>(userProfile).State = EntityState.Modified;
                                                            consoleBusiness.CmsDb.SaveChanges();
                                                        }


                                                        #endregion

                                                        #region Add AgencyStaff


                                                        if (!teniacoApiDb.AgencyStaffs.Where(c => c.UserId.Equals(user.UserId)).Any()) // کارمندی در آژانس املاک وجود ندارد
                                                        {
                                                            AgencyStaffs agencyStaffs = new AgencyStaffs();
                                                            agencyStaffs.AgencyId = agencyId;
                                                            agencyStaffs.UserId = user.UserId;
                                                            agencyStaffs.UserIdCreator = agenciesVM.UserIdCreator; //this.userId
                                                            agencyStaffs.IsActivated = true;
                                                            agencyStaffs.IsDeleted = false;
                                                            agencyStaffs.CreateEnDate = DateTime.Now;
                                                            agencyStaffs.CreateTime = PersianDate.TimeNow;

                                                            teniacoApiDb.AgencyStaffs.Add(agencyStaffs);
                                                            teniacoApiDb.SaveChanges();


                                                        }
                                                        else //کارمند در آژانس املاک وجود دارد
                                                        {
                                                            #region Remove old AgencyStaff

                                                            var agencyStaff = teniacoApiDb.AgencyStaffs.Where(c => c.UserId.Equals(user.UserId)).FirstOrDefault();
                                                            teniacoApiDb.AgencyStaffs.Remove(agencyStaff);
                                                            teniacoApiDb.SaveChanges();

                                                            #endregion

                                                            #region Add new AgencyStaff

                                                            AgencyStaffs agencyStaffs = new AgencyStaffs();
                                                            agencyStaffs.AgencyId = agencyId;
                                                            agencyStaffs.UserId = user.UserId;
                                                            agencyStaffs.UserIdCreator = agenciesVM.UserIdCreator; //this.userId
                                                            agencyStaffs.IsActivated = true;
                                                            agencyStaffs.IsDeleted = false;
                                                            agencyStaffs.CreateEnDate = DateTime.Now;
                                                            agencyStaffs.CreateTime = PersianDate.TimeNow;

                                                            teniacoApiDb.AgencyStaffs.Add(agencyStaffs);
                                                            teniacoApiDb.SaveChanges();


                                                            #endregion
                                                        }

                                                        #endregion

                                                    }
                                                    else
                                                    {
                                                        return -3;
                                                    }

                                                }
                                                else
                                                {
                                                    return -2;
                                                }
                                            }
                                            #endregion


                                        }
                                    }
                                }
                            }

                            #endregion

                            transaction.Commit();

                            return agencies.AgencyId;

                        }
                        catch (Exception exc)
                        {
                            transaction.Rollback();
                        }
                    }
                }




            }
            catch (Exception exc)
            {

            }

            return -1;
        }

        public int UpdateAgencies(ref AgenciesVM agenciesVM,
            List<long> childsUsersIds)
        {
            int agencyId = agenciesVM.AgencyId;
            string agencyName = agenciesVM.AgencyName;
            string? telephone = agenciesVM.Telephone;
            string? address = agenciesVM.Address;
            //double? locationLat = agenciesVM.LocationLat;
            //double? locationLon = agenciesVM.LocationLon;
            string? site = agenciesVM.Site;
            string? socialNetworks = agenciesVM.SocialNetworks;
            long stateId = agenciesVM.StateId;
            long cityId = agenciesVM.CityId;
            long? zoneId = agenciesVM.ZoneId;

            bool? isActivated = agenciesVM.IsActivated.HasValue ? agenciesVM.IsActivated.Value : (bool?)true;
            bool? isDeleted = agenciesVM.IsDeleted.HasValue ? agenciesVM.IsDeleted.Value : (bool?)true;



            if (teniacoApiDb.Agencies.Where(n => childsUsersIds.Contains(n.UserIdCreator.Value)).Where(x => x.AgencyId.Equals(agencyId)).Any())
            {
                try
                {
                    Agencies agencies = (from a in teniacoApiDb.Agencies
                                         where a.AgencyId == agencyId
                                         select a).FirstOrDefault();

                    agencies.AgencyName = agencyName;
                    agencies.Telephone = telephone;
                    agencies.Address = address;
                    //agencies.LocationLat = locationLat;
                    //agencies.LocationLon = locationLon;
                    agencies.Site = site;
                    agencies.SocialNetworks = socialNetworks;
                    agencies.StateId = stateId;
                    agencies.CityId = cityId;
                    agencies.ZoneId = zoneId;

                    agencies.EditEnDate = DateTime.Now;
                    agencies.EditTime = PersianDate.TimeNow;
                    agencies.UserIdEditor = agencies.UserIdEditor;
                    agencies.IsActivated = isActivated.Value;
                    agencies.IsDeleted = isDeleted.Value;


                    teniacoApiDb.Entry<Agencies>(agencies).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();




                    agenciesVM.UserIdCreator = agencies.UserIdCreator;

                    return agencies.AgencyId;
                }
                catch (Exception ex)
                { }

            }
            return 0;
        }

        public bool ToggleActivationAgencies(int agencyId,
            long userId,
            IConsoleBusiness consoleBusiness,
            List<long> childsUsersIds)
        {
            try
            {
                var agencies = (from c in teniacoApiDb.Agencies
                                where c.AgencyId == agencyId &&
                                childsUsersIds.Contains(c.UserIdCreator.Value)
                                select c).FirstOrDefault();



                if (agencies != null)
                {
                    agencies.IsActivated = !agencies.IsActivated;
                    agencies.EditEnDate = DateTime.Now;
                    agencies.EditTime = PersianDate.TimeNow;
                    agencies.UserIdEditor = userId;

                    teniacoApiDb.Entry<Agencies>(agencies).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    if (teniacoApiDb.AgencyStaffs.Where(a => a.AgencyId.Equals(agencyId)).Any())
                    {
                        var agencyStaff = teniacoApiDb.AgencyStaffs.Where(a => a.AgencyId.Equals(agencyId)).FirstOrDefault();

                        agencyStaff.IsActivated = !agencyStaff.IsActivated;
                        agencyStaff.EditEnDate = DateTime.Now;
                        agencyStaff.EditTime = PersianDate.TimeNow;
                        agencyStaff.UserIdEditor = userId;


                        teniacoApiDb.Entry<AgencyStaffs>(agencyStaff).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();


                        if (consoleBusiness.CmsDb.Users.Where(u => u.UserId.Equals(agencyStaff.UserId)).Any())
                        {
                            var users = consoleBusiness.CmsDb.Users.Where(u => u.UserId.Equals(agencyStaff.UserId)).FirstOrDefault();

                            users.IsActivated = !users.IsActivated;
                            users.EditEnDate = DateTime.Now;
                            users.EditTime = PersianDate.TimeNow;
                            users.UserIdEditor = userId;

                            consoleBusiness.CmsDb.Entry<Users>(users).State = EntityState.Modified;
                            consoleBusiness.CmsDb.SaveChanges();
                        }

                        if (consoleBusiness.CmsDb.UsersProfile.Where(u => u.UserId.Equals(agencyStaff.UserId)).Any())
                        {
                            var usersProfile = consoleBusiness.CmsDb.UsersProfile.Where(u => u.UserId.Equals(agencyStaff.UserId)).FirstOrDefault();

                            usersProfile.IsActivated = !usersProfile.IsActivated;
                            usersProfile.EditEnDate = DateTime.Now;
                            usersProfile.EditTime = PersianDate.TimeNow;
                            usersProfile.UserIdEditor = userId;

                            consoleBusiness.CmsDb.Entry<UsersProfile>(usersProfile).State = EntityState.Modified;
                            consoleBusiness.CmsDb.SaveChanges();
                        }

                        if (consoleBusiness.CmsDb.UsersRoles.Where(u => u.UserId.Equals(agencyStaff.UserId)).Any())
                        {
                            var usersRole = consoleBusiness.CmsDb.UsersRoles.Where(u => u.UserId.Equals(agencyStaff.UserId)).FirstOrDefault();

                            usersRole.IsActivated = !usersRole.IsActivated;
                            usersRole.EditEnDate = DateTime.Now;
                            usersRole.EditTime = PersianDate.TimeNow;
                            usersRole.UserIdEditor = userId;

                            consoleBusiness.CmsDb.Entry<UsersRoles>(usersRole).State = EntityState.Modified;
                            consoleBusiness.CmsDb.SaveChanges();
                        }

                        if (consoleBusiness.CmsDb.UsersLevels.Where(u => u.UserId.Equals(agencyStaff.UserId)).Any())
                        {
                            var usersLevel = consoleBusiness.CmsDb.UsersLevels.Where(u => u.UserId.Equals(agencyStaff.UserId)).FirstOrDefault();

                            usersLevel.IsActivated = !usersLevel.IsActivated;
                            usersLevel.EditEnDate = DateTime.Now;
                            usersLevel.EditTime = PersianDate.TimeNow;
                            usersLevel.UserIdEditor = userId;

                            consoleBusiness.CmsDb.Entry<UsersLevels>(usersLevel).State = EntityState.Modified;
                            consoleBusiness.CmsDb.SaveChanges();
                        }
                    }



                    return true;
                }


            }
            catch (Exception)
            { }

            return false;
        }

        public bool TemporaryDeleteAgencies(int agencyId,
            long userId,
            IConsoleBusiness consoleBusiness,
            List<long> childsUsersIds)
        {
            try
            {
                var agencies = (from a in teniacoApiDb.Agencies
                                where a.AgencyId == agencyId &&
                                childsUsersIds.Contains(a.UserIdCreator.Value)
                                select a).FirstOrDefault();


                if (agencies != null)
                {
                    agencies.IsDeleted = !agencies.IsDeleted;
                    agencies.EditEnDate = DateTime.Now;
                    agencies.EditTime = PersianDate.TimeNow;
                    agencies.UserIdEditor = userId;


                    teniacoApiDb.Entry<Agencies>(agencies).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();



                    if (teniacoApiDb.AgencyStaffs.Where(a => a.AgencyId.Equals(agencyId)).Any())
                    {
                        var agencyStaff = teniacoApiDb.AgencyStaffs.Where(a => a.AgencyId.Equals(agencyId)).FirstOrDefault();

                        agencyStaff.IsDeleted = !agencyStaff.IsDeleted;
                        agencyStaff.EditEnDate = DateTime.Now;
                        agencyStaff.EditTime = PersianDate.TimeNow;
                        agencyStaff.UserIdEditor = userId;


                        teniacoApiDb.Entry<AgencyStaffs>(agencyStaff).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();


                        if (consoleBusiness.CmsDb.Users.Where(u => u.UserId.Equals(agencyStaff.UserId)).Any())
                        {
                            var users = consoleBusiness.CmsDb.Users.Where(u => u.UserId.Equals(agencyStaff.UserId)).FirstOrDefault();

                            users.IsDeleted = !users.IsDeleted;
                            users.EditEnDate = DateTime.Now;
                            users.EditTime = PersianDate.TimeNow;
                            users.UserIdEditor = userId;

                            consoleBusiness.CmsDb.Entry<Users>(users).State = EntityState.Modified;
                            consoleBusiness.CmsDb.SaveChanges();
                        }

                        if (consoleBusiness.CmsDb.UsersProfile.Where(u => u.UserId.Equals(agencyStaff.UserId)).Any())
                        {
                            var usersProfile = consoleBusiness.CmsDb.UsersProfile.Where(u => u.UserId.Equals(agencyStaff.UserId)).FirstOrDefault();

                            usersProfile.IsDeleted = !usersProfile.IsDeleted;
                            usersProfile.EditEnDate = DateTime.Now;
                            usersProfile.EditTime = PersianDate.TimeNow;
                            usersProfile.UserIdEditor = userId;

                            consoleBusiness.CmsDb.Entry<UsersProfile>(usersProfile).State = EntityState.Modified;
                            consoleBusiness.CmsDb.SaveChanges();
                        }

                        if (consoleBusiness.CmsDb.UsersRoles.Where(u => u.UserId.Equals(agencyStaff.UserId)).Any())
                        {
                            var usersRole = consoleBusiness.CmsDb.UsersRoles.Where(u => u.UserId.Equals(agencyStaff.UserId)).FirstOrDefault();

                            usersRole.IsDeleted = !usersRole.IsDeleted;
                            usersRole.EditEnDate = DateTime.Now;
                            usersRole.EditTime = PersianDate.TimeNow;
                            usersRole.UserIdEditor = userId;

                            consoleBusiness.CmsDb.Entry<UsersRoles>(usersRole).State = EntityState.Modified;
                            consoleBusiness.CmsDb.SaveChanges();
                        }

                        if (consoleBusiness.CmsDb.UsersLevels.Where(u => u.UserId.Equals(agencyStaff.UserId)).Any())
                        {
                            var usersLevel = consoleBusiness.CmsDb.UsersLevels.Where(u => u.UserId.Equals(agencyStaff.UserId)).FirstOrDefault();

                            usersLevel.IsDeleted = !usersLevel.IsDeleted;
                            usersLevel.EditEnDate = DateTime.Now;
                            usersLevel.EditTime = PersianDate.TimeNow;
                            usersLevel.UserIdEditor = userId;

                            consoleBusiness.CmsDb.Entry<UsersLevels>(usersLevel).State = EntityState.Modified;
                            consoleBusiness.CmsDb.SaveChanges();
                        }
                    }

                    return true;
                }
            }
            catch (Exception ex)
            { }
            return false;
        }

        public bool CompleteDeleteAgencies(
            int agencyId,
            long ThisUserId,
            List<long> childsUsersIds,
             IConsoleBusiness consoleBusiness)
        {
            try
            {



                var agencies = (from a in teniacoApiDb.Agencies
                                where a.AgencyId == agencyId &&
                                childsUsersIds.Contains(a.UserIdCreator.Value)
                                select a).FirstOrDefault();


                if (agencies != null)
                {
                    using (var transaction = teniacoApiDb.Database.BeginTransaction())
                    {
                        try
                        {
                            if (teniacoApiDb.AgencyStaffs.Where(a => a.AgencyId.Equals(agencyId)).Any())
                            {

                                var thisUserId = consoleBusiness.CmsDb.Users.Where(c => c.UserId.Equals(ThisUserId)).FirstOrDefault(); //this.userId


                                #region Load List of AgencyStaffs

                                var agencyStaffs = teniacoApiDb.AgencyStaffs.Where(a => a.AgencyId.Equals(agencyId)).ToList();

                                #endregion

                                #region Delete Users

                                if (agencyStaffs != null)
                                {
                                    if (agencyStaffs.Count() > 0)
                                    {
                                        foreach (var item in agencyStaffs)
                                        {
                                            var userId = item.UserId;

                                            if (userId > 0)
                                            {
                                                var levelIds = consoleBusiness.CmsDb.UsersLevels.Where(c => c.UserId.Equals(userId)).Select(c => c.LevelId).ToList();
                                                var levelNames = consoleBusiness.CmsDb.Levels.Where(c => levelIds.Contains(c.LevelId)).Select(c => c.LevelName).ToList();

                                                int levelId = 0;

                                                // if (levelNames.Count > 2)//اگر آن کاربر دسترسی های دیگری جز مدیر املاک  یا مشاورین داشته باشد.
                                                // {

                                                #region Remove the UserLevel

                                                if (userId.Equals(thisUserId.UserId)) // خود مدیر املاک بخواهد رکورد را پاک کند
                                                {
                                                    return false;
                                                }
                                                else
                                                {
                                                    if (levelNames.Contains("مدیر املاک"))
                                                    {
                                                        levelId = consoleBusiness.GetLevelId("مدیر املاک");
                                                        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                                        consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                                        consoleBusiness.CmsDb.SaveChanges();
                                                    }
                                                    else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                                                    {
                                                        levelId = consoleBusiness.GetLevelId("مشاور املاک - کاربر و زیر گروه ها");
                                                        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                                        consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                                        consoleBusiness.CmsDb.SaveChanges();
                                                    }
                                                    else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                                                    {
                                                        levelId = consoleBusiness.GetLevelId("مشاور املاک - فقط خود کاربر");
                                                        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                                        consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                                        consoleBusiness.CmsDb.SaveChanges();
                                                    }
                                                    else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                                                    {
                                                        levelId = consoleBusiness.GetLevelId("مشاور املاک - فقط زیر گروه ها");
                                                        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                                        consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                                        consoleBusiness.CmsDb.SaveChanges();
                                                    }
                                                    else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                                                    {
                                                        levelId = consoleBusiness.GetLevelId("مشاور املاک - والد و زیر گروه ها");
                                                        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                                        consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                                        consoleBusiness.CmsDb.SaveChanges();
                                                    }
                                                }

                                                #endregion

                                                #region comments

                                                //}
                                                //else  //اگر آن کاربر فقط دسترسی مدیر املاک یا مشاورین داشته باشد
                                                //{

                                                //    #region Remove the UserLevel

                                                //    if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                                                //    {
                                                //        levelId = consoleBusiness.GetLevelId("مشاور املاک - کاربر و زیر گروه ها");
                                                //        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                                //        consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                                //        consoleBusiness.CmsDb.SaveChanges();
                                                //    }
                                                //    else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                                                //    {
                                                //        levelId = consoleBusiness.GetLevelId("مشاور املاک - فقط خود کاربر");
                                                //        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                                //        consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                                //        consoleBusiness.CmsDb.SaveChanges();
                                                //    }
                                                //    else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                                                //    {
                                                //        levelId = consoleBusiness.GetLevelId("مشاور املاک - فقط زیر گروه ها");
                                                //        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                                //        consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                                //        consoleBusiness.CmsDb.SaveChanges();
                                                //    }
                                                //    else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                                                //    {
                                                //        levelId = consoleBusiness.GetLevelId("مشاور املاک - والد و زیر گروه ها");
                                                //        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                                //        consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                                //        consoleBusiness.CmsDb.SaveChanges();
                                                //    }


                                                //    #endregion

                                                //    #region Remove UserProfile
                                                //    var userProfile = (from up in consoleBusiness.CmsDb.UsersProfile
                                                //                       where up.UserId == userId &&
                                                //                       childsUsersIds.Contains(up.UserIdCreator.Value)
                                                //                       select up).FirstOrDefault();

                                                //    if (userProfile != null)
                                                //    {
                                                //        consoleBusiness.CmsDb.UsersProfile.Remove(userProfile);
                                                //        consoleBusiness.CmsDb.SaveChanges();
                                                //    }
                                                //    #endregion


                                                //    #region Remove Users

                                                //    var user = consoleBusiness.CmsDb.Users.Where(c => c.UserId.Equals(userId)).FirstOrDefault();

                                                //    consoleBusiness.CmsDb.Users.Remove(user);
                                                //    consoleBusiness.CmsDb.SaveChanges();


                                                //    #endregion

                                                //    teniacoApiDb.SaveChanges();
                                                //}

                                                #endregion


                                            }
                                        }

                                        #region Delete Agencystaffs

                                        teniacoApiDb.AgencyStaffs.RemoveRange(agencyStaffs);
                                        teniacoApiDb.SaveChanges();

                                        #endregion
                                    }
                                }

                                #endregion

                            }

                            #region Delete Agencies


                            teniacoApiDb.Agencies.Remove(agencies);
                            teniacoApiDb.SaveChanges();

                            #endregion

                            transaction.Commit();

                            return true;
                        }
                        catch (Exception)
                        {
                            transaction.Rollback();
                        }
                    }
                }
            }
            catch (Exception ex)
            { }

            return false;
        }

        public AgenciesVM GetAgencyWithAgencyId(
            int? agencyId,
            List<long> childsUsersIds)
        {
            AgenciesVM agenciesVM = new AgenciesVM();

            try
            {
                agenciesVM = _mapper.Map<Agencies,
                    AgenciesVM>(teniacoApiDb.Agencies
                    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                     .Where(e => e.AgencyId.Equals(agencyId)).FirstOrDefault());

            }
            catch (Exception exc)
            { }

            return agenciesVM;
        }

        #endregion

        #region Methods for Work With AgencyStaffs

        public List<AgencyStaffsVM> GetAllAgencyStaffsList(
            ref int listCount,
            List<long> childsUsersIds,
            int? agencyId)
        {
            List<AgencyStaffsVM> agencyStaffsVMList = new List<AgencyStaffsVM>();

            try
            {

                var list = (from d in teniacoApiDb.AgencyStaffs
                            where d.IsActivated.Value.Equals(true) &&
                                  d.IsDeleted.Value.Equals(false)
                            select new AgencyStaffsVM
                            {
                                AgencyStaffsId = d.AgencyStaffsId,
                                AgencyId = d.AgencyId,
                                //PersonId = d.PersonId,
                                UserId = d.UserId,
                                //PositionId = d.PositionId,
                                SocialNetworks = d.SocialNetworks,
                                UserIdCreator = d.UserIdCreator.Value,
                                CreateEnDate = d.CreateEnDate,
                                CreateTime = d.CreateTime,
                                EditEnDate = d.EditEnDate,
                                EditTime = d.EditTime,
                                UserIdEditor = d.UserIdEditor.Value,
                                RemoveEnDate = d.RemoveEnDate,
                                RemoveTime = d.EditTime,
                                UserIdRemover = d.UserIdRemover.Value,
                                IsActivated = d.IsActivated,
                                IsDeleted = d.IsDeleted,
                            }).AsQueryable();


                if (childsUsersIds != null)
                {
                    if (childsUsersIds.Count > 1)
                    {
                        list = list.Where(c => childsUsersIds.Contains(c.UserIdCreator.Value));
                    }
                    else
                    {
                        if (childsUsersIds.Count == 1)
                        {
                            if (childsUsersIds.FirstOrDefault() > 0)
                            {
                                list = list.Where(c => childsUsersIds.Contains(c.UserIdCreator.Value));
                            }
                        }
                    }
                }



                if (agencyId.HasValue)
                    if (agencyId.Value > 0)
                        list = list.Where(a => a.AgencyId.Equals(agencyId.Value));



                agencyStaffsVMList = list.OrderByDescending(s => s.AgencyStaffsId).ToList();

            }
            catch (Exception)
            { }
            return agencyStaffsVMList;
        }

        public List<AgencyStaffsVM> GetListOfAgencyStaffs(
            int jtStartIndex,
            int jtPageSize,
            ref int listCount,
            List<long> childsUsersIds,
            int? agencyId,
            string jtSorting = null)
        {
            List<AgencyStaffsVM> agencyStaffsVMList = new List<AgencyStaffsVM>();


            var list = (from d in teniacoApiDb.AgencyStaffs
                        select new AgencyStaffsVM
                        {
                            AgencyStaffsId = d.AgencyStaffsId,
                            AgencyId = d.AgencyId,
                            //PersonId = d.PersonId,
                            UserId = d.UserId,
                            PositionId = d.PositionId,
                            SocialNetworks = d.SocialNetworks,
                            UserIdCreator = d.UserIdCreator.Value,
                            CreateEnDate = d.CreateEnDate,
                            CreateTime = d.CreateTime,
                            EditEnDate = d.EditEnDate,
                            EditTime = d.EditTime,
                            UserIdEditor = d.UserIdEditor.Value,
                            RemoveEnDate = d.RemoveEnDate,
                            RemoveTime = d.EditTime,
                            UserIdRemover = d.UserIdRemover.Value,
                            IsActivated = d.IsActivated,
                            IsDeleted = d.IsDeleted,
                        }).AsQueryable();


            if (childsUsersIds != null)
            {
                if (childsUsersIds.Count > 1)
                {
                    list = list.Where(c => childsUsersIds.Contains(c.UserIdCreator.Value));
                }
                else
                {
                    if (childsUsersIds.Count == 1)
                    {
                        if (childsUsersIds.FirstOrDefault() > 0)
                        {
                            list = list.Where(c => childsUsersIds.Contains(c.UserIdCreator.Value));
                        }
                    }
                }
            }

            if (agencyId.HasValue)
                if (agencyId.Value > 0)
                    list = list.Where(a => a.AgencyId.Equals(agencyId.Value));

            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        agencyStaffsVMList = list.OrderByDescending(s => s.AgencyStaffsId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                        agencyStaffsVMList = list.OrderByDescending(s => s.AgencyStaffsId).ToList();
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        if (string.IsNullOrEmpty(jtSorting))
                            agencyStaffsVMList = list.OrderByDescending(s => s.AgencyStaffsId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            agencyStaffsVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {

                        agencyStaffsVMList = list.ToList();
                    }
                }
            }
            catch (Exception exc)
            { }
            return agencyStaffsVMList;
        }

        public int AddToAgencyStaffs(AgencyStaffsVM agencyStaffsVM,
            IConsoleBusiness consoleBusiness,
            string domainName)
        {
            using (var transaction = teniacoApiDb.Database.BeginTransaction())
            {
                try
                {

                    #region AgencyStaff

                    AgencyStaffs agencyStaffs = _mapper.Map<AgencyStaffsVM, AgencyStaffs>(agencyStaffsVM);

                    teniacoApiDb.AgencyStaffs.Add(agencyStaffs);
                    teniacoApiDb.SaveChanges();
                    #endregion

                    #region Users

                    if (agencyStaffsVM.CustomUsersVM != null)
                    {
                        //اگر این کاربر وجود نداشته باشد
                        if (!consoleBusiness.CmsDb.Users.Where(u => u.UserName.Equals(agencyStaffsVM.CustomUsersVM.UserName)).Any())
                        {
                            using (var transaction2 = consoleBusiness.CmsDb.Database.BeginTransaction())
                            {
                                try
                                {
                                    long userId = 0;

                                    #region Add User

                                    Users users = new Users();
                                    users.UserName = agencyStaffsVM.CustomUsersVM.UserName;
                                    users.Password = FrameWork.MD5Hash.GetMD5Hash(agencyStaffsVM.CustomUsersVM.Password);
                                    users.DomainSettingId = agencyStaffsVM.CustomUsersVM.DomainSettingId;
                                    users.UserIdCreator = agencyStaffsVM.UserIdCreator; //this.userId
                                    users.IsActivated = true;
                                    users.IsDeleted = false;
                                    users.CreateEnDate = DateTime.Now;
                                    users.CreateTime = PersianDate.TimeNow;
                                    users.ParentUserId = agencyStaffsVM.ParentId; //والد


                                    consoleBusiness.CmsDb.Users.Add(users);
                                    consoleBusiness.CmsDb.SaveChanges();

                                    #region comments
                                    //if (agencyStaffsVM.PositionId.Equals(1))//مدیر املاک
                                    //    parentId = consoleBusiness.GetUserId("admin", domainName);
                                    //else//کارشناس ارشد املاک  یا کارشناس املاک
                                    //{
                                    //    try
                                    //    {
                                    //        var agencyStaffAdminId = teniacoApiDb.AgencyStaffs.Where(s => s.AgencyId.Equals(agencyStaffsVM.AgencyId) && s.PositionId.Equals(1)).FirstOrDefault().UserId.Value;
                                    //        parentId = agencyStaffAdminId;
                                    //    }
                                    //    catch (Exception exc)
                                    //    { }
                                    //}

                                    #endregion

                                    userId = users.UserId;

                                    agencyStaffs.UserId = userId;
                                    //teniacoApiDb.Entry<AgencyStaffs>(agencyStaffs).State = EntityState.Modified;
                                    teniacoApiDb.SaveChanges();

                                    #endregion

                                    #region Add UserProfile
                                    UsersProfile usersProfile = new UsersProfile()
                                    {
                                        UserId = userId,
                                        Address = "",
                                        Age = 0,
                                        BirthDateTimeEn = DateTime.Now,
                                        CertificateId = "" +
                                        "",
                                        CreateEnDate = DateTime.Now,
                                        CreateTime = PersianDate.TimeNow,
                                        CreditCardNumber = "",
                                        Email = agencyStaffsVM.CustomUsersVM.Email,
                                        Family = agencyStaffsVM.CustomUsersVM.Family != null ? agencyStaffsVM.CustomUsersVM.Family : "",
                                        HasModified = false,
                                        IsActivated = true,
                                        IsDeleted = false,
                                        Mobile = agencyStaffsVM.CustomUsersVM.Mobile,
                                        Name = agencyStaffsVM.CustomUsersVM.Name != null ? agencyStaffsVM.CustomUsersVM.Name : "",
                                        NationalCode = "",
                                        Phone = agencyStaffsVM.CustomUsersVM.Mobile,
                                        Picture = "",
                                        PostalCode = "",
                                        Sexuality = false,
                                        SocialNetworkAddress = "",
                                        UniqueKey = "",
                                        UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                    };

                                    consoleBusiness.CmsDb.UsersProfile.Add(usersProfile);
                                    consoleBusiness.CmsDb.SaveChanges();

                                    #endregion

                                    #region Add UsersLeveles

                                    int LevelId = 0;

                                    switch (agencyStaffs.PositionId)
                                    {
                                        case 1://مشاور املاک - کاربر و زیرگروه ها
                                            LevelId = consoleBusiness.GetLevelId("مشاور املاک - کاربر و زیر گروه ها");
                                            break;
                                        case 2:// مشاور املاک - فقط خود کاربر
                                            LevelId = consoleBusiness.GetLevelId("مشاور املاک - فقط خود کاربر");
                                            break;
                                        case 3://مشاور املاک - فقط زیر گروه ها
                                            LevelId = consoleBusiness.GetLevelId("مشاور املاک - فقط زیر گروه ها");
                                            break;
                                        case 4: //مشاور املاک - والد و زیر گروه ها
                                            LevelId = consoleBusiness.GetLevelId("مشاور املاک - والد و زیر گروه ها");
                                            break;
                                    }

                                    UsersLevels usersLevels = new UsersLevels()
                                    {
                                        LevelId = LevelId,
                                        UserId = userId,
                                        CreateEnDate = DateTime.Now,
                                        CreateTime = PersianDate.TimeNow,
                                        UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                        IsActivated = true,
                                        IsDeleted = false,
                                    };

                                    consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                    consoleBusiness.CmsDb.SaveChanges();

                                    var levelId2 = consoleBusiness.GetLevelId("مشاور");

                                    UsersLevels usersLevels2 = new UsersLevels()
                                    {
                                        LevelId = levelId2,
                                        UserId = userId,
                                        CreateEnDate = DateTime.Now,
                                        CreateTime = PersianDate.TimeNow,
                                        UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                        IsActivated = true,
                                        IsDeleted = false,
                                    };

                                    consoleBusiness.CmsDb.UsersLevels.Add(usersLevels2);
                                    consoleBusiness.CmsDb.SaveChanges();


                                    #endregion

                                    #region Add UserRoles

                                    var roleId = consoleBusiness.CmsDb.Roles.Where(r => r.RoleName.Equals("Admins")).FirstOrDefault().RoleId;

                                    UsersRoles usersRoles = new UsersRoles()
                                    {
                                        RoleId = roleId,
                                        UserId = userId,
                                        CreateEnDate = DateTime.Now,
                                        CreateTime = PersianDate.TimeNow,
                                        UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                        IsActivated = true,
                                        IsDeleted = false,
                                    };

                                    consoleBusiness.CmsDb.UsersRoles.Add(usersRoles);
                                    consoleBusiness.CmsDb.SaveChanges();


                                    var roleId2 = consoleBusiness.CmsDb.Roles.Where(r => r.RoleName.Equals("Users")).FirstOrDefault().RoleId;

                                    UsersRoles usersRoles2 = new UsersRoles()
                                    {
                                        RoleId = roleId2,
                                        UserId = userId,
                                        CreateEnDate = DateTime.Now,
                                        CreateTime = PersianDate.TimeNow,
                                        UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                        IsActivated = true,
                                        IsDeleted = false,
                                    };

                                    consoleBusiness.CmsDb.UsersRoles.Add(usersRoles2);
                                    consoleBusiness.CmsDb.SaveChanges();
                                    #endregion


                                    transaction2.Commit();

                                }
                                catch (Exception exc)
                                {

                                    transaction.Rollback();
                                    transaction2.Rollback();


                                    return 0;
                                }

                            }
                        }
                        else
                        {
                            //اگر این کاربر وجود داشته باشد
                            var user = consoleBusiness.CmsDb.Users.Where(u => u.UserName.Equals(agencyStaffsVM.CustomUsersVM.UserName)).FirstOrDefault();

                            if (user != null)
                            {
                                if (user.UserId > 0)
                                {

                                    #region  Check the Levels

                                    var levelIds = consoleBusiness.GetMultiLevelsUserWithUserId(user.UserId).LevelIds;
                                    var levelNames = consoleBusiness.GetLevelsWithLevelIds(levelIds).Select(l => l.LevelName);

                                    //var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.UserId.Equals(user.UserId)).FirstOrDefault();

                                    if (levelNames != null)
                                    {
                                        //کاربر نباید دسترسی مدیر املاک داشته باشد
                                        if (!levelNames.Contains("مدیر املاک"))
                                        {
                                            //اگر کاربر دسترسی های مشاورین را نداشته باشد


                                            if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                                            {
                                                return -3;
                                            }
                                            else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                                            {
                                                return -3;
                                            }
                                            else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                                            {
                                                return -3;
                                            }
                                            else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                                            {
                                                return -3;
                                            }
                                            else
                                            {
                                                #region Update AgencyStaffs

                                                agencyStaffs.UserId = user.UserId;

                                                teniacoApiDb.Entry<AgencyStaffs>(agencyStaffs).State = EntityState.Modified;
                                                teniacoApiDb.SaveChanges();

                                                #endregion

                                                #region Update User

                                                user.ParentUserId = agencyStaffsVM.ParentId;
                                                user.UserIdEditor = agencyStaffsVM.UserIdCreator.Value; //this.userId
                                                user.EditEnDate = DateTime.Now;
                                                user.EditTime = PersianDate.TimeNow;

                                                consoleBusiness.CmsDb.Entry<Users>(user).State = EntityState.Modified;
                                                consoleBusiness.CmsDb.SaveChanges();

                                                #region comments
                                                //var parentId = consoleBusiness.CmsDb.Users.Where(u => u.UserName.Equals("مشاورین املاک")).FirstOrDefault().UserId;
                                                //if (!parentId.Equals(user.ParentUserId)) //کاربر والد آن مشاورین املاک نبوده باشد
                                                //{
                                                //    user.ParentUserId = agencyStaffsVM.ParentId;
                                                //    user.UserIdEditor = agencyStaffsVM.UserIdCreator.Value; //this.userId
                                                //    user.EditEnDate = DateTime.Now;
                                                //    user.EditTime = PersianDate.TimeNow;

                                                //    consoleBusiness.CmsDb.Entry<Users>(user).State = EntityState.Modified;
                                                //    consoleBusiness.CmsDb.SaveChanges();
                                                //}
                                                #endregion


                                                #endregion

                                                #region Add  UsersLeveles
                                                int levelId = 0;

                                                switch (agencyStaffs.PositionId)
                                                {
                                                    case 1: // مشاور املاک - کاربر و زیرگروه ها

                                                        if (!levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                                                        {
                                                            levelId = consoleBusiness.GetLevelId("مشاور املاک - کاربر و زیر گروه ها");




                                                            UsersLevels usersLevels = new UsersLevels()
                                                            {
                                                                LevelId = levelId,
                                                                UserId = user.UserId,
                                                                CreateEnDate = DateTime.Now,
                                                                CreateTime = PersianDate.TimeNow,
                                                                UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                                                IsActivated = true,
                                                                IsDeleted = false,
                                                            };


                                                            consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                                            consoleBusiness.CmsDb.SaveChanges();
                                                        }
                                                        break;

                                                    case 2://مشاور املاک - فقط خود کاربر

                                                        if (!levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                                                        {
                                                            levelId = consoleBusiness.GetLevelId("مشاور املاک - فقط خود کاربر");

                                                            UsersLevels usersLevels = new UsersLevels()
                                                            {
                                                                LevelId = levelId,
                                                                UserId = user.UserId,
                                                                CreateEnDate = DateTime.Now,
                                                                CreateTime = PersianDate.TimeNow,
                                                                UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                                                IsActivated = true,
                                                                IsDeleted = false,
                                                            };


                                                            consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                                            consoleBusiness.CmsDb.SaveChanges();
                                                        }

                                                        break;

                                                    case 3://مشاور املاک - فقط زیر گروه ها

                                                        if (!levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                                                        {
                                                            levelId = consoleBusiness.GetLevelId("مشاور املاک - فقط زیر گروه ها");

                                                            UsersLevels usersLevels = new UsersLevels()
                                                            {
                                                                LevelId = levelId,
                                                                UserId = user.UserId,
                                                                CreateEnDate = DateTime.Now,
                                                                CreateTime = PersianDate.TimeNow,
                                                                UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                                                IsActivated = true,
                                                                IsDeleted = false,
                                                            };


                                                            consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                                            consoleBusiness.CmsDb.SaveChanges();

                                                        }

                                                        break;

                                                    case 4: //مشاور املاک - والد و زیر گروه ها
                                                        if (!levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                                                        {
                                                            levelId = consoleBusiness.GetLevelId("مشاور املاک - والد و زیر گروه ها");

                                                            UsersLevels usersLevels = new UsersLevels()
                                                            {
                                                                LevelId = levelId,
                                                                UserId = user.UserId,
                                                                CreateEnDate = DateTime.Now,
                                                                CreateTime = PersianDate.TimeNow,
                                                                UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                                                IsActivated = true,
                                                                IsDeleted = false,
                                                            };


                                                            consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                                            consoleBusiness.CmsDb.SaveChanges();

                                                        }

                                                        break;
                                                }

                                                var levelId2 = consoleBusiness.GetLevelId("مشاور");

                                                UsersLevels usersLevels2 = new UsersLevels()
                                                {
                                                    LevelId = levelId2,
                                                    UserId = user.UserId,
                                                    CreateEnDate = DateTime.Now,
                                                    CreateTime = PersianDate.TimeNow,
                                                    UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                                    IsActivated = true,
                                                    IsDeleted = false,
                                                };

                                                consoleBusiness.CmsDb.UsersLevels.Add(usersLevels2);
                                                consoleBusiness.CmsDb.SaveChanges();

                                                #endregion

                                                #region Add UsersRoles

                                                var roleIds = consoleBusiness.GetRoleIdsWithUserId(user.UserId);
                                                var roleNames = consoleBusiness.GetRolesWithRoleIds(roleIds).Select(r => r.RoleName);



                                                if (roleNames != null)
                                                {
                                                    if (!roleNames.Contains("Admins"))
                                                    {
                                                        ////اضافه کردن نقش Admins
                                                        var roleId = consoleBusiness.CmsDb.Roles.Where(r => r.RoleName.Equals("Admins")).FirstOrDefault().RoleId;

                                                        UsersRoles usersRoles = new UsersRoles()
                                                        {
                                                            RoleId = roleId,
                                                            UserId = user.UserId,
                                                            CreateEnDate = DateTime.Now,
                                                            CreateTime = PersianDate.TimeNow,
                                                            UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                                            IsActivated = true,
                                                            IsDeleted = false,
                                                        };


                                                        consoleBusiness.CmsDb.UsersRoles.Add(usersRoles);
                                                        consoleBusiness.CmsDb.SaveChanges();
                                                    }


                                                    if (!roleNames.Contains("Users"))
                                                    {
                                                        ////اضافه کردن نقش Users
                                                        var roleId2 = consoleBusiness.CmsDb.Roles.Where(r => r.RoleName.Equals("Users")).FirstOrDefault().RoleId;

                                                        UsersRoles usersRoles2 = new UsersRoles()
                                                        {
                                                            RoleId = roleId2,
                                                            UserId = user.UserId,
                                                            CreateEnDate = DateTime.Now,
                                                            CreateTime = PersianDate.TimeNow,
                                                            UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                                            IsActivated = true,
                                                            IsDeleted = false,
                                                        };


                                                        consoleBusiness.CmsDb.UsersRoles.Add(usersRoles2);
                                                        consoleBusiness.CmsDb.SaveChanges();
                                                    }
                                                }
                                                #endregion

                                                #region Update UsersProfile

                                                var userProfile = consoleBusiness.CmsDb.UsersProfile.Where(p => p.UserId.Equals(user.UserId)).FirstOrDefault();
                                                if (userProfile != null)
                                                {
                                                    userProfile.Name = agencyStaffsVM.CustomUsersVM.Name != null ? agencyStaffsVM.CustomUsersVM.Name : "";
                                                    userProfile.Family = agencyStaffsVM.CustomUsersVM.Family != null ? agencyStaffsVM.CustomUsersVM.Family : "";
                                                    userProfile.Mobile = agencyStaffsVM.CustomUsersVM.Mobile;
                                                    userProfile.Phone = agencyStaffsVM.CustomUsersVM.Mobile;

                                                    userProfile.UserIdEditor = agencyStaffsVM.UserIdCreator.Value; //this.userId
                                                    userProfile.EditEnDate = DateTime.Now;
                                                    userProfile.EditTime = PersianDate.TimeNow;

                                                    consoleBusiness.CmsDb.Entry<UsersProfile>(userProfile).State = EntityState.Modified;
                                                    consoleBusiness.CmsDb.SaveChanges();
                                                }


                                                #endregion
                                            }
                                        }
                                        else
                                        {
                                            return -2;
                                        }
                                    }
                                    #endregion



                                    #region old - codes
                                    //var levelIds = consoleBusiness.GetMultiLevelsUserWithUserId(user.UserId).LevelIds;
                                    //var levelNames = consoleBusiness.GetLevelsWithLevelIds(levelIds).Select(l => l.LevelName);

                                    //var roleIds = consoleBusiness.GetRoleIdsWithUserId(user.UserId);
                                    //var roleNames = consoleBusiness.GetRolesWithRoleIds(roleIds).Select(r => r.RoleName);

                                    //int levelId = 0;

                                    ////اگر این کاربر دسترسی هیچ یک از دسترسی های املاکی ها را نداشته باشد
                                    //switch (agencyStaffs.PositionId)
                                    //{
                                    //    case 1://مدیر املاک

                                    //        if (!levelNames.Contains("مدیر املاک"))
                                    //        {
                                    //            levelId = consoleBusiness.GetLevelId("مدیر املاک");

                                    //            UsersLevels usersLevels = new UsersLevels()
                                    //            {
                                    //                LevelId = levelId,
                                    //                UserId = user.UserId,
                                    //                CreateEnDate = DateTime.Now,
                                    //                CreateTime = PersianDate.TimeNow,
                                    //                UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                    //                IsActivated = true,
                                    //                IsDeleted = false,
                                    //            };


                                    //            consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                    //            consoleBusiness.CmsDb.SaveChanges();
                                    //        }
                                    //        break;

                                    //    case 2://کارشناس ارشد املاک

                                    //        if (!levelNames.Contains("کارشناس ارشد املاک"))
                                    //        {
                                    //            levelId = consoleBusiness.GetLevelId("کارشناس ارشد املاک");

                                    //            UsersLevels usersLevels = new UsersLevels()
                                    //            {
                                    //                LevelId = levelId,
                                    //                UserId = user.UserId,
                                    //                CreateEnDate = DateTime.Now,
                                    //                CreateTime = PersianDate.TimeNow,
                                    //                UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                    //                IsActivated = true,
                                    //                IsDeleted = false,
                                    //            };


                                    //            consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                    //            consoleBusiness.CmsDb.SaveChanges();
                                    //        }

                                    //        break;

                                    //    case 3://کارشناس املاک

                                    //        if (!levelNames.Contains("کارشناس املاک"))
                                    //        {
                                    //            levelId = consoleBusiness.GetLevelId("کارشناس املاک");

                                    //            UsersLevels usersLevels = new UsersLevels()
                                    //            {
                                    //                LevelId = levelId,
                                    //                UserId = user.UserId,
                                    //                CreateEnDate = DateTime.Now,
                                    //                CreateTime = PersianDate.TimeNow,
                                    //                UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                    //                IsActivated = true,
                                    //                IsDeleted = false,
                                    //            };


                                    //            consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                    //            consoleBusiness.CmsDb.SaveChanges();

                                    //        }

                                    //        break;
                                    //}



                                    ////اگر نقش users نداشته باشد
                                    //if (roleNames != null)
                                    //{
                                    //    if (!roleNames.Contains("Admins"))
                                    //    {
                                    //        //اضافه کردن نقش Users
                                    //        var roleId = consoleBusiness.CmsDb.Roles.Where(r => r.RoleName.Equals("Users")).FirstOrDefault().RoleId;

                                    //        UsersRoles usersRoles = new UsersRoles()
                                    //        {
                                    //            RoleId = roleId,
                                    //            UserId = user.UserId,
                                    //            CreateEnDate = DateTime.Now,
                                    //            CreateTime = PersianDate.TimeNow,
                                    //            UserIdCreator = agencyStaffsVM.UserIdCreator.Value,
                                    //            IsActivated = true,
                                    //            IsDeleted = false,
                                    //        };


                                    //        consoleBusiness.CmsDb.UsersRoles.Add(usersRoles);
                                    //        consoleBusiness.CmsDb.SaveChanges();
                                    //    }
                                    //}
                                    #endregion

                                }
                            }
                        }

                    }
                    #endregion


                    transaction.Commit();

                    return agencyStaffs.AgencyStaffsId;

                }
                catch (Exception exc)
                {
                    transaction.Rollback();
                }
            }

            return 0;
        }

        public int UpdateAgencyStaffs(
            ref AgencyStaffsVM agencyStaffsVM,
            List<long> childsUsersIds,
            IConsoleBusiness consoleBusiness)
        {

            int agencyStaffsId = agencyStaffsVM.AgencyStaffsId;

            bool? isActivated = agencyStaffsVM.IsActivated.HasValue ? agencyStaffsVM.IsActivated.Value : (bool?)true;
            bool? isDeleted = agencyStaffsVM.IsDeleted.HasValue ? agencyStaffsVM.IsDeleted.Value : (bool?)true;


            if (teniacoApiDb.AgencyStaffs.Where(n => childsUsersIds.Contains(n.UserIdCreator.Value)).Where(x => x.AgencyStaffsId.Equals(agencyStaffsId)).Any())
            {
                try
                {

                    #region Update AgencyStaffs

                    AgencyStaffs agenciesStaffs = (from a in teniacoApiDb.AgencyStaffs
                                                   where a.AgencyStaffsId == agencyStaffsId
                                                   select a).FirstOrDefault();


                    agenciesStaffs.PositionId = agencyStaffsVM.PositionId; //کمبوی دسترسی
                    agenciesStaffs.IsActivated = isActivated;
                    agenciesStaffs.IsDeleted = isDeleted;


                    agenciesStaffs.UserIdEditor = agencyStaffsVM.UserIdEditor.Value; //this.userId
                    agenciesStaffs.EditEnDate = DateTime.Now;
                    agenciesStaffs.EditTime = PersianDate.TimeNow;

                    teniacoApiDb.Entry<AgencyStaffs>(agenciesStaffs).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();


                    #endregion

                    #region Update User

                    var user = consoleBusiness.CmsDb.Users.Where(u => u.UserId.Equals(agenciesStaffs.UserId)).FirstOrDefault();


                    if (user.UserId.Equals(agencyStaffsVM.ParentId))
                    {
                        return -3;
                    }
                    else
                    {
                        user.ParentUserId = agencyStaffsVM.ParentId;  //والد
                        user.UserIdEditor = agencyStaffsVM.UserIdEditor.Value; //this.userId
                        user.EditEnDate = DateTime.Now;
                        user.EditTime = PersianDate.TimeNow;

                        consoleBusiness.CmsDb.Entry<Users>(user).State = EntityState.Modified;
                        consoleBusiness.CmsDb.SaveChanges();
                    }

                    #endregion

                    #region Update userLevel

                    var levelIds = consoleBusiness.GetMultiLevelsUserWithUserId(user.UserId).LevelIds;
                    var levelNames = consoleBusiness.GetLevelsWithLevelIds(levelIds).Select(l => l.LevelName);

                    int levelId = 0;


                    #region Remove other levels

                    //باقی دسترسی های مشاورین باید پاک شود
                    //هیچ مشاور آژانس ای نمیتواند دو دسترسی مشاور داشته باشد

                    if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                    {
                        var id = consoleBusiness.GetLevelId("مشاور املاک - کاربر و زیر گروه ها");

                        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(id)).FirstOrDefault();

                        consoleBusiness.CmsDb.UsersLevels.RemoveRange(userLevel);
                        consoleBusiness.CmsDb.SaveChanges();
                    }
                    if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                    {
                        var id = consoleBusiness.GetLevelId("مشاور املاک - فقط خود کاربر");

                        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(id)).FirstOrDefault();

                        consoleBusiness.CmsDb.UsersLevels.RemoveRange(userLevel);
                        consoleBusiness.CmsDb.SaveChanges();
                    }
                    if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                    {
                        var id = consoleBusiness.GetLevelId("مشاور املاک - فقط زیر گروه ها");

                        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(id)).FirstOrDefault();

                        consoleBusiness.CmsDb.UsersLevels.RemoveRange(userLevel);
                        consoleBusiness.CmsDb.SaveChanges();
                    }
                    if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                    {
                        var id = consoleBusiness.GetLevelId("مشاور املاک - والد و زیر گروه ها");

                        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(id)).FirstOrDefault();

                        consoleBusiness.CmsDb.UsersLevels.RemoveRange(userLevel);
                        consoleBusiness.CmsDb.SaveChanges();
                    }
                    #endregion


                    switch (agenciesStaffs.PositionId)
                    {
                        case 1: // مشاور املاک - کاربر و زیرگروه ها

                            if (!levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                            {
                                levelId = consoleBusiness.GetLevelId("مشاور املاک - کاربر و زیر گروه ها");

                                UsersLevels usersLevels = new UsersLevels()
                                {
                                    LevelId = levelId,
                                    UserId = user.UserId,
                                    CreateEnDate = DateTime.Now,
                                    CreateTime = PersianDate.TimeNow,
                                    UserIdCreator = agencyStaffsVM.UserIdEditor.Value,
                                    IsActivated = true,
                                    IsDeleted = false,
                                };


                                consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                consoleBusiness.CmsDb.SaveChanges();
                            }
                            break;

                        case 2://مشاور املاک - فقط خود کاربر

                            if (!levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                            {
                                levelId = consoleBusiness.GetLevelId("مشاور املاک - فقط خود کاربر");

                                UsersLevels usersLevels = new UsersLevels()
                                {
                                    LevelId = levelId,
                                    UserId = user.UserId,
                                    CreateEnDate = DateTime.Now,
                                    CreateTime = PersianDate.TimeNow,
                                    UserIdCreator = agencyStaffsVM.UserIdEditor.Value,
                                    IsActivated = true,
                                    IsDeleted = false,
                                };


                                consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                consoleBusiness.CmsDb.SaveChanges();
                            }

                            break;

                        case 3://مشاور املاک - فقط زیر گروه ها

                            if (!levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                            {
                                levelId = consoleBusiness.GetLevelId("مشاور املاک - فقط زیر گروه ها");

                                UsersLevels usersLevels = new UsersLevels()
                                {
                                    LevelId = levelId,
                                    UserId = user.UserId,
                                    CreateEnDate = DateTime.Now,
                                    CreateTime = PersianDate.TimeNow,
                                    UserIdCreator = agencyStaffsVM.UserIdEditor.Value,
                                    IsActivated = true,
                                    IsDeleted = false,
                                };


                                consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                consoleBusiness.CmsDb.SaveChanges();

                            }

                            break;

                        case 4: //مشاور املاک - والد و زیر گروه ها
                            if (!levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                            {
                                levelId = consoleBusiness.GetLevelId("مشاور املاک - والد و زیر گروه ها");

                                UsersLevels usersLevels = new UsersLevels()
                                {
                                    LevelId = levelId,
                                    UserId = user.UserId,
                                    CreateEnDate = DateTime.Now,
                                    CreateTime = PersianDate.TimeNow,
                                    UserIdCreator = agencyStaffsVM.UserIdEditor.Value,
                                    IsActivated = true,
                                    IsDeleted = false,
                                };


                                consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                consoleBusiness.CmsDb.SaveChanges();

                            }

                            break;
                    }

                    #endregion



                    #region comments - old codes
                    //if (consoleBusiness.CmsDb.Users.Where(u => u.UserId.Equals(agenciesStaffs.UserId)).Any())
                    //{
                    //    var user = consoleBusiness.CmsDb.Users.Where(u => u.UserId.Equals(agenciesStaffs.UserId)).FirstOrDefault();
                    //    if (!string.IsNullOrEmpty(agencyStaffsVM.CustomUsersVM.Password))
                    //    {
                    //        if (!string.IsNullOrEmpty(agencyStaffsVM.CustomUsersVM.ReplyPassword))
                    //        {
                    //            if (agencyStaffsVM.CustomUsersVM.Password.Equals(agencyStaffsVM.CustomUsersVM.ReplyPassword))
                    //            {
                    //                user.Password = FrameWork.MD5Hash.GetMD5Hash(agencyStaffsVM.CustomUsersVM.Password);
                    //            }
                    //            else
                    //            {
                    //                returnMssage = "رمز عبور و تکرار آن یکسان نیست";
                    //                return 0;
                    //            }
                    //        }
                    //        else
                    //        {
                    //            returnMssage = "تکرار رمز عبور را وارد کنید";
                    //            return 0;
                    //        }
                    //    }

                    //    user.UserName = agencyStaffsVM.CustomUsersVM.UserName;

                    //    agenciesStaffs.EditEnDate = DateTime.Now;
                    //    agenciesStaffs.EditTime = PersianDate.TimeNow;
                    //    agenciesStaffs.UserIdEditor = agenciesStaffs.UserIdEditor.Value;
                    //    agenciesStaffs.IsActivated = isActivated.Value;
                    //    agenciesStaffs.IsDeleted = isDeleted.Value;

                    //    consoleBusiness.CmsDb.Entry<Users>(user).State = EntityState.Modified;
                    //    consoleBusiness.CmsDb.SaveChanges();

                    //    agencyStaffsVM.UserIdCreator = agenciesStaffs.UserIdCreator.Value;

                    //    return agenciesStaffs.AgencyStaffsId;
                    //}
                    #endregion


                    return agenciesStaffs.AgencyStaffsId;

                }
                catch (Exception ex)
                { }

            }
            return 0;
        }

        public AgencyStaffsVM GetAgencyStaffWithAgencyStaffId(
            int? agencyStaffId,
            List<long> childsUsersIds)
        {
            AgencyStaffsVM agencyStaffsVM = new AgencyStaffsVM();

            try
            {
                agencyStaffsVM = _mapper.Map<AgencyStaffs,
                    AgencyStaffsVM>(teniacoApiDb.AgencyStaffs
                    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                     .Where(e => e.AgencyStaffsId.Equals(agencyStaffId)).FirstOrDefault());

            }
            catch (Exception exc)
            { }

            return agencyStaffsVM;
        }

        public bool ToggleActivationAgencyStaffs(int agencyStaffId,
            long userId,
            List<long> childsUsersIds,
            IConsoleBusiness consoleBusiness)
        {
            try
            {

                #region Update AgencyStaffs


                var agencyStaffs = (from c in teniacoApiDb.AgencyStaffs
                                    where c.AgencyStaffsId == agencyStaffId &&
                                    childsUsersIds.Contains(c.UserIdCreator.Value)
                                    select c).FirstOrDefault();

                if (agencyStaffs != null)
                {
                    agencyStaffs.IsActivated = !agencyStaffs.IsActivated;
                    agencyStaffs.EditEnDate = DateTime.Now;
                    agencyStaffs.EditTime = PersianDate.TimeNow;
                    agencyStaffs.UserIdEditor = userId;

                    teniacoApiDb.Entry<AgencyStaffs>(agencyStaffs).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();


                    #endregion




                    using (var transaction = consoleBusiness.CmsDb.Database.BeginTransaction())
                    {
                        try
                        {
                            #region Update Users

                            if (agencyStaffs.UserId.HasValue)
                            {
                                var users = (from u in consoleBusiness.CmsDb.Users
                                             where u.UserId == agencyStaffs.UserId.Value &&
                                              childsUsersIds.Contains(u.UserIdCreator.Value)
                                             select u).FirstOrDefault();

                                if (users != null)
                                {
                                    users.IsActivated = !users.IsActivated;
                                    users.EditEnDate = DateTime.Now;
                                    users.EditTime = PersianDate.TimeNow;
                                    users.UserIdEditor = userId;


                                    consoleBusiness.CmsDb.Entry<Users>(users).State = EntityState.Modified;
                                    consoleBusiness.CmsDb.SaveChanges();
                                }

                                #endregion

                                #region Update UsersProfile

                                var userProfile = (from up in consoleBusiness.CmsDb.UsersProfile
                                                   where up.UserId == agencyStaffs.UserId.Value &&
                                                   childsUsersIds.Contains(up.UserIdCreator.Value)
                                                   select up).FirstOrDefault();

                                if (userProfile != null)
                                {
                                    userProfile.IsActivated = !userProfile.IsActivated;
                                    userProfile.EditEnDate = DateTime.Now;
                                    userProfile.EditTime = PersianDate.TimeNow;
                                    userProfile.UserIdEditor = userId;


                                    consoleBusiness.CmsDb.Entry<UsersProfile>(userProfile).State = EntityState.Modified;
                                    consoleBusiness.CmsDb.SaveChanges();
                                }

                                #endregion

                            }

                            transaction.Commit();
                            return true;
                        }
                        catch (Exception exc)
                        {

                            transaction.Rollback();
                        }

                    }


                }
            }
            catch (Exception exc)
            { }

            return false;

        }

        public bool TemporaryDeleteAgencyStaffs(int agencyStaffId,
            long userId,
            List<long> childsUsersIds,
            IConsoleBusiness consoleBusiness)
        {
            try
            {

                #region Update AgencyStaffs

                var agencyStaffs = (from c in teniacoApiDb.AgencyStaffs
                                    where c.AgencyStaffsId == agencyStaffId &&
                                    childsUsersIds.Contains(c.UserIdCreator.Value)
                                    select c).FirstOrDefault();

                if (agencyStaffs != null)
                {
                    agencyStaffs.IsDeleted = !agencyStaffs.IsDeleted;
                    agencyStaffs.EditEnDate = DateTime.Now;
                    agencyStaffs.EditTime = PersianDate.TimeNow;
                    agencyStaffs.UserIdEditor = userId;

                    teniacoApiDb.Entry<AgencyStaffs>(agencyStaffs).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    #endregion



                    using (var transaction = consoleBusiness.CmsDb.Database.BeginTransaction())
                    {
                        try
                        {

                            #region Update Users

                            if (agencyStaffs.UserId.HasValue)
                            {
                                var users = (from u in consoleBusiness.CmsDb.Users
                                             where u.UserId == agencyStaffs.UserId.Value &&
                                              childsUsersIds.Contains(u.UserIdCreator.Value)
                                             select u).FirstOrDefault();

                                if (users != null)
                                {
                                    users.IsDeleted = !users.IsDeleted;
                                    users.EditEnDate = DateTime.Now;
                                    users.EditTime = PersianDate.TimeNow;
                                    users.UserIdEditor = userId;


                                    consoleBusiness.CmsDb.Entry<Users>(users).State = EntityState.Modified;
                                    consoleBusiness.CmsDb.SaveChanges();
                                }

                                #endregion

                                #region Update UsersProfile
                                var userProfile = (from up in consoleBusiness.CmsDb.UsersProfile
                                                   where up.UserId == agencyStaffs.UserId.Value &&
                                                   childsUsersIds.Contains(up.UserIdCreator.Value)
                                                   select up).FirstOrDefault();

                                if (userProfile != null)
                                {
                                    userProfile.IsDeleted = !userProfile.IsDeleted;
                                    userProfile.EditEnDate = DateTime.Now;
                                    userProfile.EditTime = PersianDate.TimeNow;
                                    userProfile.UserIdEditor = userId;


                                    consoleBusiness.CmsDb.Entry<UsersProfile>(userProfile).State = EntityState.Modified;
                                    consoleBusiness.CmsDb.SaveChanges();
                                }

                                #endregion

                            }

                            transaction.Commit();
                            return true;
                        }
                        catch (Exception exc)
                        {

                            transaction.Rollback();
                        }

                    }


                }
            }
            catch (Exception exc)
            { }

            return false;

        }

        public bool CompleteDeleteAgencyStaffs(int agencyStaffId,
            List<long> childsUsersIds,
            IConsoleBusiness consoleBusiness)
        {
            try
            {
                #region Remove AgencyStaffs

                var agencyStaffs = (from c in teniacoApiDb.AgencyStaffs
                                    where c.AgencyStaffsId == agencyStaffId &&
                                    childsUsersIds.Contains(c.UserIdCreator.Value)
                                    select c).FirstOrDefault();

                #endregion


                if (agencyStaffs != null)
                {
                    teniacoApiDb.AgencyStaffs.Remove(agencyStaffs);


                    #region Remove Users

                    using (var transaction = consoleBusiness.CmsDb.Database.BeginTransaction())
                    {
                        try
                        {
                            if (agencyStaffs.UserId.HasValue)
                            {
                                var user = consoleBusiness.CmsDb.Users.Where(c => c.UserId.Equals(agencyStaffs.UserId)).FirstOrDefault();
                                if (user != null)
                                {
                                    if (user.UserId > 0)
                                    {
                                        var levelIds = consoleBusiness.CmsDb.UsersLevels.Where(c => c.UserId.Equals(user.UserId)).Select(c => c.LevelId).ToList();
                                        var levelNames = consoleBusiness.CmsDb.Levels.Where(c => levelIds.Contains(c.LevelId)).Select(c => c.LevelName).ToList();

                                        int levelId = 0;

                                        //if (levelNames.Count > 2)   //اگر آن کاربر دسترسی های دیگری جز مشاور داشته باشد.
                                        //{
                                        //    #region Remove the UserLevel

                                        //    if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                                        //    {
                                        //        levelId = consoleBusiness.GetLevelId("مشاور املاک - کاربر و زیر گروه ها");
                                        //        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                        //        consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                        //        consoleBusiness.CmsDb.SaveChanges();
                                        //    }
                                        //    else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                                        //    {
                                        //        levelId = consoleBusiness.GetLevelId("مشاور املاک - فقط خود کاربر");
                                        //        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                        //        consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                        //        consoleBusiness.CmsDb.SaveChanges();
                                        //    }
                                        //    else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                                        //    {
                                        //        levelId = consoleBusiness.GetLevelId("مشاور املاک - فقط زیر گروه ها");
                                        //        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                        //        consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                        //        consoleBusiness.CmsDb.SaveChanges();
                                        //    }
                                        //    else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                                        //    {
                                        //        levelId = consoleBusiness.GetLevelId("مشاور املاک - والد و زیر گروه ها");
                                        //        var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                        //        consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                        //        consoleBusiness.CmsDb.SaveChanges();
                                        //    }

                                        //    //else if (levelNames.Contains("مشاور"))
                                        //    //{
                                        //    //    levelId = consoleBusiness.GetLevelId("مشاور");
                                        //    //    var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                        //    //    consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                        //    //    consoleBusiness.CmsDb.SaveChanges();
                                        //    //}


                                        //    #endregion

                                        //    teniacoApiDb.SaveChanges();
                                        //}
                                        //else   //اگر آن کاربر فقط دسترسی مشاور داشته باشد
                                        //{
                                        #region Remove the UserLevel

                                        if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                                        {
                                            levelId = consoleBusiness.GetLevelId("مشاور املاک - کاربر و زیر گروه ها");
                                            var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                            consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                            consoleBusiness.CmsDb.SaveChanges();
                                        }
                                        else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                                        {
                                            levelId = consoleBusiness.GetLevelId("مشاور املاک - فقط خود کاربر");
                                            var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                            consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                            consoleBusiness.CmsDb.SaveChanges();
                                        }
                                        else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                                        {
                                            levelId = consoleBusiness.GetLevelId("مشاور املاک - فقط زیر گروه ها");
                                            var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                            consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                            consoleBusiness.CmsDb.SaveChanges();
                                        }
                                        else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                                        {
                                            levelId = consoleBusiness.GetLevelId("مشاور املاک - والد و زیر گروه ها");
                                            var userLevel = consoleBusiness.CmsDb.UsersLevels.Where(c => c.LevelId.Equals(levelId)).FirstOrDefault();
                                            consoleBusiness.CmsDb.UsersLevels.Remove(userLevel);
                                            consoleBusiness.CmsDb.SaveChanges();
                                        }

                                        #endregion

                                        #region Remove UserProfile

                                        //var userProfile = (from up in consoleBusiness.CmsDb.UsersProfile
                                        //                   where up.UserId == agencyStaffs.UserId.Value &&
                                        //                   childsUsersIds.Contains(up.UserIdCreator.Value)
                                        //                   select up).FirstOrDefault();

                                        //if (userProfile != null)
                                        //{
                                        //    consoleBusiness.CmsDb.UsersProfile.Remove(userProfile);
                                        //    consoleBusiness.CmsDb.SaveChanges();
                                        //}

                                        #endregion


                                        #region Remove Users
                                        //var users = (from u in consoleBusiness.CmsDb.Users
                                        //             where u.UserId == agencyStaffs.UserId.Value &&
                                        //              childsUsersIds.Contains(u.UserIdCreator.Value)
                                        //             select u).FirstOrDefault();

                                        //consoleBusiness.CmsDb.Users.Remove(user);
                                        //consoleBusiness.CmsDb.SaveChanges();


                                        #endregion

                                        teniacoApiDb.SaveChanges();
                                        //}

                                    }
                                }

                            }

                            transaction.Commit();
                            return true;
                        }
                        catch (Exception exc)
                        {

                            transaction.Rollback();
                        }

                    }

                    #endregion


                }
            }
            catch (Exception exc)
            { }

            return false;

        }

        #endregion

        #region Methods for Work With AgencyLocation
        public bool UpdateAgencylocation(
            int agencyId,
            double locationLat,
            double locationLon)
        {
            try
            {
                if (teniacoApiDb.Agencies.Where(pa => pa.AgencyId.Equals(agencyId)).Any())
                {
                    var agencyLocations = teniacoApiDb.Agencies.Where(pa => pa.AgencyId.Equals(agencyId)).FirstOrDefault();

                    if (agencyLocations != null)
                    {
                        agencyLocations.LocationLat = locationLat;
                        agencyLocations.LocationLon = locationLon;
                        agencyLocations.EditEnDate = DateTime.Now;
                        agencyLocations.EditTime = PersianDate.TimeNow;


                        teniacoApiDb.Entry<Agencies>(agencyLocations).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();

                        return true;
                    }
                }
            }
            catch (Exception exc)
            { }

            return false;
        }

        #endregion

        #region Methods For Work With CompareProperties

        public List<ComparePropertiesByPersonIdVM> GetAllComparePropertiesListByPersonId(
              List<long> childsUsersIds,
              PublicApiContext publicApiDb)
        {
            List<ComparePropertiesByPersonIdVM> comparePropertiesByPersonIdVMList = new List<ComparePropertiesByPersonIdVM>();

            try
            {
                var propertiesList = TeniacoApiDb.Properties.Where(c => c.IsActivated.Value.Equals(true) && c.IsDeleted.Value.Equals(false)).ToList();
                //  var personsList = publicApiDb.Persons.ToList();

                var personsList = publicApiDb.Persons.ToList().Select(a => new { FullName = a.Name + " " + a.Family, a.PersonId });

                var list = propertiesList.Select(a =>
                new ComparePropertiesByPersonIdVM
                {
                    PropertyId = a.PropertyId,
                    PropertyTypeId = a.PropertyTypeId,
                    PropertyCodeName = a.PropertyCodeName,

                    FullName = /*(String.IsNullOrEmpty(a.PropertyCodeName) == false ? "/" + a.PropertyCodeName : "") +*/

                    (string.IsNullOrEmpty(personsList.FirstOrDefault(b => b.PersonId == a.ConsultantUserId)?.FullName) == false ?
                      "/" + personsList.FirstOrDefault(b => b.PersonId == a.ConsultantUserId)?.FullName : "")/* +
                    (string.IsNullOrEmpty(personsList.FirstOrDefault(b => b.PersonId == a.OwnerId)?.FullName) == false ?
                     "/" + personsList.FirstOrDefault(b => b.PersonId == a.OwnerId)?.FullName : "")*/

                }).ToList();


                comparePropertiesByPersonIdVMList = list.OrderByDescending(s => s.PropertyId).ToList();
            }
            catch (Exception)
            { }

            return comparePropertiesByPersonIdVMList;
        }


        //public List<PropertiesCompareTopicVM> GetAllPropertiesCompareTopic(
        //    PublicApiContext publicApiDb,
        //    GetAllPropertiesCompareTopicPVM getAllPropertiesCompareTopicPVM)
        //{
        //    var _query = teniacoApiDb.Properties.AsQueryable();
        //    var PropertyList = _query.ToList();
        //    var _Person = publicApiDb.Persons.AsQueryable();
        //    var PersonList = _Person.ToList().Select(a => new { Fname = a.Name + " " + a.Family, a.PersonId });
        //    var result = PropertyList.Select(a => new PropertiesCompareTopicVM
        //    {
        //        PropertyId = a.PropertyId,
        //        PropertyTypeId = a.PropertyTypeId,

        //        Title = a.PropertyId.ToString() + //+"/" + (String.IsNullOrEmpty(a.PropertyCodeName)==false ? "/"+a.PropertyCodeName:"")+
        //        (String.IsNullOrEmpty(a.PropertyCodeName) == false ? "/" + a.PropertyCodeName : "") +

        //        (string.IsNullOrEmpty(PersonList.FirstOrDefault(b => b.PersonId == a.ConsultantUserId)?.Fname) == false ?
        //        "/" + PersonList.FirstOrDefault(b => b.PersonId == a.ConsultantUserId)?.Fname
        //        : "") +
        //        (string.IsNullOrEmpty(PersonList.FirstOrDefault(b => b.PersonId == a.OwnerId)?.Fname) == false ?
        //        "/" + PersonList.FirstOrDefault(b => b.PersonId == a.OwnerId)?.Fname : ""),

        //    }).ToList();
        //    return result;
        //}


        //public PropertiesCompareBasicInfoVM GetPropertiesCompareBasicInfo(
        //    PublicApiContext publicApiDb,
        //    GetPropertiesCompareBasicInfoPVM getPropertiesCompareBasicInfoPVM)

        //{

        //    var _Property = teniacoApiDb.Properties.FirstOrDefault(a => a.PropertyId == getPropertiesCompareBasicInfoPVM.PropertyId);
        //    ArgumentNullException.ThrowIfNull(_Property);
        //    var _Propert_Address = teniacoApiDb.PropertyAddress.FirstOrDefault(a => a.PropertyId == getPropertiesCompareBasicInfoPVM.PropertyId);
        //    PropertiesCompareBasicInfoVM result = new PropertiesCompareBasicInfoVM();
        //    result.Area = _Property?.Area;
        //    result.PropertyCodeName = _Property?.PropertyCodeName;
        //    result.PropertyTypesName = teniacoApiDb.PropertyTypes.FirstOrDefault(a => a.PropertyTypeId == _Property!.PropertyTypeId)?.PropertyTypeTilte;
        //    result.TypeOfUses = teniacoApiDb.TypeOfUses.FirstOrDefault(a => a.TypeOfUseId == _Property!.TypeOfUseId)?.TypeOfUseTitle;
        //    result.DocumentTypes = teniacoApiDb.DocumentTypes.FirstOrDefault(a => a.DocumentTypeId == _Property!.DocumentTypeId)?.DocumentTypeTitle;

        //    if (_Propert_Address != null)
        //    {
        //        result.StateName = publicApiDb.States.FirstOrDefault(a => a.StateId == _Propert_Address!.StateId)?.StateName;
        //        result.CityName = publicApiDb.Cities.FirstOrDefault(a => a.CityId == _Propert_Address!.CityId)?.CityName;
        //        if (_Propert_Address.ZoneId.HasValue && _Propert_Address.ZoneId.Value > 0)
        //            result.ZoneName = publicApiDb.Zones.FirstOrDefault(a => a.ZoneId == _Propert_Address.ZoneId)?.ZoneName;
        //        if (_Propert_Address.DistrictId.HasValue && _Propert_Address.DistrictId.Value > 0)
        //            result.DistrictName = publicApiDb.Districts.FirstOrDefault(a => a.DistrictId == _Propert_Address.DistrictId)?.DistrictName;
        //        result.LocationLat = _Propert_Address.LocationLat;
        //        result.LocationLon = _Propert_Address.LocationLon;


        //    }
        //    return result;
        //}



        //public List<FeaturesValuesCompareVM> GetAllFeaturesValuesCompare(
        //        GetFeaturesValuesComparePVM getFeaturesValuesComparePVM)
        //{
        //    var query = from a in teniacoApiDb.Features.AsQueryable()
        //                join b in teniacoApiDb.FeaturesValues.AsQueryable() on a.FeatureId equals b.FeatureId
        //                where b.PropertyId == getFeaturesValuesComparePVM.PropertyId
        //                select new FeaturesValuesCompareVM
        //                {
        //                    FeatureId = a.FeatureId,
        //                    PropertyId = b.PropertyId,
        //                    FeatureValueId = b.FeatureValueId,
        //                    FeatureTitle = a.FeatureTitle,
        //                    FeatureValue = b.FeatureValue
        //                };
        //    return query.ToList();

        //}




        public ComparePropertiesForBasicInfoVM GetListOfComparePropertiesForBasicInfo(
             List<long> childsUsersIds,
              long propertyId = 0)
        {
            ComparePropertiesForBasicInfoVM comparePropertiesForBasicInfoVMList = new ComparePropertiesForBasicInfoVM();

            try
            {

                var list = (from p in teniacoApiDb.Properties
                            where p.PropertyId == propertyId &&
                            p.IsActivated.Value.Equals(true) &&
                            p.IsDeleted.Value.Equals(false)
                            join t in teniacoApiDb.PropertyTypes on p.PropertyTypeId equals t.PropertyTypeId
                            join u in teniacoApiDb.TypeOfUses on p.TypeOfUseId equals u.TypeOfUseId
                            join d in teniacoApiDb.DocumentTypes on p.DocumentTypeId equals d.DocumentTypeId
                            select new ComparePropertiesForBasicInfoVM
                            {
                                PropertyId = p.PropertyId,
                                PropertyCodeName = p.PropertyCodeName,
                                Area = p.Area,
                                PropertyTypeId = t.PropertyTypeId,
                                PropertyTypeTitle = t.PropertyTypeTilte,
                                TypeOfUseId = u.TypeOfUseId,
                                TypeOfUseTitle = u.TypeOfUseTitle,
                                DocumentTypeId = d.DocumentTypeId,
                                DocumentTypeTitle = d.DocumentTypeTitle
                            }).FirstOrDefault();



                //comparePropertiesForBasicInfoVMList = list.OrderByDescending(f => f.PropertyId).ToList();

                comparePropertiesForBasicInfoVMList = list;


            }
            catch (Exception)
            { }

            return comparePropertiesForBasicInfoVMList;
        }


        //public List<ComparePropertiesForBasicInfoVM> GetListOfComparePropertiesForBasicInfo(
        //     List<long> childsUsersIds,
        //      long propertyId = 0)
        //{
        //    List<ComparePropertiesForBasicInfoVM> comparePropertiesForBasicInfoVMList = new List<ComparePropertiesForBasicInfoVM>();

        //    try
        //    {

        //        var list = (from p in teniacoApiDb.Properties
        //                    where p.PropertyId == propertyId
        //                    join t in teniacoApiDb.PropertyTypes on p.PropertyTypeId equals t.PropertyTypeId
        //                    join u in teniacoApiDb.TypeOfUses on p.TypeOfUseId equals u.TypeOfUseId
        //                    join d in teniacoApiDb.DocumentTypes on p.DocumentTypeId equals d.DocumentTypeId
        //                    select new ComparePropertiesForBasicInfoVM
        //                    {
        //                        PropertyId = p.PropertyId,
        //                        PropertyCodeName = p.PropertyCodeName,
        //                        Area = p.Area,
        //                        PropertyTypeId = t.PropertyTypeId,
        //                        PropertyTypeTitle = t.PropertyTypeTilte,
        //                        TypeOfUseId = u.TypeOfUseId,
        //                        TypeOfUseTitle = u.TypeOfUseTitle,
        //                        DocumentTypeId = d.DocumentTypeId,
        //                        DocumentTypeTitle = d.DocumentTypeTitle
        //                    }).AsEnumerable();



        //        comparePropertiesForBasicInfoVMList = list.OrderByDescending(f => f.PropertyId).ToList();


        //    }
        //    catch (Exception)
        //    { }

        //    return comparePropertiesForBasicInfoVMList;
        //}


        public List<CompareFeatureValuesVM> GetListOfCompareFeatureValues(
             List<long> childsUsersIds,
              long propertyId = 0)
        {
            List<CompareFeatureValuesVM> compareFeatureValuesVMList = new List<CompareFeatureValuesVM>();

            try
            {

                var list = (from v in teniacoApiDb.FeaturesValues
                            where v.PropertyId == propertyId
                            join o in teniacoApiDb.FeaturesOptions on v.FeatureId equals o.FeatureId
                            join f in teniacoApiDb.Features on o.FeatureId equals f.FeatureId
                            select new CompareFeatureValuesVM
                            {
                                FeatureId = f.FeatureId,
                                FeatureTitle = f.FeatureTitle,
                                PropertyTypeId = f.PropertyTypeId,
                                FeatureOptionId = o.FeatureOptionId,
                                FeatureOptionText = o.FeatureOptionText,
                                FeatureOptionValue = o.FeatureOptionValue,
                                PropertyId = v.PropertyId,
                                FeatureValueId = v.FeatureValueId,
                                FeatureValue = v.FeatureValue
                            }).AsEnumerable();

                compareFeatureValuesVMList = list.OrderByDescending(f => f.PropertyId).ToList();


            }
            catch (Exception)
            { }

            return compareFeatureValuesVMList;
        }



        public List<ComparePropertiesAddressVM> GetListOfComparePropertiesAddress(
            PublicApiContext publicApiDb,
            List<long> childsUsersIds,
              long propertyId = 0)
        {
            List<ComparePropertiesAddressVM> comparePropertiesAddressVMList = new List<ComparePropertiesAddressVM>();

            try
            {

                var states = publicApiDb.States.ToList();
                var cities = publicApiDb.Cities.ToList();
                var zones = publicApiDb.Zones.ToList();
                var districts = publicApiDb.Districts.ToList();

                var list = (from p in teniacoApiDb.PropertyAddress
                            where p.PropertyId == propertyId
                            select new ComparePropertiesAddressVM
                            {
                                PropertyId = p.PropertyId,
                                LocationLat = p.LocationLat,
                                LocationLon = p.LocationLon,
                                StateId = p.StateId,
                                CityId = p.CityId,
                                ZoneId = p.ZoneId,
                                DistrictId = p.DistrictId

                            }).AsEnumerable();


                comparePropertiesAddressVMList = list.OrderByDescending(f => f.PropertyId).ToList();

                foreach (var item in comparePropertiesAddressVMList)
                {
                    try
                    {
                        var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
                        item.StateName = state.StateName;
                    }
                    catch (Exception)
                    {

                        var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
                        item.CityName = city.CityName;

                        var zone = zones.Where(z => z.ZoneId.Equals(item.ZoneId)).FirstOrDefault();
                        item.ZoneName = zone.ZoneName;

                        var district = districts.Where(d => d.DistrictId.Equals(item.DistrictId)).FirstOrDefault();
                        item.DistrictName = district.DistrictName;
                    }

                    try
                    {
                        var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
                        item.CityName = city.CityName;
                    }
                    catch (Exception)
                    {

                        var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
                        item.StateName = state.StateName;

                        var zone = zones.Where(z => z.ZoneId.Equals(item.ZoneId)).FirstOrDefault();
                        item.ZoneName = zone.ZoneName;


                        var district = districts.Where(d => d.DistrictId.Equals(item.DistrictId)).FirstOrDefault();
                        item.DistrictName = district.DistrictName;
                    }

                    try
                    {
                        var zone = zones.Where(z => z.ZoneId.Equals(item.ZoneId)).FirstOrDefault();
                        item.ZoneName = zone.ZoneName;
                    }
                    catch (Exception)
                    {

                        var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
                        item.StateName = state.StateName;

                        var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
                        item.CityName = city.CityName;

                    }
                    try
                    {
                        var district = districts.Where(z => z.DistrictId.Equals(item.DistrictId)).FirstOrDefault();
                        item.DistrictName = district.DistrictName;
                    }
                    catch (Exception)
                    {

                        var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
                        item.StateName = state.StateName;

                        var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
                        item.CityName = city.CityName;

                    }
                }

            }
            catch (Exception)
            { }

            return comparePropertiesAddressVMList;
        }


        public List<ComparePropertiesPricesHistoriesVM> GetListOfComparePropertiesPricesHistories(
             List<long> childsUsersIds,
              long propertyId = 0)
        {
            List<ComparePropertiesPricesHistoriesVM> comparePropertiesPricesHistoriesVMList = new List<ComparePropertiesPricesHistoriesVM>();

            try
            {

                var list = (from p in teniacoApiDb.PropertiesPricesHistories
                            where p.PropertyId == propertyId
                            select new ComparePropertiesPricesHistoriesVM
                            {
                                PropertyId = p.PropertyId,
                                CalculatedOfferPrice = p.CalculatedOfferPrice,
                                OfferPrice = p.OfferPrice,
                                OfferPriceType = p.OfferPriceType,
                                PriceTypeRegister = p.PriceTypeRegister,

                            }).AsEnumerable();


                comparePropertiesPricesHistoriesVMList = list.OrderByDescending(f => f.PropertyId).ToList();

            }
            catch (Exception)
            { }

            return comparePropertiesPricesHistoriesVMList;
        }


        #endregion

        #region Methods for Work With Contractors

        public List<ContractorsVM> GetAllContractorsList(
          PublicApiContext publicApiDb,
          ref int listCount,
          List<long> childsUsersIds,
          string contractorName = "",
          long? stateId = null,
          long? cityId = null,
          long? zoneId = null)
        {
            List<ContractorsVM> contractorsVMList = new List<ContractorsVM>();

            try
            {

                var states = publicApiDb.States.ToList();
                var cities = publicApiDb.Cities.ToList();
                var zones = publicApiDb.Zones.ToList();

                var list = (from p in teniacoApiDb.Contractors
                            where p.IsActivated.Value.Equals(true) &&
                            p.IsDeleted.Value.Equals(false)
                            select new ContractorsVM
                            {
                                ContractorId = p.ContractorId,
                                ContractorName = p.ContractorName,
                                Telephone = p.Telephone,
                                Address = p.Address,
                                Site = p.Site,
                                SocialNetworks = p.SocialNetworks,
                                GuildCategoryId = p.GuildCategoryId,
                                UserIdCreator = p.UserIdCreator.Value,
                                CreateEnDate = p.CreateEnDate,
                                CreateTime = p.CreateTime,
                                EditEnDate = p.EditEnDate,
                                EditTime = p.EditTime,
                                UserIdEditor = p.UserIdEditor.Value,
                                RemoveEnDate = p.RemoveEnDate,
                                RemoveTime = p.EditTime,
                                UserIdRemover = p.UserIdRemover.Value,
                                IsActivated = p.IsActivated,
                                IsDeleted = p.IsDeleted,
                                StateId = p.StateId,
                                CityId = p.CityId,
                                ZoneId = p.ZoneId
                            })
                            .AsEnumerable();



                if (!string.IsNullOrEmpty(contractorName))
                {
                    list = list.Where(a => a.ContractorName.Contains(contractorName));
                }


                if (stateId.HasValue)
                    if (stateId.Value > 0)
                        list = list.Where(a => a.StateId.Equals(stateId.Value));



                if (cityId.HasValue)
                    if (cityId.Value > 0)
                        list = list.Where(a => a.CityId.Equals(cityId.Value));


                if (zoneId.HasValue)
                    if (zoneId.Value > 0)
                        list = list.Where(a => a.ZoneId.Equals(zoneId.Value));



                contractorsVMList = list.OrderByDescending(s => s.ContractorId).ToList();


                foreach (var item in contractorsVMList)
                {
                    //Find State
                    try
                    {
                        var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
                        item.StateName = state.StateName;
                    }
                    catch (Exception)
                    {

                        var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
                        item.CityName = city.CityName;

                        var zone = zones.Where(z => z.ZoneId.Equals(item.ZoneId)).FirstOrDefault();
                        item.ZoneName = zone.ZoneName;
                    }


                    //Find City
                    try
                    {
                        var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
                        item.CityName = city.CityName;
                    }
                    catch (Exception)
                    {

                        var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
                        item.StateName = state.StateName;

                        var zone = zones.Where(z => z.ZoneId.Equals(item.ZoneId)).FirstOrDefault();
                        item.ZoneName = zone.ZoneName;
                    }

                    //Find Zone
                    try
                    {
                        var zone = zones.Where(z => z.ZoneId.Equals(item.ZoneId)).FirstOrDefault();
                        item.ZoneName = zone.ZoneName;
                    }
                    catch (Exception)
                    {

                        var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
                        item.StateName = state.StateName;

                        var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
                        item.CityName = city.CityName;
                    }

                }

            }
            catch (Exception ex)
            { }

            return contractorsVMList;
        }

        public List<ContractorsVM> GetListOfContractors(
            PublicApiContext publicApiDb,
            int jtStartIndex,
            int jtPageSize,
            ref int listCount,
            List<long> childsUsersIds,
            string contractorName = "",
            long? stateId = null,
            long? cityId = null,
            long? zoneId = null,
            string jtSorting = null)
        {
            List<ContractorsVM> contractorsVMList = new List<ContractorsVM>();

            var list = (from p in teniacoApiDb.Contractors
                        where p.IsActivated.Value.Equals(true) &&
                        p.IsDeleted.Value.Equals(false)
                        select new ContractorsVM
                        {
                            ContractorId = p.ContractorId,
                            ContractorName = p.ContractorName,
                            Telephone = p.Telephone,
                            Address = p.Address,
                            Site = p.Site,
                            SocialNetworks = p.SocialNetworks,
                            GuildCategoryId = p.GuildCategoryId,
                            UserIdCreator = p.UserIdCreator.Value,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor.Value,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover.Value,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted,
                            StateId = p.StateId,
                            CityId = p.CityId,
                            ZoneId = p.ZoneId
                        })
                        .AsEnumerable();



            if (!string.IsNullOrEmpty(contractorName))
            {
                list = list.Where(a => a.ContractorName.Contains(contractorName));
            }


            if (stateId.HasValue)
                if (stateId.Value > 0)
                    list = list.Where(a => a.StateId.Equals(stateId.Value));



            if (cityId.HasValue)
                if (cityId.Value > 0)
                    list = list.Where(a => a.CityId.Equals(cityId.Value));


            if (zoneId.HasValue)
                if (zoneId.Value > 0)
                    list = list.Where(a => a.ZoneId.Equals(zoneId.Value));

            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        contractorsVMList = list.OrderByDescending(s => s.ContractorId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                        contractorsVMList = list.OrderByDescending(s => s.ContractorId).ToList();
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {
                        switch (jtSorting)
                        {
                            case "ContractorName ASC":
                                list = list.OrderBy(l => l.ContractorName);
                                break;
                            case "ContractorName DESC":
                                list = list.OrderByDescending(l => l.ContractorName);
                                break;
                        }


                        if (string.IsNullOrEmpty(jtSorting))
                            contractorsVMList = list.OrderByDescending(s => s.ContractorId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            contractorsVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {

                        contractorsVMList = list.ToList();
                    }
                }

            }
            catch (Exception exc)
            { }
            return contractorsVMList;
        }

        public int AddToContractors(ContractorsVM contractorsVM,
            IPublicApiBusiness publicApiBusiness,
            IConsoleBusiness consoleBusiness,
            string domainName)
        {

            try
            {
                Contractors contractors = _mapper.Map<ContractorsVM, Contractors>(contractorsVM);

                contractors.IsActivated = true;
                contractors.IsDeleted = false;
                contractors.UserIdCreator = consoleBusiness.GetDomainsSettingsWithDomainName(domainName).UserIdCreator;

                teniacoApiDb.Contractors.Add(contractors);
                teniacoApiDb.SaveChanges();

                return contractors.ContractorId;

            }
            catch (Exception exc)
            {

            }

            return 0;
        }

        public int UpdateContractors(ref ContractorsVM contractorsVM,
            List<long> childsUsersIds)
        {
            int contractorId = contractorsVM.ContractorId;


            bool? isActivated = contractorsVM.IsActivated.HasValue ? contractorsVM.IsActivated.Value : (bool?)true;
            bool? isDeleted = contractorsVM.IsDeleted.HasValue ? contractorsVM.IsDeleted.Value : (bool?)true;



            if (teniacoApiDb.Contractors.Where(n => childsUsersIds.Contains(n.UserIdCreator.Value)).Where(x => x.ContractorId.Equals(contractorId)).Any())
            {
                try
                {
                    Contractors contractors = (from a in teniacoApiDb.Contractors
                                               where a.ContractorId == contractorId
                                               select a).FirstOrDefault();

                    contractors.ContractorName = contractorsVM.ContractorName;
                    contractors.Telephone = contractorsVM.Telephone;
                    contractors.Address = contractorsVM.Address;
                    contractors.Site = contractorsVM.Site;
                    contractors.SocialNetworks = contractorsVM.SocialNetworks;
                    contractors.StateId = contractorsVM.StateId;
                    contractors.CityId = contractorsVM.CityId;
                    contractors.ZoneId = contractorsVM.ZoneId;
                    contractors.GuildCategoryId = contractorsVM.GuildCategoryId;



                    contractors.EditEnDate = DateTime.Now;
                    contractors.EditTime = PersianDate.TimeNow;
                    contractors.UserIdEditor = contractors.UserIdEditor;
                    contractors.IsActivated = isActivated.Value;
                    contractors.IsDeleted = isDeleted.Value;


                    teniacoApiDb.Entry<Contractors>(contractors).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();


                    contractorsVM.UserIdCreator = contractors.UserIdCreator.Value;

                    return contractors.ContractorId;
                }
                catch (Exception ex)
                { }

            }
            return 0;
        }

        public bool ToggleActivationContractors(int contractorId,
            long userId,
            IConsoleBusiness consoleBusiness,
            List<long> childsUsersIds)
        {
            try
            {
                var contractors = (from c in teniacoApiDb.Contractors
                                   where c.ContractorId == contractorId &&
                                   childsUsersIds.Contains(c.UserIdCreator.Value)
                                   select c).FirstOrDefault();



                if (contractors != null)
                {
                    contractors.IsActivated = !contractors.IsActivated;
                    contractors.EditEnDate = DateTime.Now;
                    contractors.EditTime = PersianDate.TimeNow;
                    contractors.UserIdEditor = userId;

                    teniacoApiDb.Entry<Contractors>(contractors).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }


            }
            catch (Exception)
            { }

            return false;
        }

        public bool TemporaryDeleteContractors(int contractorId,
            long userId,
            IConsoleBusiness consoleBusiness,
            List<long> childsUsersIds)
        {
            try
            {
                var contractors = (from a in teniacoApiDb.Contractors
                                   where a.ContractorId == contractorId &&
                                   childsUsersIds.Contains(a.UserIdCreator.Value)
                                   select a).FirstOrDefault();


                if (contractors != null)
                {
                    contractors.IsDeleted = !contractors.IsDeleted;
                    contractors.EditEnDate = DateTime.Now;
                    contractors.EditTime = PersianDate.TimeNow;
                    contractors.UserIdEditor = userId;


                    teniacoApiDb.Entry<Contractors>(contractors).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();


                    return true;
                }
            }
            catch (Exception ex)
            { }
            return false;
        }

        public bool CompleteDeleteContractors(int contractorId,
            List<long> childsUsersIds,
             IConsoleBusiness consoleBusiness)
        {
            try
            {
                var contractors = (from a in teniacoApiDb.Contractors
                                   where a.ContractorId == contractorId &&
                                   childsUsersIds.Contains(a.UserIdCreator.Value)
                                   select a).FirstOrDefault();

                if (contractors != null)
                {
                    using (var transaction = teniacoApiDb.Database.BeginTransaction())
                    {
                        try
                        {
                            teniacoApiDb.Contractors.Remove(contractors);
                            teniacoApiDb.SaveChanges();


                            transaction.Commit();

                            return true;
                        }
                        catch (Exception)
                        {
                            transaction.Rollback();
                        }
                    }
                }
            }
            catch (Exception ex)
            { }

            return false;
        }

        public ContractorsVM GetContractorWithContractorId(
            int? contractorId,
            List<long> childsUsersIds)
        {
            ContractorsVM contractorsVM = new ContractorsVM();

            try
            {
                contractorsVM = _mapper.Map<Contractors,
                    ContractorsVM>(teniacoApiDb.Contractors
                    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                     .Where(e => e.ContractorId.Equals(contractorId)).FirstOrDefault());

            }
            catch (Exception exc)
            { }

            return contractorsVM;
        }

        #endregion

        #region Methods For Work With DocumentOwnershipTypes

        public List<DocumentOwnershipTypesVM> GetAllDocumentOwnershipTypesList()
        {
            try
            {
                var documentOwnershipTypes = teniacoApiDb.DocumentOwnershipTypes.Where(d => d.IsActivated.Value.Equals(true) && d.IsDeleted.Value.Equals(false)).AsQueryable();

                return _mapper.Map<List<DocumentOwnershipTypes>, List<DocumentOwnershipTypesVM>>(documentOwnershipTypes.ToList());
            }
            catch (Exception exc)
            { }
            return new List<DocumentOwnershipTypesVM>();
        }

        #endregion

        #region Methods For Work With DocumentRootTypes

        public List<DocumentRootTypesVM> GetAllDocumentRootTypesList()
        {
            try
            {
                var documentRootTypes = teniacoApiDb.DocumentRootTypes.Where(c => c.IsActivated.Value.Equals(true) && c.IsDeleted.Value.Equals(false)).AsQueryable();

                return _mapper.Map<List<DocumentRootTypes>, List<DocumentRootTypesVM>>(documentRootTypes.ToList());
            }
            catch (Exception exc)
            { }
            return new List<DocumentRootTypesVM>();
        }

        #endregion

        #region Methods For Work With DocumentTypes

        public List<DocumentTypesVM> GetAllDocumentTypesList()
        {
            try
            {
                var documentTypes = teniacoApiDb.DocumentTypes.Where(d => d.IsActivated.Value.Equals(true) && d.IsDeleted.Value.Equals(false)).AsQueryable();

                return _mapper.Map<List<DocumentTypes>, List<DocumentTypesVM>>(documentTypes.ToList());
            }
            catch (Exception exc)
            { }
            return new List<DocumentTypesVM>();
        }

        #endregion

        #region Methods For Work With EvaluationsSubject


        public List<EvaluationSubjectsVM> GetAllEvaluationSubjectsList(
            ref int listCount,
            List<long> childsUsersIds)
        {
            List<EvaluationSubjectsVM> evaluationSubjectsVMList = new List<EvaluationSubjectsVM>();

            try
            {
                var list = (from d in teniacoApiDb.EvaluationSubjects
                            where d.IsActivated.Value.Equals(true) &&
                            d.IsDeleted.Value.Equals(false)
                            select new EvaluationSubjectsVM
                            {
                                EvaluationSubjectId = d.EvaluationSubjectId,
                                Title = d.Title,
                                UserIdCreator = d.UserIdCreator.Value,
                                CreateEnDate = d.CreateEnDate,
                                CreateTime = d.CreateTime,
                                EditEnDate = d.EditEnDate,
                                EditTime = d.EditTime,
                                UserIdEditor = d.UserIdEditor.Value,
                                RemoveEnDate = d.RemoveEnDate,
                                RemoveTime = d.EditTime,
                                UserIdRemover = d.UserIdRemover.Value,
                                IsActivated = d.IsActivated,
                                IsDeleted = d.IsDeleted,
                            }).AsQueryable();


                evaluationSubjectsVMList = list.OrderByDescending(s => s.EvaluationSubjectId).ToList();

            }
            catch (Exception)
            { }

            return evaluationSubjectsVMList;
        }

        #endregion

        #region Methods For Work With Evaluations

        public List<EvaluationsVM> GetAllEvaluationsList(
          int? EvaluationSubjectId,
          string? EvaluationTitle)
        {
            List<EvaluationsVM> evaluationVMList = new List<EvaluationsVM>();

            try
            {
                var list = (from d in teniacoApiDb.Evaluations
                            where d.IsActivated.Value.Equals(true) &&
                            d.IsDeleted.Value.Equals(false)
                            select new EvaluationsVM
                            {
                                EvaluationId = d.EvaluationId,
                                EvaluationSubjectId = d.EvaluationSubjectId,
                                EvaluationTitle = d.EvaluationTitle,
                                PlanDate = d.PlanDate,
                                Version = d.Version,
                                //QuestionCount = d.QuestionCount,
                                UserIdCreator = d.UserIdCreator.Value,
                                CreateEnDate = d.CreateEnDate,
                                CreateTime = d.CreateTime,
                                EditEnDate = d.EditEnDate,
                                EditTime = d.EditTime,
                                UserIdEditor = d.UserIdEditor.Value,
                                RemoveEnDate = d.RemoveEnDate,
                                RemoveTime = d.EditTime,
                                UserIdRemover = d.UserIdRemover.Value,
                                IsActivated = d.IsActivated,
                                IsDeleted = d.IsDeleted,
                            }).AsQueryable();


                if (EvaluationSubjectId.HasValue)
                    if (EvaluationSubjectId.Value > 0)
                        list = list.Where(a => a.EvaluationSubjectId.Equals(EvaluationSubjectId.Value));


                if (!string.IsNullOrEmpty(EvaluationTitle))
                    list = list.Where(a => a.EvaluationTitle.Equals(EvaluationTitle));

                evaluationVMList = list.OrderByDescending(s => s.EvaluationId).ToList();

            }
            catch (Exception)
            { }

            return evaluationVMList;
        }


        public List<EvaluationsVM> GetListOfEvaluations(
            int jtStartIndex,
            int jtPageSize,
            ref int listCount,
            List<long> childsUsersIds,
            string EvaluationTitle = "",
            string jtSorting = null)
        {
            List<EvaluationsVM> evaluationsVMList = new List<EvaluationsVM>();

            var list = (from p in teniacoApiDb.Evaluations
                        where p.IsActivated.Value.Equals(true) &&
                        p.IsDeleted.Value.Equals(false)
                        select new EvaluationsVM
                        {
                            EvaluationId = p.EvaluationId,
                            EvaluationSubjectId = p.EvaluationSubjectId,
                            EvaluationTitle = p.EvaluationTitle,
                            Version = p.Version,
                            PlanDate = p.PlanDate,
                            //QuestionCount = p.QuestionCount,
                            UserIdCreator = p.UserIdCreator.Value,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor.Value,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover.Value,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted
                        })
                        .AsEnumerable();
            if (!string.IsNullOrEmpty(EvaluationTitle))
                list = list.Where(z => z.EvaluationTitle.Contains(EvaluationTitle));
            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        evaluationsVMList = list.OrderByDescending(s => s.EvaluationId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                        evaluationsVMList = list.OrderByDescending(s => s.EvaluationId).ToList();
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {
                        switch (jtSorting)
                        {
                            case "EvaluationTitle ASC":
                                list = list.OrderBy(l => l.EvaluationTitle);
                                break;
                            case "EvaluationTitle DESC":
                                list = list.OrderByDescending(l => l.EvaluationTitle);
                                break;
                        }


                        if (string.IsNullOrEmpty(jtSorting))
                            evaluationsVMList = list.OrderByDescending(s => s.EvaluationId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            evaluationsVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {

                        evaluationsVMList = list.ToList();
                    }
                }

            }
            catch (Exception exc)
            { }
            return evaluationsVMList;
        }


        public int AddToEvaluations(EvaluationsVM evaluationsVM)
        {

            try
            {
                Evaluations evaluations = _mapper.Map<EvaluationsVM, Evaluations>(evaluationsVM);

                teniacoApiDb.Evaluations.Add(evaluations);
                teniacoApiDb.SaveChanges();



                return evaluations.EvaluationId;

            }
            catch (Exception exc)
            {

            }

            return 0;
        }

        public int UpdateEvaluations(ref EvaluationsVM evaluationsVM,
           List<long> childsUsersIds)
        {


            int? evaluationId = evaluationsVM.EvaluationId;
            bool? isActivated = evaluationsVM.IsActivated.HasValue ? evaluationsVM.IsActivated.Value : (bool?)true;
            bool? isDeleted = evaluationsVM.IsDeleted.HasValue ? evaluationsVM.IsDeleted.Value : (bool?)true;



            if (teniacoApiDb.Evaluations.Where(n => childsUsersIds.Contains(n.UserIdCreator.Value)).Where(x => x.EvaluationId.Equals(evaluationId)).Any())
            {
                try
                {
                    Evaluations evaluations = (from a in teniacoApiDb.Evaluations
                                               where a.EvaluationId == evaluationId
                                               select a).FirstOrDefault();

                    evaluations.EvaluationSubjectId = evaluationsVM.EvaluationSubjectId;
                    evaluations.EvaluationTitle = evaluationsVM.EvaluationTitle;
                    evaluations.PlanDate = evaluationsVM.PlanDate;
                    evaluations.Version = evaluationsVM.Version;


                    evaluations.EditEnDate = DateTime.Now;
                    evaluations.EditTime = PersianDate.TimeNow;
                    evaluations.UserIdEditor = evaluationsVM.UserIdEditor.Value;
                    evaluations.IsActivated = isActivated.Value;
                    evaluations.IsDeleted = isDeleted.Value;


                    teniacoApiDb.Entry<Evaluations>(evaluations).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();




                    evaluationsVM.UserIdCreator = evaluations.UserIdCreator.Value;

                    return evaluations.EvaluationId;
                }
                catch (Exception ex)
                { }

            }
            return 0;
        }

        public bool ToggleActivationEvaluations(int evaluationId,
          long userId,
          List<long> childsUsersIds)
        {
            try
            {
                var evaluations = (from c in teniacoApiDb.Evaluations
                                   where c.EvaluationId == evaluationId &&
                                   childsUsersIds.Contains(c.UserIdCreator.Value)
                                   select c).FirstOrDefault();



                if (evaluations != null)
                {
                    evaluations.IsActivated = !evaluations.IsActivated;
                    evaluations.EditEnDate = DateTime.Now;
                    evaluations.EditTime = PersianDate.TimeNow;
                    evaluations.UserIdEditor = userId;

                    teniacoApiDb.Entry<Evaluations>(evaluations).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }


            }
            catch (Exception)
            { }

            return false;
        }



        public bool TemporaryDeleteEvaluations(int evaluationId,
         long userId,
         List<long> childsUsersIds)
        {
            try
            {
                var evaluations = (from c in teniacoApiDb.Evaluations
                                   where c.EvaluationId == evaluationId &&
                                   childsUsersIds.Contains(c.UserIdCreator.Value)
                                   select c).FirstOrDefault();



                if (evaluations != null)
                {
                    evaluations.IsDeleted = !evaluations.IsDeleted;
                    evaluations.EditEnDate = DateTime.Now;
                    evaluations.EditTime = PersianDate.TimeNow;
                    evaluations.UserIdEditor = userId;

                    teniacoApiDb.Entry<Evaluations>(evaluations).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception ex)
            { }
            return false;
        }


        public bool CompleteDeleteEvaluations(int evaluationId,
            List<long> childsUsersIds)
        {
            try
            {
                var evaluation = (from a in teniacoApiDb.Evaluations
                                  where a.EvaluationId == evaluationId &&
                                  childsUsersIds.Contains(a.UserIdCreator.Value)
                                  select a).FirstOrDefault();

                if (evaluation != null)
                {
                    using (var transaction = teniacoApiDb.Database.BeginTransaction())
                    {
                        try
                        {
                            teniacoApiDb.Evaluations.Remove(evaluation);
                            teniacoApiDb.SaveChanges();


                            if (teniacoApiDb.EvaluationCategories.Where(a => a.EvaluationId.Equals(evaluationId)).Any())
                            {
                                var evaluationCategories = teniacoApiDb.EvaluationCategories.Where(a => a.EvaluationId.Equals(evaluationId)).FirstOrDefault();
                                teniacoApiDb.EvaluationCategories.Remove(evaluationCategories);
                                teniacoApiDb.SaveChanges();
                            }


                            transaction.Commit();

                            return true;
                        }
                        catch (Exception)
                        {
                            transaction.Rollback();
                        }
                    }
                }
            }
            catch (Exception ex)
            { }

            return false;
        }


        public EvaluationsVM GetEvaluationsWithEvaluationId(
        int? evaluationId,
        List<long> childsUsersIds)
        {
            EvaluationsVM evaluationsVM = new EvaluationsVM();

            try
            {
                evaluationsVM = _mapper.Map<Evaluations,
                    EvaluationsVM>(teniacoApiDb.Evaluations
                    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                     .Where(e => e.EvaluationId.Equals(evaluationId)).FirstOrDefault());

            }
            catch (Exception exc)
            { }

            return evaluationsVM;
        }

        #endregion

        #region Methods For Work With EvaluationCategories

        public List<EvaluationCategoriesVM> GetAllEvaluationCategoriesList(
        ref int listCount,
        List<long> childsUsersIds,
        int? evaluationId,
         string? evaluationCategoryTitleSearch = "")
        {
            List<EvaluationCategoriesVM> evaluationCategoriesVM = new List<EvaluationCategoriesVM>();

            try
            {

                var list = (from c in teniacoApiDb.EvaluationCategories
                            where c.IsActivated.Value.Equals(true) &&
                            c.IsDeleted.Value.Equals(false)
                            select new EvaluationCategoriesVM
                            {
                                EvaluationCategoryId = c.EvaluationCategoryId,
                                EvaluationCategoryOrder = c.EvaluationCategoryOrder.Value,
                                EvaluationCategoryScore = c.EvaluationCategoryScore.Value,
                                EvaluationCategoryTitle = c.EvaluationCategoryTitle,
                                EvaluationId = c.EvaluationId,
                                EvaluationParentCategoryId = c.EvaluationParentCategoryId,
                                UserIdCreator = c.UserIdCreator.Value,
                                CreateEnDate = c.CreateEnDate,
                                CreateTime = c.CreateTime,
                                EditEnDate = c.EditEnDate,
                                EditTime = c.EditTime,
                                UserIdEditor = c.UserIdEditor.Value,
                                RemoveEnDate = c.RemoveEnDate,
                                RemoveTime = c.EditTime,
                                UserIdRemover = c.UserIdRemover.Value,
                                IsActivated = c.IsActivated,
                                IsDeleted = c.IsDeleted,
                            }).AsEnumerable();


                if (!string.IsNullOrEmpty(evaluationCategoryTitleSearch))
                {
                    list = list.Where(a => a.EvaluationCategoryTitle.Contains(evaluationCategoryTitleSearch));
                }

                if (evaluationId.HasValue)
                    if (evaluationId.Value > 0)
                        list = list.Where(e => e.EvaluationId.Equals(evaluationId.Value));



                evaluationCategoriesVM = list.OrderByDescending(s => s.EvaluationCategoryId).ToList();

            }
            catch (Exception ex)
            { }

            return evaluationCategoriesVM;
        }

        public List<EvaluationCategoriesVM> GetListOfEvaluationCategories(
            int jtStartIndex,
            int jtPageSize,
            ref int listCount,
            List<long> childsUsersIds,
            int? evaluationId,
            string? evaluationCategoryTitle,
            string jtSorting = null)
        {
            List<EvaluationCategoriesVM> evaluationCategoriesVMList = new List<EvaluationCategoriesVM>();


            var list = (from p in teniacoApiDb.EvaluationCategories
                        where p.IsActivated.Value.Equals(true) &&
                        p.IsDeleted.Value.Equals(false)
                        select new EvaluationCategoriesVM
                        {
                            EvaluationCategoryId = p.EvaluationCategoryId,
                            EvaluationCategoryTitle = p.EvaluationCategoryTitle,
                            EvaluationCategoryOrder = p.EvaluationCategoryOrder.Value,
                            EvaluationCategoryScore = p.EvaluationCategoryScore.Value,
                            EvaluationId = p.EvaluationId,
                            EvaluationParentCategoryId = p.EvaluationParentCategoryId,
                            UserIdCreator = p.UserIdCreator,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted
                        })
                        .AsEnumerable();


            if (!string.IsNullOrEmpty(evaluationCategoryTitle))
                list = list.Where(z => z.EvaluationCategoryTitle.Contains(evaluationCategoryTitle));


            if (evaluationId.HasValue)
                if (evaluationId.Value > 0)
                    list = list.Where(a => a.EvaluationId.Equals(evaluationId.Value));


            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        evaluationCategoriesVMList = list.OrderByDescending(s => s.EvaluationCategoryId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                        evaluationCategoriesVMList = list.OrderByDescending(s => s.EvaluationCategoryId).ToList();
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {
                        switch (jtSorting)
                        {
                            case "EvaluationCategoryTitle ASC":
                                list = list.OrderBy(l => l.EvaluationCategoryTitle);
                                break;
                            case "EvaluationCategoryTitle DESC":
                                list = list.OrderByDescending(l => l.EvaluationCategoryTitle);
                                break;
                        }


                        if (string.IsNullOrEmpty(jtSorting))
                            evaluationCategoriesVMList = list.OrderByDescending(s => s.EvaluationCategoryId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            evaluationCategoriesVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {

                        evaluationCategoriesVMList = list.ToList();
                    }
                }
            }
            catch (Exception exc)
            { }
            return evaluationCategoriesVMList;
        }



        public int AddToEvaluationCategories(EvaluationCategoriesVM evaluationCategoriesVM)
        {

            try
            {
                EvaluationCategories evaluationCategories = _mapper.Map<EvaluationCategoriesVM, EvaluationCategories>(evaluationCategoriesVM);

                teniacoApiDb.EvaluationCategories.Add(evaluationCategories);
                teniacoApiDb.SaveChanges();

                return evaluationCategories.EvaluationCategoryId;

            }
            catch (Exception exc)
            {

            }

            return 0;
        }


        public int UpdateEvaluationCategories(ref EvaluationCategoriesVM evaluationCategoriesVM,
           List<long> childsUsersIds)
        {
            int evaluationCategoryId = evaluationCategoriesVM.EvaluationCategoryId;

            bool? isActivated = evaluationCategoriesVM.IsActivated.HasValue ? evaluationCategoriesVM.IsActivated.Value : (bool?)true;
            bool? isDeleted = evaluationCategoriesVM.IsDeleted.HasValue ? evaluationCategoriesVM.IsDeleted.Value : (bool?)true;



            if (teniacoApiDb.EvaluationCategories.Where(n => childsUsersIds.Contains(n.UserIdCreator.Value)).Where(x => x.EvaluationCategoryId.Equals(evaluationCategoryId)).Any())
            {
                try
                {
                    EvaluationCategories evaluationCategories = (from a in teniacoApiDb.EvaluationCategories
                                                                 where a.EvaluationCategoryId == evaluationCategoryId
                                                                 select a).FirstOrDefault();


                    evaluationCategories.EvaluationCategoryOrder = evaluationCategoriesVM.EvaluationCategoryOrder;
                    evaluationCategories.EvaluationCategoryScore = evaluationCategoriesVM.EvaluationCategoryScore;
                    evaluationCategories.EvaluationCategoryTitle = evaluationCategoriesVM.EvaluationCategoryTitle;
                    evaluationCategories.EvaluationId = evaluationCategoriesVM.EvaluationId;
                    evaluationCategories.EvaluationParentCategoryId = evaluationCategoriesVM.EvaluationParentCategoryId;



                    evaluationCategories.EditEnDate = DateTime.Now;
                    evaluationCategories.EditTime = PersianDate.TimeNow;
                    evaluationCategories.UserIdEditor = evaluationCategories.UserIdEditor;
                    evaluationCategories.IsActivated = isActivated.Value;
                    evaluationCategories.IsDeleted = isDeleted.Value;


                    teniacoApiDb.Entry<EvaluationCategories>(evaluationCategories).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();




                    evaluationCategoriesVM.UserIdCreator = evaluationCategories.UserIdCreator;

                    return evaluationCategories.EvaluationCategoryId;
                }
                catch (Exception ex)
                { }

            }
            return 0;
        }


        public bool ToggleActivationEvaluationCategories(
            int evaluationCategoryId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {

                var evaluationCategory = (from c in teniacoApiDb.EvaluationCategories
                                          where c.EvaluationCategoryId == evaluationCategoryId &&
                                          childsUsersIds.Contains(c.UserIdCreator.Value)
                                          select c).FirstOrDefault();

                if (evaluationCategory != null)
                {
                    evaluationCategory.IsActivated = !evaluationCategory.IsActivated;
                    evaluationCategory.EditEnDate = DateTime.Now;
                    evaluationCategory.EditTime = PersianDate.TimeNow;
                    evaluationCategory.UserIdEditor = userId;
                    teniacoApiDb.Entry<EvaluationCategories>(evaluationCategory).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();
                    return true;
                }
            }
            catch (Exception exc)
            { }
            return false;
        }


        public bool TemporaryDeleteEvaluationCategories(int evaluationCategoryId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {

                var evaluationCategory = (from c in teniacoApiDb.EvaluationCategories
                                          where c.EvaluationCategoryId == evaluationCategoryId &&
                                          childsUsersIds.Contains(c.UserIdCreator.Value)
                                          select c).FirstOrDefault();

                if (evaluationCategory != null)
                {
                    evaluationCategory.IsDeleted = !evaluationCategory.IsDeleted;
                    evaluationCategory.RemoveEnDate = DateTime.Now;
                    evaluationCategory.RemoveTime = PersianDate.TimeNow;
                    evaluationCategory.UserIdRemover = userId;
                    teniacoApiDb.Entry<EvaluationCategories>(evaluationCategory).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();
                    return true;
                }
            }
            catch (Exception exc)
            { }
            return false;
        }

        public bool CompleteDeleteEvaluationCategories(int evaluationCategoryId,
            //long userId,
            List<long> childsUsersIds)
        {
            using (var transaction = teniacoApiDb.Database.BeginTransaction())
            {
                try
                {
                    //List<long> childsUsersIds = new List<long>();
                    //childsUsersIds = GetChildUserIds(ref childsUsersIds, userId).Distinct().ToList();
                    var evaluationCategory = (from c in teniacoApiDb.EvaluationCategories
                                              where c.EvaluationCategoryId == evaluationCategoryId &&
                                              childsUsersIds.Contains(c.UserIdCreator.Value)
                                              select c).FirstOrDefault();

                    if (evaluationCategory != null)
                    {
                        #region remove EvaluationChildCategories

                        var evaluationChildCategories = teniacoApiDb.EvaluationCategories.
                            Where(e => e.EvaluationParentCategoryId.HasValue).
                            Where(o => o.EvaluationParentCategoryId.Value.Equals(evaluationCategory.EvaluationCategoryId)).ToList();

                        if (evaluationChildCategories != null)
                            if (evaluationChildCategories.Count > 0)
                            {
                                #region remove evaluationQuestions

                                foreach (var evaluationChildCategory in evaluationChildCategories)
                                {
                                    var childEvaluations = teniacoApiDb.EvaluationQuestions.Where(e => e.EvaluationCategoryId.HasValue).
                                        Where(e => e.EvaluationCategoryId.Value.Equals(evaluationChildCategory.EvaluationCategoryId)).ToList();

                                    if (childEvaluations != null)
                                    {
                                        if (childEvaluations.Count > 0)
                                        {
                                            #region remove evaluationItems

                                            foreach (var evaluation in childEvaluations)
                                            {
                                                var evaluationItems = teniacoApiDb.EvaluationItems.Where(e => e.EvaluationQuestionId.Equals(evaluation.EvaluationQuestionId)).ToList();

                                                if (evaluationItems != null)
                                                {
                                                    if (evaluationItems.Count > 0)
                                                    {
                                                        teniacoApiDb.EvaluationItems.RemoveRange(evaluationItems);
                                                        teniacoApiDb.SaveChanges();
                                                    }
                                                }
                                            }

                                            #endregion

                                            teniacoApiDb.EvaluationQuestions.RemoveRange(childEvaluations);
                                            teniacoApiDb.SaveChanges();
                                        }
                                    }
                                }

                                #endregion

                                teniacoApiDb.EvaluationCategories.RemoveRange(evaluationChildCategories);
                                teniacoApiDb.SaveChanges();
                            }

                        #endregion

                        var evaluations = teniacoApiDb.EvaluationQuestions.Where(e => e.EvaluationCategoryId.HasValue).
                            Where(e => e.EvaluationCategoryId.Equals(evaluationCategory.EvaluationCategoryId)).ToList();

                        if (evaluations != null)
                        {
                            if (evaluations.Count > 0)
                            {
                                #region remove evaluationItems

                                foreach (var evaluation in evaluations)
                                {
                                    var evaluationItems = teniacoApiDb.EvaluationItems.Where(e => e.EvaluationQuestionId.Equals(evaluation.EvaluationQuestionId)).ToList();

                                    if (evaluationItems != null)
                                    {
                                        if (evaluationItems.Count > 0)
                                        {
                                            teniacoApiDb.EvaluationItems.RemoveRange(evaluationItems);
                                            teniacoApiDb.SaveChanges();
                                        }
                                    }
                                }

                                #endregion

                                teniacoApiDb.EvaluationQuestions.RemoveRange(evaluations);
                                teniacoApiDb.SaveChanges();
                            }
                        }

                        teniacoApiDb.EvaluationCategories.Remove(evaluationCategory);
                        teniacoApiDb.SaveChanges();

                        transaction.Commit();
                        return true;
                    }
                }
                catch (Exception exc)
                {
                    transaction.Rollback();
                }
            }
            return false;
        }


        public EvaluationCategoriesVM GetEvaluationCategoryWithEvaluationCategoryId(int evaluationCategoryId)
        {
            EvaluationCategoriesVM evaluationCategoriesVM = new EvaluationCategoriesVM();

            try
            {
                evaluationCategoriesVM = _mapper.Map<EvaluationCategories,
                    EvaluationCategoriesVM>(teniacoApiDb.EvaluationCategories
                    .Where(e => e.EvaluationCategoryId.Equals(evaluationCategoryId)).FirstOrDefault());
            }
            catch (Exception exc)
            { }

            return evaluationCategoriesVM;
        }

        public List<EvaluationCategoriesVM> GetAllDivisionOfEvaluationsListByParentId(
        List<long> childsUsersIds,
        int? evaluationId)
        {
            List<EvaluationCategoriesVM> evaluationCategoriesVM = new List<EvaluationCategoriesVM>();

            try
            {

                var list = (from c in teniacoApiDb.EvaluationCategories
                            select new EvaluationCategoriesVM
                            {
                                EvaluationCategoryId = c.EvaluationCategoryId,
                                EvaluationCategoryOrder = c.EvaluationCategoryOrder.Value,
                                EvaluationCategoryScore = c.EvaluationCategoryScore.Value,
                                EvaluationCategoryTitle = c.EvaluationCategoryTitle,
                                EvaluationId = c.EvaluationId,
                                EvaluationParentCategoryId = c.EvaluationParentCategoryId,
                                UserIdCreator = c.UserIdCreator.Value,
                                CreateEnDate = c.CreateEnDate,
                                CreateTime = c.CreateTime,
                                EditEnDate = c.EditEnDate,
                                EditTime = c.EditTime,
                                UserIdEditor = c.UserIdEditor.Value,
                                RemoveEnDate = c.RemoveEnDate,
                                RemoveTime = c.EditTime,
                                UserIdRemover = c.UserIdRemover.Value,
                                IsActivated = c.IsActivated,
                                IsDeleted = c.IsDeleted,
                            }).AsEnumerable();


                if (evaluationId.HasValue)
                    if (evaluationId.Value > 0)
                        list = list.Where(e => e.EvaluationId.Equals(evaluationId.Value));



                evaluationCategoriesVM = list.OrderByDescending(s => s.EvaluationCategoryId).ToList();

            }
            catch (Exception ex)
            { }

            return evaluationCategoriesVM;
        }


        #endregion

        #region Methods For Work With EvaluationQuestions
        public List<EvaluationQuestionsVM> GetAllEvaluationQuestionsList(
            ref int listCount,
            List<long> childsUsersIds,
            int? evaluationCategoryId = null,
            string? evaluationQuestion = "")
        {
            List<EvaluationQuestionsVM> evaluationQuestionsVMList = new List<EvaluationQuestionsVM>();

            try
            {
                var list = (from p in teniacoApiDb.EvaluationQuestions
                            where p.IsActivated.Value.Equals(true) &&
                            p.IsDeleted.Value.Equals(false)
                            select new EvaluationQuestionsVM
                            {
                                EvaluationCategoryId = p.EvaluationCategoryId,
                                EvaluationOrder = p.EvaluationOrder,
                                EvaluationQuestion = p.EvaluationQuestion,
                                EvaluationQuestionId = p.EvaluationQuestionId,
                                EvaluationScore = p.EvaluationScore,
                                UserIdCreator = p.UserIdCreator.Value,
                                CreateEnDate = p.CreateEnDate,
                                CreateTime = p.CreateTime,
                                UserCreatorName = p.UserCreatorName,
                                EditEnDate = p.EditEnDate,
                                EditTime = p.EditTime,
                                UserIdEditor = p.UserIdEditor.Value,
                                RemoveEnDate = p.RemoveEnDate,
                                RemoveTime = p.EditTime,
                                UserIdRemover = p.UserIdRemover.Value,
                                IsActivated = p.IsActivated,
                                IsDeleted = p.IsDeleted
                            })
                            .AsEnumerable();



                if (evaluationCategoryId.HasValue)
                    if (evaluationCategoryId.Value > 0)
                        list = list.Where(f => f.EvaluationCategoryId.Equals(evaluationCategoryId));




                if (!string.IsNullOrEmpty(evaluationQuestion))
                {
                    list = list.Where(a => a.EvaluationQuestion.Contains(evaluationQuestion));
                }

                evaluationQuestionsVMList = list.OrderByDescending(s => s.EvaluationQuestionId).ToList();

            }
            catch (Exception ex)
            { }

            return evaluationQuestionsVMList;
        }


        public List<EvaluationQuestionsVM> GetListOfEvaluationQuestions(
            int jtStartIndex,
            int jtPageSize,
            ref int listCount,
            List<long> childsUsersIds,
            int? evaluationCategoryId = null,
            string? evaluationQuestion = "",
            string jtSorting = null)
        {
            List<EvaluationQuestionsVM> evaluationQuestionsVMList = new List<EvaluationQuestionsVM>();


            var list = (from p in teniacoApiDb.EvaluationQuestions
                        where p.IsActivated.Value.Equals(true) &&
                        p.IsDeleted.Value.Equals(false)
                        select new EvaluationQuestionsVM
                        {
                            EvaluationCategoryId = p.EvaluationCategoryId,
                            EvaluationOrder = p.EvaluationOrder,
                            EvaluationQuestion = p.EvaluationQuestion,
                            EvaluationQuestionId = p.EvaluationQuestionId,
                            EvaluationScore = p.EvaluationScore,
                            UserIdCreator = p.UserIdCreator,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            UserCreatorName = p.UserCreatorName,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted
                        })
                            .AsEnumerable();



            if (evaluationCategoryId.HasValue)
                if (evaluationCategoryId.Value > 0)
                    list = list.Where(f => f.EvaluationCategoryId.Equals(evaluationCategoryId));




            if (!string.IsNullOrEmpty(evaluationQuestion))
            {
                list = list.Where(a => a.EvaluationQuestion.Contains(evaluationQuestion));
            }

            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        evaluationQuestionsVMList = list.OrderByDescending(s => s.EvaluationQuestionId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                        evaluationQuestionsVMList = list.OrderByDescending(s => s.EvaluationQuestionId).ToList();
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {
                        switch (jtSorting)
                        {
                            case "EvaluationQuestion ASC":
                                list = list.OrderBy(l => l.EvaluationQuestion);
                                break;
                            case "EvaluationQuestion DESC":
                                list = list.OrderByDescending(l => l.EvaluationQuestion);
                                break;
                        }


                        if (string.IsNullOrEmpty(jtSorting))
                            evaluationQuestionsVMList = list.OrderByDescending(s => s.EvaluationQuestionId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            evaluationQuestionsVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {

                        evaluationQuestionsVMList = list.ToList();
                    }
                }

            }
            catch (Exception exc)
            { }
            return evaluationQuestionsVMList;
        }


        public int AddToEvaluationQuestions(EvaluationQuestionsVM evaluationQuestionsVM)
        {

            try
            {
                EvaluationQuestions evaluationQuestions = _mapper.Map<EvaluationQuestionsVM, EvaluationQuestions>(evaluationQuestionsVM);

                teniacoApiDb.EvaluationQuestions.Add(evaluationQuestions);
                teniacoApiDb.SaveChanges();

                return evaluationQuestions.EvaluationQuestionId;

            }
            catch (Exception exc)
            {

            }

            return 0;
        }



        public int UpdateEvaluationQuestions(ref EvaluationQuestionsVM evaluationQuestionsVM,
            List<long> childsUsersIds)
        {
            int evaluationQuestionId = evaluationQuestionsVM.EvaluationQuestionId.Value;

            bool? isActivated = evaluationQuestionsVM.IsActivated.HasValue ? evaluationQuestionsVM.IsActivated.Value : (bool?)true;
            bool? isDeleted = evaluationQuestionsVM.IsDeleted.HasValue ? evaluationQuestionsVM.IsDeleted.Value : (bool?)true;



            if (teniacoApiDb.EvaluationQuestions.Where(n => childsUsersIds.Contains(n.UserIdCreator.Value)).Where(x => x.EvaluationQuestionId.Equals(evaluationQuestionId)).Any())
            {
                try
                {
                    EvaluationQuestions evaluationQuestions = (from a in teniacoApiDb.EvaluationQuestions
                                                               where a.EvaluationQuestionId == evaluationQuestionId
                                                               select a).FirstOrDefault();


                    evaluationQuestions.EvaluationQuestion = evaluationQuestionsVM.EvaluationQuestion;
                    evaluationQuestions.EvaluationCategoryId = evaluationQuestionsVM.EvaluationCategoryId;
                    evaluationQuestions.EvaluationScore = evaluationQuestionsVM.EvaluationScore.Value;
                    evaluationQuestions.EvaluationOrder = evaluationQuestionsVM.EvaluationOrder.Value;


                    evaluationQuestions.EditEnDate = DateTime.Now;
                    evaluationQuestions.EditTime = PersianDate.TimeNow;
                    evaluationQuestions.UserIdEditor = evaluationQuestions.UserIdEditor;
                    evaluationQuestions.IsActivated = isActivated.Value;
                    evaluationQuestions.IsDeleted = isDeleted.Value;


                    teniacoApiDb.Entry<EvaluationQuestions>(evaluationQuestions).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();


                    evaluationQuestions.UserIdCreator = evaluationQuestionsVM.UserIdCreator;

                    return evaluationQuestions.EvaluationQuestionId;
                }
                catch (Exception ex)
                { }

            }
            return 0;
        }



        public bool ToggleActivationEvaluationQuestions(
            int evaluationQuestionId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                //List<long> childsUsersIds = new List<long>();
                //childsUsersIds = GetChildUserIds(ref childsUsersIds, userId).Distinct().ToList();
                var evaluationQuestion = (from c in teniacoApiDb.EvaluationQuestions
                                          where c.EvaluationQuestionId == evaluationQuestionId &&
                                          childsUsersIds.Contains(c.UserIdCreator.Value)
                                          select c).FirstOrDefault();

                if (evaluationQuestion != null)
                {
                    evaluationQuestion.IsActivated = !evaluationQuestion.IsActivated;
                    evaluationQuestion.EditEnDate = DateTime.Now;
                    evaluationQuestion.EditTime = PersianDate.TimeNow;
                    evaluationQuestion.UserIdEditor = userId;
                    teniacoApiDb.Entry<EvaluationQuestions>(evaluationQuestion).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();
                    return true;
                }
            }
            catch (Exception exc)
            { }
            return false;
        }



        public bool TemporaryDeleteEvaluationQuestions(
            int evaluationQuestionId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                //List<long> childsUsersIds = new List<long>();
                //childsUsersIds = GetChildUserIds(ref childsUsersIds, userId).Distinct().ToList();
                var evaluationQuestion = (from c in teniacoApiDb.EvaluationQuestions
                                          where c.EvaluationQuestionId == evaluationQuestionId &&
                                          childsUsersIds.Contains(c.UserIdCreator.Value)
                                          select c).FirstOrDefault();

                if (evaluationQuestion != null)
                {
                    evaluationQuestion.IsDeleted = !evaluationQuestion.IsDeleted;
                    evaluationQuestion.RemoveEnDate = DateTime.Now;
                    evaluationQuestion.RemoveTime = PersianDate.TimeNow;
                    evaluationQuestion.UserIdRemover = userId;
                    teniacoApiDb.Entry<EvaluationQuestions>(evaluationQuestion).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();
                    return true;
                }
            }
            catch (Exception exc)
            { }
            return false;
        }


        public bool CompleteDeleteEvaluationQuestions(int evaluationQuestionId,
            //long userId,
            List<long> childsUsersIds)
        {
            using (var transaction = teniacoApiDb.Database.BeginTransaction())
            {
                try
                {
                    //List<long> childsUsersIds = new List<long>();
                    //childsUsersIds = GetChildUserIds(ref childsUsersIds, userId).Distinct().ToList();
                    var evaluationQuestion = (from c in teniacoApiDb.EvaluationQuestions
                                              where c.EvaluationQuestionId == evaluationQuestionId &&
                                              childsUsersIds.Contains(c.UserIdCreator.Value)
                                              select c).FirstOrDefault();

                    if (evaluationQuestion != null)
                    {

                        #region remove EvaluationItems

                        var evaluationItems = teniacoApiDb.EvaluationItems.Where(v => v.EvaluationQuestionId.Equals(evaluationQuestion.EvaluationQuestionId)).ToList();
                        if (evaluationItems != null)
                            if (evaluationItems.Count > 0)
                            {
                                teniacoApiDb.EvaluationItems.RemoveRange(evaluationItems);
                                teniacoApiDb.SaveChanges();
                            }

                        #endregion

                        teniacoApiDb.EvaluationQuestions.Remove(evaluationQuestion);
                        teniacoApiDb.SaveChanges();

                        transaction.Commit();
                        return true;
                    }
                }
                catch (Exception exc)
                {
                    transaction.Rollback();
                }
            }
            return false;
        }



        public List<EvaluationQuestionsVM> GetEvaluationQuestionsWithEvalCategoriesIds(List<int> evalCategoriesIds)
        {
            List<EvaluationQuestionsVM> evaluationQuestionsVMList = new List<EvaluationQuestionsVM>();

            try
            {

                if (teniacoApiDb.EvaluationQuestions.Where(eq => eq.EvaluationCategoryId.HasValue).Where(eq => evalCategoriesIds.Contains(eq.EvaluationCategoryId.Value)).Any())
                {
                    evaluationQuestionsVMList = _mapper.Map<List<EvaluationQuestions>,
                        List<EvaluationQuestionsVM>>(teniacoApiDb.EvaluationQuestions.Where(eq => eq.EvaluationCategoryId.HasValue).Where(eq => evalCategoriesIds.Contains(eq.EvaluationCategoryId.Value)).ToList());
                }
            }
            catch (Exception exc)
            { }

            return evaluationQuestionsVMList;
        }

        public EvaluationQuestionsVM GetEvaluationQuestionWithEvaluationQuestionId(int evaluationQuestionId)
        {
            EvaluationQuestionsVM evaluationQuestionsVM = new EvaluationQuestionsVM();

            try
            {
                evaluationQuestionsVM = _mapper.Map<EvaluationQuestions,
                    EvaluationQuestionsVM>(teniacoApiDb.EvaluationQuestions
                    .Where(e => e.EvaluationQuestionId.Equals(evaluationQuestionId)).FirstOrDefault());
            }
            catch (Exception exc)
            { }

            return evaluationQuestionsVM;
        }



        #endregion

        #region Methods For Work With EvaluationItems

        public List<EvaluationItemsVM> GetAllEvaluationItemsList(
             ref int listCount,
             List<long> childsUsersIds,
             int? evaluationQuestionId = null,
             string? evaluationAnswer = "")
        {
            List<EvaluationItemsVM> evaluationItemsVMList = new List<EvaluationItemsVM>();

            try
            {
                var list = (from p in teniacoApiDb.EvaluationItems
                            where p.IsActivated.Value.Equals(true) &&
                            p.IsDeleted.Value.Equals(false)
                            select new EvaluationItemsVM
                            {
                                EvaluationAnswer = p.EvaluationAnswer,
                                EvaluationItemId = p.EvaluationItemId,
                                EvaluationQuestionId = p.EvaluationQuestionId.Value,
                                EvaluationOrder = p.EvaluationOrder,
                                EvaluationScore = p.EvaluationScore,
                                UserIdCreator = p.UserIdCreator.Value,
                                CreateEnDate = p.CreateEnDate,
                                CreateTime = p.CreateTime,
                                UserCreatorName = p.UserCreatorName,
                                EditEnDate = p.EditEnDate,
                                EditTime = p.EditTime,
                                UserIdEditor = p.UserIdEditor.Value,
                                RemoveEnDate = p.RemoveEnDate,
                                RemoveTime = p.EditTime,
                                UserIdRemover = p.UserIdRemover.Value,
                                IsActivated = p.IsActivated,
                                IsDeleted = p.IsDeleted
                            })
                            .AsEnumerable();



                if (evaluationQuestionId.HasValue)
                    if (evaluationQuestionId.Value > 0)
                        list = list.Where(f => f.EvaluationQuestionId.Equals(evaluationQuestionId));




                if (!string.IsNullOrEmpty(evaluationAnswer))
                {
                    list = list.Where(a => a.EvaluationAnswer.Contains(evaluationAnswer));
                }

                evaluationItemsVMList = list.OrderByDescending(s => s.EvaluationItemId).ToList();

            }
            catch (Exception ex)
            { }

            return evaluationItemsVMList;
        }


        public List<EvaluationItemsVM> GetListOfEvaluationItems(
            int jtStartIndex,
            int jtPageSize,
            ref int listCount,
            List<long> childsUsersIds,
            int? evaluationQuestionId = null,
            string jtSorting = null)
        {
            List<EvaluationItemsVM> evaluationItemsVMList = new List<EvaluationItemsVM>();


            var list = (from p in teniacoApiDb.EvaluationItems
                        where p.IsActivated.Value.Equals(true) &&
                        p.IsDeleted.Value.Equals(false)
                        select new EvaluationItemsVM
                        {
                            EvaluationAnswer = p.EvaluationAnswer,
                            EvaluationItemId = p.EvaluationItemId,
                            EvaluationOrder = p.EvaluationOrder,
                            EvaluationQuestionId = p.EvaluationQuestionId.Value,
                            EvaluationScore = p.EvaluationScore,
                            UserIdCreator = p.UserIdCreator.Value,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            UserCreatorName = p.UserCreatorName,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor.Value,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover.Value,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted
                        })
                            .AsEnumerable();



            if (evaluationQuestionId.HasValue)
                if (evaluationQuestionId.Value > 0)
                    list = list.Where(f => f.EvaluationQuestionId.Equals(evaluationQuestionId));



            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        evaluationItemsVMList = list.OrderByDescending(s => s.EvaluationItemId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                        evaluationItemsVMList = list.OrderByDescending(s => s.EvaluationItemId).ToList();
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {
                        switch (jtSorting)
                        {
                            case "EvaluationAnswer ASC":
                                list = list.OrderBy(l => l.EvaluationAnswer);
                                break;
                            case "EvaluationAnswer DESC":
                                list = list.OrderByDescending(l => l.EvaluationAnswer);
                                break;
                        }


                        if (string.IsNullOrEmpty(jtSorting))
                            evaluationItemsVMList = list.OrderByDescending(s => s.EvaluationItemId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            evaluationItemsVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {

                        evaluationItemsVMList = list.ToList();
                    }
                }

            }
            catch (Exception exc)
            { }
            return evaluationItemsVMList;
        }


        public int AddToEvaluationItems(EvaluationItemsVM evaluationItemsVM)
        {

            try
            {
                EvaluationItems evaluationItems = _mapper.Map<EvaluationItemsVM, EvaluationItems>(evaluationItemsVM);

                teniacoApiDb.EvaluationItems.Add(evaluationItems);
                teniacoApiDb.SaveChanges();

                return evaluationItems.EvaluationItemId;

            }
            catch (Exception exc)
            {

            }

            return 0;
        }


        public int UpdateEvaluationItems(ref EvaluationItemsVM evaluationItemsVM,
            //long userId,
            List<long> childsUsersIds)
        {
            try
            {
                int evaluationItemId = evaluationItemsVM.EvaluationItemId;
                int evaluationQuestionId = evaluationItemsVM.EvaluationQuestionId;
                string evaluationAnswer = evaluationItemsVM.EvaluationAnswer;
                int evaluationOrder = evaluationItemsVM.EvaluationOrder;
                int evaluationScore = evaluationItemsVM.EvaluationScore;

                if (teniacoApiDb.EvaluationItems.Where(p => p.EvaluationAnswer.Equals(evaluationAnswer) &&
                    p.EvaluationQuestionId.Equals(evaluationQuestionId) &&
                    !p.EvaluationItemId.Equals(evaluationItemId)).Any())
                {
                    return -1;
                }

                EvaluationItems evaluationItem = (from c in teniacoApiDb.EvaluationItems
                                                  where c.EvaluationItemId == evaluationItemId
                                                  select c).FirstOrDefault();

                evaluationItem.EditEnDate = evaluationItemsVM.EditEnDate.Value;
                evaluationItem.EditTime = evaluationItemsVM.EditTime;
                evaluationItem.UserIdEditor = evaluationItemsVM.UserIdEditor;
                evaluationItem.EvaluationQuestionId = evaluationQuestionId;
                evaluationItem.EvaluationAnswer = evaluationAnswer;
                evaluationItem.EvaluationOrder = evaluationOrder;
                evaluationItem.EvaluationScore = evaluationScore;

                evaluationItem.IsActivated = evaluationItemsVM.IsActivated;
                evaluationItem.IsDeleted = evaluationItemsVM.IsDeleted;
                teniacoApiDb.Entry<EvaluationItems>(evaluationItem).State = EntityState.Modified;
                teniacoApiDb.SaveChanges();

                evaluationItemsVM.UserIdCreator = evaluationItem.UserIdCreator.Value;

                #region rewrite inside module

                //long userIdCreator = EvaluationItemsVM.UserIdCreator.Value;
                //if (EvaluationItemsVM.UserIdCreator.HasValue)
                //{
                //    var user = teniacoApiDb.Users.FirstOrDefault(u => u.UserId.Equals(userIdCreator));
                //    var userDetails = teniacoApiDb.UsersProfile.FirstOrDefault(up => up.UserId.Equals(userIdCreator));
                //    EvaluationItemsVM.UserCreatorName = user.UserName;

                //    if (!string.IsNullOrEmpty(userDetails.Name))
                //        EvaluationItemsVM.UserCreatorName += " - " + userDetails.Name;

                //    if (!string.IsNullOrEmpty(userDetails.Family))
                //        EvaluationItemsVM.UserCreatorName += " - " + userDetails.Family;
                //}

                #endregion

                return evaluationItem.EvaluationItemId;
            }
            catch (Exception exc)
            { }
            return 0;
        }

        public bool ToggleActivationEvaluationItems(int evaluationItemId, long userId, List<long> childsUsersIds)
        {
            try
            {
                //List<long> childsUsersIds = new List<long>();
                //childsUsersIds = GetChildUserIds(ref childsUsersIds, userId).Distinct().ToList();
                var evaluationItem = (from c in teniacoApiDb.EvaluationItems
                                      where c.EvaluationItemId == evaluationItemId &&
                                      childsUsersIds.Contains(c.UserIdCreator.Value)
                                      select c).FirstOrDefault();

                if (evaluationItem != null)
                {
                    evaluationItem.IsActivated = !evaluationItem.IsActivated;
                    evaluationItem.EditEnDate = DateTime.Now;
                    evaluationItem.EditTime = PersianDate.TimeNow;
                    evaluationItem.UserIdEditor = userId;
                    teniacoApiDb.Entry<EvaluationItems>(evaluationItem).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();
                    return true;
                }
            }
            catch (Exception exc)
            { }
            return false;
        }

        public bool TemporaryDeleteEvaluationItems(int evaluationItemId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                //List<long> childsUsersIds = new List<long>();
                //childsUsersIds = GetChildUserIds(ref childsUsersIds, userId).Distinct().ToList();
                var evaluationItem = (from c in teniacoApiDb.EvaluationItems
                                      where c.EvaluationItemId == evaluationItemId &&
                                      childsUsersIds.Contains(c.UserIdCreator.Value)
                                      select c).FirstOrDefault();

                if (evaluationItem != null)
                {
                    evaluationItem.IsDeleted = !evaluationItem.IsDeleted;
                    evaluationItem.RemoveEnDate = DateTime.Now;
                    evaluationItem.RemoveTime = PersianDate.TimeNow;
                    evaluationItem.UserIdRemover = userId;
                    teniacoApiDb.Entry<EvaluationItems>(evaluationItem).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();
                    return true;
                }
            }
            catch (Exception exc)
            { }
            return false;
        }

        public bool CompleteDeleteEvaluationItems(int evaluationItemId,
            //long userId,
            List<long> childsUsersIds)
        {
            try
            {
                //List<long> childsUsersIds = new List<long>();
                //childsUsersIds = GetChildUserIds(ref childsUsersIds, userId).Distinct().ToList();
                var evaluationItem = (from c in teniacoApiDb.EvaluationItems
                                      where c.EvaluationItemId == evaluationItemId &&
                                      childsUsersIds.Contains(c.UserIdCreator.Value)
                                      select c).FirstOrDefault();

                if (evaluationItem != null)
                {
                    teniacoApiDb.EvaluationItems.Remove(evaluationItem);
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            {
            }
            return false;
        }



        public List<EvaluationItemsVM> GetEvaluationItemsWithEvalQuestionIds(List<int?> evalQuestionIds)
        {
            List<EvaluationItemsVM> evaluationItemsVMList = new List<EvaluationItemsVM>();

            try
            {
                if (teniacoApiDb.EvaluationItems.Where(eq => eq.EvaluationQuestionId.HasValue).Where(eq => evalQuestionIds.Contains(eq.EvaluationQuestionId.Value)).Any())
                {
                    evaluationItemsVMList = _mapper.Map<List<EvaluationItems>,
                        List<EvaluationItemsVM>>(teniacoApiDb.EvaluationItems.Where(eq => eq.EvaluationQuestionId.HasValue).Where(eq => evalQuestionIds.Contains(eq.EvaluationQuestionId.Value)).ToList());
                }
            }
            catch (Exception exc)
            { }

            return evaluationItemsVMList;
        }



        public EvaluationItemsVM GetEvaluationItemWithEvaluationItemId(int evaluationItemId)
        {
            EvaluationItemsVM evaluationItemsVM = new EvaluationItemsVM();

            try
            {
                evaluationItemsVM = _mapper.Map<EvaluationItems,
                    EvaluationItemsVM>(teniacoApiDb.EvaluationItems
                    .Where(e => e.EvaluationItemId.Equals(evaluationItemId)).FirstOrDefault());
            }
            catch (Exception exc)
            { }

            return evaluationItemsVM;
        }

        #endregion

        #region Methods For Work with EvaluationItemValues

        public List<EvaluationItemValuesVM> GetEvaluationItemValuesByParentId(GetEvaluationItemValuesByParentIdPVM getEvaluationItemValuesByParentIdPVM)
        {
            List<EvaluationItemValuesVM> result = new List<EvaluationItemValuesVM>();
            try
            {
                result = teniacoApiDb.EvaluationItemValues.Where(a => a.ParentId == getEvaluationItemValuesByParentIdPVM.ParentId && a.ParentType == getEvaluationItemValuesByParentIdPVM.ParentType)
                    .Select(a => new EvaluationItemValuesVM
                    {
                        EvaluationItemValueId = a.EvaluationItemValueId,
                        ParentId = a.ParentId,
                        ParentType = a.ParentType,
                        EvaluationQuestionId = a.EvaluationQuestionId,
                        EvaluationItemId = a.EvaluationItemId.Value,
                        UserIdCreator = a.UserIdCreator,
                        CreateEnDate = a.CreateEnDate,
                        CreateTime = a.CreateTime,
                        EditEnDate = a.EditEnDate,
                        EditTime = a.EditTime,
                        UserIdEditor = a.UserIdEditor,
                        RemoveEnDate = a.RemoveEnDate,
                        RemoveTime = a.EditTime,
                        UserIdRemover = a.UserIdRemover,
                        IsActivated = a.IsActivated,
                        IsDeleted = a.IsDeleted

                    }).ToList();

            }
            catch
            {

            }
            return result;
        }

        public int UpdateEvaluationItemValues(UpdateEvaluationItemValuesPVM updateEvaluationItemValuesPVM)
        {
            try
            {
                var EvlItemVal = teniacoApiDb.EvaluationItemValues.Where(a => a.ParentId == updateEvaluationItemValuesPVM.ParentId).ToList();
                teniacoApiDb.EvaluationItemValues.RemoveRange(EvlItemVal);

                List<int> EvaluationItemIds = updateEvaluationItemValuesPVM.replies.Split(',').Select(a => int.Parse(a)).ToList();
                var itemQuestion = teniacoApiDb.EvaluationItems.Where(a => EvaluationItemIds.Contains(a.EvaluationItemId))
                    .Select(a => new { a.EvaluationItemId, a.EvaluationQuestionId }).ToList();
                var newItem = itemQuestion.Select(a => new EvaluationItemValues
                {
                    EvaluationItemId = a.EvaluationItemId,
                    EvaluationQuestionId = a.EvaluationQuestionId.Value,
                    ParentId = updateEvaluationItemValuesPVM.ParentId,
                    CreateEnDate = updateEvaluationItemValuesPVM?.EvaluationItemValuesVM?.CreateEnDate,
                    CreateTime = updateEvaluationItemValuesPVM?.EvaluationItemValuesVM?.CreateTime,
                    IsActivated = true,
                    IsDeleted = false,
                    UserIdCreator = updateEvaluationItemValuesPVM?.EvaluationItemValuesVM?.UserIdCreator

                });

                teniacoApiDb.EvaluationItemValues.AddRange(newItem);
                teniacoApiDb.SaveChanges();
                return 1;
            }
            catch
            {
                return 0;
            }


        }


        public List<EvaluationItemValuesVM> GetEvaluationItemValuesWithEvalItemIds(List<int> evalItemIds)
        {
            List<EvaluationItemValuesVM> evaluationItemValuesVMList = new List<EvaluationItemValuesVM>();

            try
            {
                if (teniacoApiDb.EvaluationItemValues.Where(eq => eq.EvaluationItemId.HasValue).Where(eq => evalItemIds.Contains(eq.EvaluationItemId.Value)).Any())
                {
                    evaluationItemValuesVMList = _mapper.Map<List<EvaluationItemValues>,
                        List<EvaluationItemValuesVM>>(teniacoApiDb.EvaluationItemValues.Where(eq => eq.EvaluationItemId.HasValue).Where(eq => evalItemIds.Contains(eq.EvaluationItemId.Value)).ToList());
                }
            }
            catch (Exception exc)
            { }

            return evaluationItemValuesVMList;
        }


        public int AddToEvaluationItemValues(EvaluationItemValuesVM evaluationItemValuesVM)
        {

            try
            {
                EvaluationItemValues evaluationItemValues = _mapper.Map<EvaluationItemValuesVM, EvaluationItemValues>(evaluationItemValuesVM);

                teniacoApiDb.EvaluationItemValues.Add(evaluationItemValues);
                teniacoApiDb.SaveChanges();

                return evaluationItemValues.EvaluationItemValueId;

            }
            catch (Exception exc)
            { }

            return 0;
        }


        public bool UpdateEvaluationItemValuesList(List<EvaluationItemValuesVM> evaluationItemValuesVMList)
        {
            try
            {
                if (evaluationItemValuesVMList != null)
                    if (evaluationItemValuesVMList.Count > 0)
                    {

                        foreach (var item in evaluationItemValuesVMList)
                        {

                            if (item.EvaluationItemId != null)
                            {

                                var OldEvaluationItemValue = teniacoApiDb.EvaluationItemValues.Where
                                   (e => e.EvaluationQuestionId.Equals(item.EvaluationQuestionId) && e.ParentId.Equals(item.ParentId) && e.ParentType.Equals(item.ParentType)).FirstOrDefault();


                                if (OldEvaluationItemValue != null)
                                {
                                    OldEvaluationItemValue.EvaluationItemId = item.EvaluationItemId;


                                    teniacoApiDb.Entry<EvaluationItemValues>(OldEvaluationItemValue).State = EntityState.Modified;
                                    teniacoApiDb.SaveChanges();

                                }
                                else
                                {
                                    EvaluationItemValues evaluationItemValues = new EvaluationItemValues();

                                    evaluationItemValues.EvaluationItemId = item.EvaluationItemId.Value;
                                    evaluationItemValues.ParentId = item.ParentId;
                                    evaluationItemValues.ParentType = item.ParentType;
                                    evaluationItemValues.EvaluationQuestionId = item.EvaluationQuestionId;
                                    evaluationItemValues.EvaluationItemId = item.EvaluationItemId.Value;
                                    evaluationItemValues.CreateEnDate = DateTime.Now;
                                    evaluationItemValues.IsActivated = true;
                                    evaluationItemValues.IsDeleted = false;

                                    teniacoApiDb.EvaluationItemValues.AddRange(evaluationItemValues);
                                    teniacoApiDb.SaveChanges();


                                }



                                #region old code


                                //EvaluationItemValues evaluationItemValues = (from a in teniacoApiDb.EvaluationItemValues
                                //                                             where a.EvaluationQuestionId == item.EvaluationQuestionId
                                //                                             select a).FirstOrDefault();


                                //if (evaluationItemValues != null)
                                //{
                                //    evaluationItemValues.EvaluationItemId = item.EvaluationItemId.Value;


                                //    teniacoApiDb.Entry<EvaluationItemValues>(evaluationItemValues).State = EntityState.Modified;
                                //    teniacoApiDb.SaveChanges();
                                //}
                                //else
                                //{
                                //    teniacoApiDb.EvaluationItemValues.Add(evaluationItemValues);
                                //    teniacoApiDb.SaveChanges();
                                //}

                                #endregion

                            }
                        }

                        return true;

                        //var evaluationItemValuesList = _mapper.Map<List<EvaluationItemValuesVM>, List<EvaluationItemValues>>(evaluationItemValuesVMList);

                        //teniacoApiDb.EvaluationItemValues.AddRange(evaluationItemValuesList);
                        //teniacoApiDb.SaveChanges();


                    }
            }
            catch (Exception exc)
            { }
            return false;
        }

        #endregion

        #region Methods For Work With ElementTypes

        //public List<ElementTypesVM> GetAllElementTypesList()
        //{
        //    try
        //    {
        //        var documentTypes = teniacoApiDb.ElementTypes.AsQueryable();

        //        return _mapper.Map<List<ElementTypes>, List<ElementTypesVM>>(documentTypes.ToList());
        //    }
        //    catch (Exception exc)
        //    { }
        //    return new List<ElementTypesVM>();
        //}

        #endregion

        #region Methods For Work With Features

        public List<FeaturesVM> GetAllFeaturesList(ref int listCount,
              int? propertyTypeId = null,
              string featureTitleSearch = "")
        {
            List<FeaturesVM> featuresVM = new List<FeaturesVM>();

            try
            {
                // آی دی دسته بندی های امکانات براساس نوع ملک
                List<int> featuresCategoriesIds = teniacoApiDb.Features.Where(c => c.PropertyTypeId == propertyTypeId).Select(c => c.FeatureCategoryId).Distinct().ToList();
                // لیست دسنه بندی های امکانات
                List<FeaturesCategories> featuresCategories = teniacoApiDb.FeaturesCategories.Where(c => featuresCategoriesIds.Contains(c.FeatureCategoryId)).ToList();

                var list = teniacoApiDb.Features.Where(f => f.IsActivated.Equals(true) &&
                        f.IsDeleted.Equals(false)).AsQueryable();

                if (propertyTypeId.HasValue)
                    list = list.Where(l => l.PropertyTypeId.Equals(propertyTypeId.Value));

                if (!string.IsNullOrEmpty(featureTitleSearch))
                    list = list.Where(a => a.FeatureTitle.Contains(featureTitleSearch));

                listCount = list.Count();

                featuresVM = _mapper.Map<List<Features>, List<FeaturesVM>>(list.OrderByDescending(f => f.FeatureId).ToList());

                List<int> featureIds = featuresVM.Select(f => f.FeatureId).ToList();

                List<FeaturesOptionsVM> featuresOptionsVMList = new List<FeaturesOptionsVM>();
                featuresOptionsVMList = _mapper.Map<List<FeaturesOptions>, List<FeaturesOptionsVM>>(teniacoApiDb.FeaturesOptions.Where(fo => featureIds.Contains(fo.FeatureId)).ToList());

                foreach (var feature in featuresVM)
                {
                    // پر کردن نام دسته بندی هر امکانات
                    feature.FeatureCategoryName = featuresCategories.Where(fc => fc.FeatureCategoryId.Equals(feature.FeatureCategoryId)).Select(fc => fc.FeatureCategoryTitle).FirstOrDefault();

                    if (featuresOptionsVMList.Where(fo => fo.FeatureId.Equals(feature.FeatureId)).Any())
                    {
                        try
                        {
                            feature.FeaturesOptionsVM = new List<FeaturesOptionsVM>();
                            feature.FeaturesOptionsVM = featuresOptionsVMList.Where(fo => fo.FeatureId.Equals(feature.FeatureId)).ToList();
                        }
                        catch (Exception exc)
                        { }
                    }
                }
            }
            catch (Exception exc)
            { }

            return featuresVM;
        }



        public List<FeaturesVM> GetListOfFeatures(
             int jtStartIndex,
           int jtPageSize,
           ref int listCount,
           int? propertyTypeId = null,
            string? featureTitleSearch = ""/*,
           List<long> childsUsersIds,
           string Lang = null,
           string jtSorting = null
           /*long userId = 0*/)
        {
            List<FeaturesVM> featuresVMList = new List<FeaturesVM>();

            try
            {



                var list = teniacoApiDb.Features.Where(c => c.IsActivated.Value.Equals(true) && c.IsDeleted.Value.Equals(false)).AsEnumerable();

                if (propertyTypeId.HasValue)
                    list = list.Where(l => l.PropertyTypeId.Equals(propertyTypeId.Value));


                if (!string.IsNullOrEmpty(featureTitleSearch))
                    list = list.Where(a => a.FeatureTitle.Contains(featureTitleSearch));


                #region old codes - comments

                //var list = teniacoApiDb.Features.Where(c => c.IsActivated.Value.Equals(true) && c.IsDeleted.Value.Equals(false))
                //        //.Where(c => childsUsersIds.Contains(c.UserIdCreator.Value))
                //        .AsQueryable();

                //if (propertyTypeId.HasValue)
                //    list = list.Where(l => l.PropertyTypeId.Equals(propertyTypeId.Value));

                //if (!string.IsNullOrEmpty(featureTitleSearch))
                //    list = list.Where(a => a.FeatureTitle.Contains(featureTitleSearch));


                #endregion

                listCount = list.Count();

                if (listCount > jtPageSize)
                {
                    featuresVMList = _mapper.Map<List<Features>, List<FeaturesVM>>(list.OrderByDescending(s => s.FeatureId)
                             .Skip(jtStartIndex).Take(jtPageSize).ToList());

                }
                else
                {
                    featuresVMList = _mapper.Map<List<Features>,
                        List<FeaturesVM>>(list.OrderByDescending(s => s.FeatureId).ToList());
                }
            }
            catch (Exception exc)
            { }
            return featuresVMList;
        }


        public int AddToFeatures(FeaturesVM featuresVM, List<long> childsUsersIds)
        {
            try
            {
                if (!teniacoApiDb.Features.Where(p => p.FeatureTitle.Equals(featuresVM.FeatureTitle) && p.PropertyTypeId.Equals(featuresVM.PropertyTypeId) && p.FeatureCategoryId.Equals(featuresVM.FeatureCategoryId)).Any())
                {
                    Features features = _mapper.Map<FeaturesVM, Features>(featuresVM);
                    teniacoApiDb.Features.Add(features);
                    teniacoApiDb.SaveChanges();
                    return features.FeatureId;
                }
                else
                    return -1;
                //}
            }
            catch (Exception exc)
            { }
            return 0;
        }

        public FeaturesVM GetFeatureWithFeatureId(int featureId)
        {
            FeaturesVM featuresVM = new FeaturesVM();

            try
            {
                featuresVM = _mapper.Map<Features,
                    FeaturesVM>(teniacoApiDb.Features
                    .Where(e => e.FeatureId.Equals(featureId)).FirstOrDefault());
            }
            catch (Exception exc)
            { }

            return featuresVM;
        }

        public int UpdateFeatures(ref FeaturesVM featuresVM,
            //long userId,
            List<long> childsUsersIds)
        {
            try
            {
                int featureId = featuresVM.FeatureId;
                int propertyTypeId = featuresVM.PropertyTypeId;
                string featureTitle = featuresVM.FeatureTitle;
                int elementTypeId = featuresVM.ElementTypeId;
                bool isRequired = featuresVM.IsRequired;
                string defaultValue = featuresVM.DefaultValue;
                int featureCategoryId = featuresVM.FeatureCategoryId;

                if (teniacoApiDb.Features.Where(p => p.FeatureTitle.Equals(featureTitle) &&
                    p.PropertyTypeId.Equals(propertyTypeId) &&
                    p.FeatureCategoryId.Equals(featureCategoryId)).Any())
                {
                    return -1;
                }

                Features feature = (from c in teniacoApiDb.Features
                                    where c.FeatureId == featureId
                                    select c).FirstOrDefault();

                feature.EditEnDate = featuresVM.EditEnDate.Value;
                feature.EditTime = featuresVM.EditTime;
                feature.IsActivated = true;
                feature.IsDeleted = false;
                feature.UserIdEditor = featuresVM.UserIdEditor;
                feature.PropertyTypeId = propertyTypeId;
                feature.FeatureTitle = featureTitle;
                feature.ElementTypeId = elementTypeId;
                feature.IsRequired = isRequired;
                feature.DefaultValue = defaultValue;
                feature.FeatureCategoryId = featureCategoryId;

                teniacoApiDb.Entry<Features>(feature).State = EntityState.Modified;
                teniacoApiDb.SaveChanges();

                featuresVM.UserIdCreator = feature.UserIdCreator.Value;

                #region rewrite inside module

                //long userIdCreator = FeaturesVM.UserIdCreator.Value;
                //if (FeaturesVM.UserIdCreator.HasValue)
                //{
                //    var user = teniacoApiDb.Users.FirstOrDefault(u => u.UserId.Equals(userIdCreator));
                //    var userDetails = teniacoApiDb.UsersProfile.FirstOrDefault(up => up.UserId.Equals(userIdCreator));
                //    FeaturesVM.UserCreatorName = user.UserName;

                //    if (!string.IsNullOrEmpty(userDetails.Name))
                //        FeaturesVM.UserCreatorName += " - " + userDetails.Name;

                //    if (!string.IsNullOrEmpty(userDetails.Family))
                //        FeaturesVM.UserCreatorName += " - " + userDetails.Family;
                //}

                #endregion

                return feature.FeatureId;
                //}
            }
            catch (Exception exc)
            { }
            return 0;
        }

        public bool ToggleActivationFeatures(int featureId, long userId, List<long> childsUsersIds)
        {
            try
            {
                //List<long> childsUsersIds = new List<long>();
                //childsUsersIds = GetChildUserIds(ref childsUsersIds, userId).Distinct().ToList();
                var feature = (from c in teniacoApiDb.Features
                               where c.FeatureId == featureId &&
                               childsUsersIds.Contains(c.UserIdCreator.Value)
                               select c).FirstOrDefault();

                if (feature != null)
                {
                    feature.IsActivated = !feature.IsActivated;
                    feature.EditEnDate = DateTime.Now;
                    feature.EditTime = PersianDate.TimeNow;
                    feature.UserIdEditor = userId;
                    teniacoApiDb.Entry<Features>(feature).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();
                    return true;
                }
            }
            catch (Exception exc)
            { }
            return false;
        }

        public bool TemporaryDeleteFeatures(int featureId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                //List<long> childsUsersIds = new List<long>();
                //childsUsersIds = GetChildUserIds(ref childsUsersIds, userId).Distinct().ToList();
                var feature = (from c in teniacoApiDb.Features
                               where c.FeatureId == featureId &&
                               childsUsersIds.Contains(c.UserIdCreator.Value)
                               select c).FirstOrDefault();

                if (feature != null)
                {
                    feature.IsDeleted = !feature.IsDeleted;
                    feature.RemoveEnDate = DateTime.Now;
                    feature.RemoveTime = PersianDate.TimeNow;
                    feature.UserIdRemover = userId;
                    teniacoApiDb.Entry<Features>(feature).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();
                    return true;
                }
            }
            catch (Exception exc)
            { }
            return false;
        }

        public bool CompleteDeleteFeatures(int featureId,
            //long userId,
            List<long> childsUsersIds)
        {
            using (var transaction = teniacoApiDb.Database.BeginTransaction())
            {
                try
                {
                    //List<long> childsUsersIds = new List<long>();
                    //childsUsersIds = GetChildUserIds(ref childsUsersIds, userId).Distinct().ToList();
                    var feature = (from c in teniacoApiDb.Features
                                   where c.FeatureId == featureId &&
                                   childsUsersIds.Contains(c.UserIdCreator.Value)
                                   select c).FirstOrDefault();

                    if (feature != null)
                    {
                        #region remove FeaturesOptions

                        var featuresOptions = teniacoApiDb.FeaturesOptions.Where(o => o.FeatureId.Equals(feature.FeatureId)).ToList();
                        if (featuresOptions != null)
                            if (featuresOptions.Count > 0)
                            {
                                teniacoApiDb.FeaturesOptions.RemoveRange(featuresOptions);
                                teniacoApiDb.SaveChanges();
                            }

                        #endregion

                        #region remove FeaturesValues

                        var featuresValues = teniacoApiDb.FeaturesValues.Where(v => v.FeatureId.Equals(feature.FeatureId)).ToList();
                        if (featuresValues != null)
                            if (featuresValues.Count > 0)
                            {
                                teniacoApiDb.FeaturesValues.RemoveRange(featuresValues);
                                teniacoApiDb.SaveChanges();
                            }

                        #endregion

                        teniacoApiDb.Features.Remove(feature);
                        teniacoApiDb.SaveChanges();

                        transaction.Commit();
                        return true;
                    }
                }
                catch (Exception exc)
                {
                    transaction.Rollback();
                }
            }
            return false;
        }

        #endregion

        #region Methods For Work With FeaturesCategories

        public List<FeaturesCategoriesVM> GetAllFeaturesCategoriesList()
        {
            List<FeaturesCategoriesVM> featuresCategoriesVMList = new List<FeaturesCategoriesVM>();

            try
            {
                var list = teniacoApiDb.FeaturesCategories.Where(f => f.IsActivated.Value.Equals(true) && f.IsDeleted.Value.Equals(false)).ToList();

                featuresCategoriesVMList = _mapper.Map<List<FeaturesCategories>, List<FeaturesCategoriesVM>>(list);
            }
            catch (Exception exc)
            { }

            return featuresCategoriesVMList;
        }


        public int CreateFeaturesCategories(FeaturesCategoriesVM featuresCategoriesVM)
        {

            FeaturesCategories existedFaturesCategories = teniacoApiDb.FeaturesCategories.Where(f => f.FeatureCategoryTitle == featuresCategoriesVM.FeatureCategoryTitle).FirstOrDefault();
            if (existedFaturesCategories == null) // اگر این دسته بندی تکراری نباشد جدید بسازد
            {
                FeaturesCategories newFaturesCategories = _mapper.Map<FeaturesCategoriesVM, FeaturesCategories>(featuresCategoriesVM);
                newFaturesCategories.IsActivated = true;
                newFaturesCategories.IsDeleted = false;
                teniacoApiDb.FeaturesCategories.Add(newFaturesCategories);
                teniacoApiDb.SaveChanges();
                return newFaturesCategories.FeatureCategoryId;
            }
            else
            {
                return 0;
            }

        }

        #endregion

        #region Methods For Work With FeaturesOptions


        public List<FeaturesOptionsVM> GetAllFeaturesOptionsList(ref int listCount,
            int featureId = 0)
        {
            List<FeaturesOptionsVM> featuresOptionsVMList = new List<FeaturesOptionsVM>();

            try
            {
                var list = teniacoApiDb.FeaturesOptions.Where(f => f.IsActivated.Value.Equals(true) && f.IsDeleted.Value.Equals(false)).AsQueryable();

                if (featureId > 0)
                    list = list.Where(l => l.FeatureId.Equals(featureId));

                listCount = list.Count();

                featuresOptionsVMList = _mapper.Map<List<FeaturesOptions>,
                    List<FeaturesOptionsVM>>(list.OrderByDescending(s => s.FeatureOptionId).ToList());
            }
            catch (Exception exc)
            { }

            return featuresOptionsVMList;
        }


        public List<FeaturesOptionsVM> GetListOfFeaturesOptions(
            int jtStartIndex,
            int jtPageSize,
            ref int listCount,
            int featureId = 0)
        {
            List<FeaturesOptionsVM> featuresOptionsVMList = new List<FeaturesOptionsVM>();

            var list = teniacoApiDb.FeaturesOptions.Where(f => f.IsActivated.Value.Equals(true) && f.IsDeleted.Value.Equals(false)).AsQueryable();

            if (featureId > 0)
                list = list.Where(l => l.FeatureId.Equals(featureId));

            try
            {
                listCount = list.Count();

                if (listCount > jtPageSize)
                {
                    featuresOptionsVMList = _mapper.Map<List<FeaturesOptions>, List<FeaturesOptionsVM>>(list.OrderByDescending(s => s.FeatureOptionId)
                             .Skip(jtStartIndex).Take(jtPageSize).ToList());

                }
                else
                {
                    featuresOptionsVMList = _mapper.Map<List<FeaturesOptions>,
                        List<FeaturesOptionsVM>>(list.OrderByDescending(s => s.FeatureOptionId).ToList());
                }
            }
            catch (Exception exc)
            { }
            return featuresOptionsVMList;
        }


        public int AddToFeaturesOptions(FeaturesOptionsVM featuresOptionsVM)
        {
            try
            {
                if (!teniacoApiDb.FeaturesOptions.
                    Where(p => p.FeatureOptionText.Equals(featuresOptionsVM.FeatureOptionText) &&
                        p.FeatureId.Equals(featuresOptionsVM.FeatureId)).Any())
                {
                    FeaturesOptions featuresOptions = _mapper.Map<FeaturesOptionsVM, FeaturesOptions>(featuresOptionsVM);
                    teniacoApiDb.FeaturesOptions.Add(featuresOptions);
                    teniacoApiDb.SaveChanges();
                    return featuresOptions.FeatureOptionId;
                }
                else
                    return -1;
                //}
            }
            catch (Exception exc)
            { }
            return 0;
        }

        public int UpdateFeaturesOptions(ref FeaturesOptionsVM featuresOptionsVM)
        {
            try
            {
                int featureOptionId = featuresOptionsVM.FeatureOptionId;
                int featureId = featuresOptionsVM.FeatureId;
                int featureOptionValue = featuresOptionsVM.FeatureOptionValue;
                string featureOptionText = featuresOptionsVM.FeatureOptionText;

                if (teniacoApiDb.FeaturesOptions.Where(p => p.FeatureOptionText.Equals(featureOptionText) &&
                    p.FeatureId.Equals(featureId) &&
                    !p.FeatureOptionId.Equals(featureOptionId)).Any())
                {
                    return -1;
                }

                FeaturesOptions featuresOptions = (from c in teniacoApiDb.FeaturesOptions
                                                   where c.FeatureOptionId == featureOptionId
                                                   select c).FirstOrDefault();

                featuresOptions.EditEnDate = featuresOptionsVM.EditEnDate.Value;
                featuresOptions.EditTime = featuresOptionsVM.EditTime;
                featuresOptions.UserIdEditor = featuresOptionsVM.UserIdEditor;
                featuresOptions.FeatureId = featureId;
                featuresOptions.FeatureOptionValue = featureOptionValue;
                featuresOptions.FeatureOptionText = featureOptionText;

                featuresOptions.IsActivated = featuresOptionsVM.IsActivated;
                featuresOptions.IsDeleted = featuresOptionsVM.IsDeleted;
                teniacoApiDb.Entry<FeaturesOptions>(featuresOptions).State = EntityState.Modified;
                teniacoApiDb.SaveChanges();

                featuresOptionsVM.UserIdCreator = featuresOptions.UserIdCreator.Value;

                #region rewrite inside module

                //long userIdCreator = FeaturesVM.UserIdCreator.Value;
                //if (FeaturesVM.UserIdCreator.HasValue)
                //{
                //    var user = teniacoApiDb.Users.FirstOrDefault(u => u.UserId.Equals(userIdCreator));
                //    var userDetails = teniacoApiDb.UsersProfile.FirstOrDefault(up => up.UserId.Equals(userIdCreator));
                //    FeaturesVM.UserCreatorName = user.UserName;

                //    if (!string.IsNullOrEmpty(userDetails.Name))
                //        FeaturesVM.UserCreatorName += " - " + userDetails.Name;

                //    if (!string.IsNullOrEmpty(userDetails.Family))
                //        FeaturesVM.UserCreatorName += " - " + userDetails.Family;
                //}

                #endregion

                return featuresOptions.FeatureOptionId;
                //}
            }
            catch (Exception exc)
            { }
            return 0;
        }

        public bool ToggleActivationFeaturesOptions(int featureOptionId, long userId)
        {
            try
            {
                //List<long> childsUsersIds = new List<long>();
                //childsUsersIds = GetChildUserIds(ref childsUsersIds, userId).Distinct().ToList();
                var featuresOptions = (from c in teniacoApiDb.FeaturesOptions
                                       where c.FeatureOptionId == featureOptionId
                                       select c).FirstOrDefault();

                if (featuresOptions != null)
                {
                    featuresOptions.IsActivated = !featuresOptions.IsActivated;
                    featuresOptions.EditEnDate = DateTime.Now;
                    featuresOptions.EditTime = PersianDate.TimeNow;
                    featuresOptions.UserIdEditor = userId;
                    teniacoApiDb.Entry<FeaturesOptions>(featuresOptions).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();
                    return true;
                }
            }
            catch (Exception exc)
            { }
            return false;
        }

        public bool TemporaryDeleteFeaturesOptions(int featureOptionId, long userId)
        {
            try
            {
                //List<long> childsUsersIds = new List<long>();
                //childsUsersIds = GetChildUserIds(ref childsUsersIds, userId).Distinct().ToList();
                var featuresOptions = (from c in teniacoApiDb.FeaturesOptions
                                       where c.FeatureOptionId == featureOptionId
                                       select c).FirstOrDefault();

                if (featuresOptions != null)
                {
                    featuresOptions.IsDeleted = !featuresOptions.IsDeleted;
                    featuresOptions.EditEnDate = DateTime.Now;
                    featuresOptions.EditTime = PersianDate.TimeNow;
                    featuresOptions.UserIdEditor = userId;
                    teniacoApiDb.Entry<FeaturesOptions>(featuresOptions).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();
                    return true;
                }
            }
            catch (Exception exc)
            { }
            return false;
        }

        public bool CompleteDeleteFeaturesOptions(int featureOptionId)
        {
            try
            {
                //List<long> childsUsersIds = new List<long>();
                //childsUsersIds = GetChildUserIds(ref childsUsersIds, userId).Distinct().ToList();
                var featuresOptions = (from c in teniacoApiDb.FeaturesOptions
                                       where c.FeatureOptionId == featureOptionId
                                       select c).FirstOrDefault();

                if (featuresOptions != null)
                {
                    teniacoApiDb.FeaturesOptions.Remove(featuresOptions);
                    teniacoApiDb.SaveChanges();
                    return true;
                }
            }
            catch (Exception exc)
            { }
            return false;
        }

        #endregion

        #region Methods For Work With FeaturesValues

        public bool UpdatePropertyFeatures(long propertyId, List<FeaturesValuesVM> featuresValuesVMList)
        {
            try
            {
                if (teniacoApiDb.FeaturesValues.Where(fv => fv.PropertyId.Equals(propertyId)).Any())
                {
                    var oldFeaturesValues = teniacoApiDb.FeaturesValues.Where(fv => fv.PropertyId.Equals(propertyId)).ToList();
                    teniacoApiDb.FeaturesValues.RemoveRange(oldFeaturesValues);
                    teniacoApiDb.SaveChanges();
                }

                var featuresValuesList = _mapper.Map<List<FeaturesValuesVM>, List<FeaturesValues>>(featuresValuesVMList);

                teniacoApiDb.FeaturesValues.AddRange(featuresValuesList);
                teniacoApiDb.SaveChanges();

                return true;
            }
            catch (Exception exc)
            { }

            return false;
        }

        #endregion

        #region Methods for Work With Funds


        public List<FundsVM> GetAllFundsList(
        int? fundId = null)
        {
            List<FundsVM> fundsList = new List<FundsVM>();

            try
            {

                var list = (from p in teniacoApiDb.Funds
                            where p.IsActivated.Value.Equals(true) &&
                            p.IsDeleted.Value.Equals(false)
                            select new FundsVM
                            {
                                FundId = p.FundId,
                                FundName = p.FundName,
                                UserIdCreator = p.UserIdCreator.Value,
                                CreateEnDate = p.CreateEnDate,
                                CreateTime = p.CreateTime,
                                EditEnDate = p.EditEnDate,
                                EditTime = p.EditTime,
                                UserIdEditor = p.UserIdEditor.Value,
                                RemoveEnDate = p.RemoveEnDate,
                                RemoveTime = p.EditTime,
                                UserIdRemover = p.UserIdRemover.Value,
                                IsActivated = p.IsActivated,
                                IsDeleted = p.IsDeleted,

                            })
                            .AsQueryable();



                if (fundId.HasValue)
                    if (fundId.Value > 0)
                        list = list.Where(a => a.FundId.Equals(fundId.Value));


                fundsList = list.OrderByDescending(s => s.FundId).ToList();

            }
            catch (Exception ex)
            { }

            return fundsList;
        }

        public List<FundsVM> GetListOfFunds(
            int jtStartIndex,
            int jtPageSize,
            ref int listCount,
            List<long> childsUsersIds,
            string? jtSorting = null)
        {
            List<FundsVM> result = new List<FundsVM>();

            var list = (from p in teniacoApiDb.Funds
                        select new FundsVM
                        {
                            FundId = p.FundId,
                            FundName = p.FundName,
                            UserIdCreator = p.UserIdCreator.Value,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor.Value,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover.Value,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted,
                        }).Skip(jtStartIndex).Take(jtPageSize).AsQueryable();



            listCount = teniacoApiDb.Funds.AsQueryable().Count();
            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {


                    if (listCount > jtPageSize)
                    {

                        result = list.OrderByDescending(s => s.FundId).ToList();
                    }
                    else
                        result = list.OrderByDescending(s => s.FundId).ToList();
                }
                else
                {
                    if (listCount > jtPageSize)
                    {
                        switch (jtSorting)
                        {
                            case "FundName ASC":
                                list = list.OrderBy(l => l.FundName);
                                break;
                            case "FundName DESC":
                                list = list.OrderByDescending(l => l.FundName);
                                break;
                        }


                        if (string.IsNullOrEmpty(jtSorting))
                            result = list.OrderByDescending(s => s.FundId).ToList();
                        else list.ToList();
                    }
                    else
                    {

                        result = list.ToList();
                    }
                }
                return result;

            }
            catch (Exception exc)
            {
                throw;
            }



        }

        public int AddToFunds(FundsVM fundsVM)
        {

            try
            {
                Funds funds = _mapper.Map<FundsVM, Funds>(fundsVM);
                teniacoApiDb.Funds.Add(funds);
                teniacoApiDb.SaveChanges();

                return funds.FundId;

            }
            catch (Exception exc)
            { }

            return 0;
        }

        public int UpdateFunds(ref FundsVM fundsVM,
          List<long> childsUsersIds)
        {


            int? fundId = fundsVM.FundId;
            bool? isActivated = fundsVM.IsActivated.HasValue ? fundsVM.IsActivated.Value : (bool?)true;
            bool? isDeleted = fundsVM.IsDeleted.HasValue ? fundsVM.IsDeleted.Value : (bool?)true;



            if (teniacoApiDb.Funds.Where(n => childsUsersIds.Contains(n.UserIdCreator.Value)).Where(x => x.FundId.Equals(fundId)).Any())
            {
                try
                {
                    Funds funds = (from a in teniacoApiDb.Funds
                                   where a.FundId == fundId
                                   select a).FirstOrDefault();


                    funds.EditEnDate = DateTime.Now;
                    funds.EditTime = PersianDate.TimeNow;
                    funds.UserIdEditor = funds.UserIdEditor.Value;
                    funds.IsActivated = isActivated.Value;
                    funds.IsDeleted = isDeleted.Value;


                    teniacoApiDb.Entry<Funds>(funds).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();




                    fundsVM.UserIdCreator = funds.UserIdCreator.Value;

                    return funds.FundId;
                }
                catch (Exception ex)
                { }

            }
            return 0;
        }


        public bool ToggleActivationFunds(int FundId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                var Funds = (from c in teniacoApiDb.Funds
                             where c.FundId == FundId &&
                             childsUsersIds.Contains(c.UserIdCreator.Value)
                             select c).FirstOrDefault();



                if (Funds != null)
                {
                    Funds.IsActivated = !Funds.IsActivated;
                    Funds.EditEnDate = DateTime.Now;
                    Funds.EditTime = PersianDate.TimeNow;
                    Funds.UserIdEditor = userId;

                    teniacoApiDb.Entry<Funds>(Funds).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();
                    return true;
                }


            }
            catch (Exception)
            { }

            return false;

        }

        public bool TemporaryDeleteFunds(int FundId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                var Funds = (from c in teniacoApiDb.Funds
                             where c.FundId == FundId &&
                             childsUsersIds.Contains(c.UserIdCreator.Value)
                             select c).FirstOrDefault();


                if (Funds != null)
                {
                    Funds.IsActivated = !Funds.IsDeleted;
                    Funds.EditEnDate = DateTime.Now;
                    Funds.EditTime = PersianDate.TimeNow;
                    Funds.UserIdEditor = userId;

                    teniacoApiDb.Entry<Funds>(Funds).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }


            }
            catch (Exception ex)
            { }
            return false;
        }

        public bool CompleteDeleteFunds(int FundId,
            List<long> childsUsersIds)
        {
            try
            {
                var funds = (from a in teniacoApiDb.Funds
                             where a.FundId == FundId &&
                             childsUsersIds.Contains(a.UserIdCreator.Value)
                             select a).FirstOrDefault();

                if (funds != null)
                {

                    try
                    {
                        teniacoApiDb.Funds.Remove(funds);
                        teniacoApiDb.SaveChanges();


                        return true;
                    }
                    catch (Exception)
                    {

                    }
                }
            }


            catch (Exception ex)
            { }

            return false;
        }

        #endregion

        #region Methods For Work With IntroductionMethods
        #endregion

        #region Methods For Work With Investors
        public List<InvestorsVM> GetAllInvestorsList(
          List<long> childsUsersIds,
          long? userId = null,
          string companyName = "",
          int? fundId = null)
        {
            List<InvestorsVM> investorsList = new List<InvestorsVM>();

            try
            {

                var list = (from p in teniacoApiDb.Investors
                            where p.IsActivated.Value.Equals(true) &&
                            p.IsDeleted.Value.Equals(false)
                            select new InvestorsVM
                            {
                                InvestorId = p.InvestorId,
                                //PersonId = p.PersonId,
                                UserId = p.UserId,
                                GuildCategoryId = p.GuildCategoryId,
                                Job = p.Job,
                                CompanyName = p.CompanyName,
                                CompanyAddress = p.CompanyAddress,
                                DescriptionOfCompany = p.DescriptionOfCompany,
                                RepresentativeId = p.RepresentativeId,
                                DescriptionOfFund = p.DescriptionOfFund,
                                CountOfProperties = p.CountOfProperties,
                                RelatedPersons = p.RelatedPersons,
                                BusinessSpirit = p.BusinessSpirit,
                                PersonalSpirit = p.PersonalSpirit,
                                PastTransactions = p.PastTransactions,
                                UserIdCreator = p.UserIdCreator.Value,
                                CreateEnDate = p.CreateEnDate,
                                CreateTime = p.CreateTime,
                                EditEnDate = p.EditEnDate,
                                EditTime = p.EditTime,
                                UserIdEditor = p.UserIdEditor.Value,
                                RemoveEnDate = p.RemoveEnDate,
                                RemoveTime = p.EditTime,
                                UserIdRemover = p.UserIdRemover.Value,
                                IsActivated = p.IsActivated,
                                IsDeleted = p.IsDeleted,

                            })
                            .AsQueryable();


                if (childsUsersIds != null)
                {
                    if (childsUsersIds.Count > 1)
                    {
                        list = list.Where(c => childsUsersIds.Contains(c.UserIdCreator.Value));
                    }
                    else
                    {
                        if (childsUsersIds.Count == 1)
                        {
                            if (childsUsersIds.FirstOrDefault() > 0)
                            {
                                list = list.Where(c => childsUsersIds.Contains(c.UserIdCreator.Value));
                            }
                        }
                    }
                }

                if (!string.IsNullOrEmpty(companyName))
                {
                    list = list.Where(a => a.CompanyName.Contains(companyName));
                }


                if (userId.HasValue)
                    if (userId.Value > 0)
                        list = list.Where(a => a.UserId.Equals(userId.Value));

                if (fundId.HasValue)
                    if (fundId.Value > 0)
                        list = list.Where(a => a.FundId.Equals(fundId.Value));



                investorsList = list.OrderByDescending(s => s.InvestorId).ToList();

            }
            catch (Exception ex)
            { }

            return investorsList;
        }



        public List<InvestorsVM> GetListOfInvestors(
              int jtStartIndex,
              int jtPageSize,
              ref int listCount,
              List<long> childsUsersIds,
              long? userId = null,
              string companyName = "",
              int? fundId = null,
              string jtSorting = null)
        {
            List<InvestorsVM> investorsList = new List<InvestorsVM>();

            var list = (from p in teniacoApiDb.Investors

                        select new InvestorsVM
                        {
                            InvestorId = p.InvestorId,
                            UserId = p.UserId,
                            GuildCategoryId = p.GuildCategoryId,
                            FundId = p.FundId,
                            Job = p.Job,
                            TradableNumber = p.TradableNumber,
                            CompanyName = p.CompanyName,
                            CompanyPhone = p.CompanyPhone,
                            CompanyAddress = p.CompanyAddress,
                            DescriptionOfCompany = p.DescriptionOfCompany,
                            RepresentativeId = p.RepresentativeId,
                            DescriptionOfFund = p.DescriptionOfFund,
                            CountOfProperties = p.CountOfProperties,
                            RelatedPersons = p.RelatedPersons,
                            BusinessSpirit = p.BusinessSpirit,
                            PersonalSpirit = p.PersonalSpirit,
                            PastTransactions = p.PastTransactions,
                            UserIdCreator = p.UserIdCreator.Value,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor.Value,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover.Value,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted,

                        }).AsQueryable();



            if (childsUsersIds != null)
            {
                if (childsUsersIds.Count > 1)
                {
                    list = list.Where(c => childsUsersIds.Contains(c.UserIdCreator.Value));
                }
                else
                {
                    if (childsUsersIds.Count == 1)
                    {
                        if (childsUsersIds.FirstOrDefault() > 0)
                        {
                            list = list.Where(c => childsUsersIds.Contains(c.UserIdCreator.Value));
                        }
                    }
                }
            }






            if (!string.IsNullOrEmpty(companyName))
            {
                list = list.Where(a => a.CompanyName.Contains(companyName));
            }


            if (userId.HasValue)
                if (userId.Value > 0)
                    list = list.Where(a => a.UserId.Equals(userId.Value));

            if (fundId.HasValue)
                if (fundId.Value > 0)
                    list = list.Where(a => a.FundId.Equals(fundId.Value));


            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        investorsList = list.OrderByDescending(s => s.InvestorId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                        investorsList = list.OrderByDescending(s => s.InvestorId).ToList();
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {
                        if (string.IsNullOrEmpty(jtSorting))
                            investorsList = list.OrderByDescending(s => s.InvestorId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            investorsList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {

                        investorsList = list.ToList();
                    }
                }


            }
            catch (Exception exc)
            { }

            return investorsList;
        }



        public int AddToInvestors(
                InvestorsVM investorsVM,
                IConsoleBusiness consoleBusiness,
                string domainName)
        {
            using (var transaction = teniacoApiDb.Database.BeginTransaction())
            {
                try
                {


                    #region Investors

                    Investors investors = _mapper.Map<InvestorsVM, Investors>(investorsVM);

                    teniacoApiDb.Investors.Add(investors);
                    teniacoApiDb.SaveChanges();

                    #endregion


                    #region Users

                    if (investorsVM.CustomUsersVM != null)
                    {
                        //اگر این کاربر وجود نداشته باشد
                        if (!consoleBusiness.CmsDb.Users.Where(u => u.UserName.Equals(investorsVM.CustomUsersVM.UserName)).Any())
                        {

                            using (var transaction2 = consoleBusiness.CmsDb.Database.BeginTransaction())
                            {
                                try
                                {
                                    long userId = 0;


                                    #region Add User
                                    Users users = new Users();
                                    users.UserName = investorsVM.CustomUsersVM.UserName;
                                    users.Password = FrameWork.MD5Hash.GetMD5Hash(investorsVM.CustomUsersVM.Password);
                                    users.Email = investorsVM.CustomUsersVM.Email;
                                    users.DomainSettingId = investorsVM.CustomUsersVM.DomainSettingId;
                                    //users.DomainSettingId = consoleBusiness.GetDomainsSettingsWithDomainName(domainName).DomainSettingId;
                                    //users.UserIdCreator = consoleBusiness.GetDomainsSettingsWithDomainName(domainName).UserIdCreator;
                                    users.UserIdCreator = investorsVM.UserIdCreator; //this.userId
                                    users.IsActivated = true;
                                    users.IsDeleted = false;
                                    users.CreateEnDate = DateTime.Now;
                                    users.CreateTime = PersianDate.TimeNow;

                                    #region comments

                                    //if (users.DomainSettingId <= 0)
                                    //    users.DomainSettingId = consoleBusiness.GetDomainsSettingsWithDomainName(domainName).DomainSettingId;

                                    //if (!users.UserIdCreator.HasValue)
                                    //    users.UserIdCreator = consoleBusiness.GetDomainsSettingsWithDomainName(domainName).UserIdCreator;
                                    //else
                                    //if (users.UserIdCreator.HasValue)
                                    //    if (users.UserIdCreator.Value == 0)
                                    //        users.UserIdCreator = consoleBusiness.GetDomainsSettingsWithDomainName(domainName).UserIdCreator;

                                    #endregion


                                    consoleBusiness.CmsDb.Users.Add(users);
                                    consoleBusiness.CmsDb.SaveChanges();

                                    userId = users.UserId;
                                    //users.ParentUserId = investorsVM.UserIdCreator.Value; //در وب ماژول this.userId ارسال میشود
                                    users.ParentUserId = consoleBusiness.CmsDb.Users.Where(u => u.UserName.Equals("اعضای کلاب")).FirstOrDefault().UserId;
                                    investors.UserId = userId;
                                    teniacoApiDb.Entry<Investors>(investors).State = EntityState.Modified;
                                    teniacoApiDb.SaveChanges();


                                    //var person = publicApiDb.PublicApiDb.Persons.Where(p => p.PersonId.Equals(investorsVM.PersonId)).FirstOrDefault();

                                    UsersProfile usersProfile = new UsersProfile()
                                    {
                                        UserId = userId,
                                        Address = "",
                                        Age = 0,
                                        BirthDateTimeEn = DateTime.Now,
                                        CertificateId = "" +
                                        "",
                                        CreateEnDate = DateTime.Now,
                                        CreateTime = PersianDate.TimeNow,
                                        CreditCardNumber = "",
                                        Email = investorsVM.CustomUsersVM.Email,
                                        Name = investorsVM.CustomUsersVM.Name,
                                        Family = investorsVM.CustomUsersVM.Family,
                                        Mobile = investorsVM.CustomUsersVM.Mobile,
                                        Phone = investorsVM.CustomUsersVM.Mobile,
                                        HasModified = false,
                                        IsActivated = true,
                                        IsDeleted = false,
                                        NationalCode = investorsVM.CustomUsersVM.NationalCode,
                                        Picture = "",
                                        PostalCode = "",
                                        Sexuality = false,
                                        SocialNetworkAddress = "",
                                        UniqueKey = "",
                                        UserIdCreator = investorsVM.UserIdCreator.Value,
                                    };

                                    consoleBusiness.CmsDb.UsersProfile.Add(usersProfile);
                                    consoleBusiness.CmsDb.SaveChanges();

                                    int levelId = 0;

                                    var roleId = consoleBusiness.CmsDb.Roles.Where(r => r.RoleName.Equals("Users")).FirstOrDefault().RoleId;

                                    levelId = consoleBusiness.GetLevelId("سرمایه گذاران");

                                    UsersLevels usersLevels = new UsersLevels()
                                    {
                                        LevelId = levelId,
                                        UserId = userId,
                                        CreateEnDate = DateTime.Now,
                                        CreateTime = PersianDate.TimeNow,
                                        UserIdCreator = investorsVM.UserIdCreator.Value,
                                        IsActivated = true,
                                        IsDeleted = false,
                                    };

                                    consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                    consoleBusiness.CmsDb.SaveChanges();

                                    UsersRoles usersRoles = new UsersRoles()
                                    {
                                        RoleId = roleId,
                                        UserId = userId,
                                        CreateEnDate = DateTime.Now,
                                        CreateTime = PersianDate.TimeNow,
                                        UserIdCreator = investorsVM.UserIdCreator.Value,
                                        IsActivated = true,
                                        IsDeleted = false,
                                    };

                                    consoleBusiness.CmsDb.UsersRoles.Add(usersRoles);
                                    consoleBusiness.CmsDb.SaveChanges();


                                    transaction2.Commit();
                                    #endregion

                                }
                                catch (Exception exc)
                                {

                                    transaction.Rollback();
                                    transaction2.Rollback();


                                    return 0;
                                }
                            }
                        }
                        else
                        {
                            ////اگر این کاربر وجود داشته باشد
                            var user = consoleBusiness.CmsDb.Users.Where(u => u.UserName.Equals(investorsVM.CustomUsersVM.UserName)).FirstOrDefault();

                            //var person = publicApiDb.PublicApiDb.Persons.Where(p => p.PersonId.Equals(investorsVM.PersonId)).FirstOrDefault();

                            if (user != null)
                            {
                                if (user.UserId > 0)
                                {

                                    investors.UserId = user.UserId;

                                    teniacoApiDb.Entry<Investors>(investors).State = EntityState.Modified;
                                    teniacoApiDb.SaveChanges();

                                    if (investorsVM.CustomUsersVM.Email != null)
                                    {
                                        if (investorsVM.CustomUsersVM.Email != "")
                                        {
                                            user.Email = investorsVM.CustomUsersVM.Email;
                                            user.UserIdEditor = investorsVM.UserIdCreator.Value; //this.userId
                                            user.EditEnDate = DateTime.Now;
                                            user.EditTime = PersianDate.TimeNow;


                                            consoleBusiness.CmsDb.Entry<Users>(user).State = EntityState.Modified;
                                            consoleBusiness.CmsDb.SaveChanges();

                                        }
                                    }


                                    #region usersProfile

                                    var userProfile = consoleBusiness.CmsDb.UsersProfile.Where(p => p.UserId.Equals(user.UserId)).FirstOrDefault();
                                    if (userProfile != null)
                                    {
                                        userProfile.Name = investorsVM.CustomUsersVM.Name;
                                        userProfile.Family = investorsVM.CustomUsersVM.Family;
                                        userProfile.Mobile = investorsVM.CustomUsersVM.Mobile;
                                        userProfile.Phone = investorsVM.CustomUsersVM.Mobile;
                                        userProfile.Email = investorsVM.CustomUsersVM.Email;
                                        userProfile.NationalCode = investorsVM.CustomUsersVM.NationalCode;

                                        userProfile.UserIdEditor = investorsVM.UserIdCreator.Value; //this.userId
                                        userProfile.EditEnDate = DateTime.Now;
                                        userProfile.EditTime = PersianDate.TimeNow;

                                        consoleBusiness.CmsDb.Entry<UsersProfile>(userProfile).State = EntityState.Modified;
                                        consoleBusiness.CmsDb.SaveChanges();
                                    }


                                    #endregion


                                    var levelIds = consoleBusiness.GetMultiLevelsUserWithUserId(user.UserId).LevelIds;
                                    var levelNames = consoleBusiness.GetLevelsWithLevelIds(levelIds).Select(l => l.LevelName);

                                    var roleIds = consoleBusiness.GetRoleIdsWithUserId(user.UserId);
                                    var roleNames = consoleBusiness.GetRolesWithRoleIds(roleIds).Select(r => r.RoleName);

                                    ////اگر دسترسی سرمایه گذاران نداشته باشد
                                    ////اگر نقش users نداشته باشد

                                    if (levelNames != null)
                                    {
                                        ////اضافه کردن دسترسی سرمایه گذاران
                                        if (!levelNames.Contains("سرمایه گذاران"))
                                        {
                                            var levelId = consoleBusiness.GetLevelId("سرمایه گذاران");

                                            UsersLevels usersLevels = new UsersLevels()
                                            {
                                                LevelId = levelId,
                                                UserId = user.UserId,
                                                CreateEnDate = DateTime.Now,
                                                CreateTime = PersianDate.TimeNow,
                                                UserIdCreator = investorsVM.UserIdCreator.Value,
                                                IsActivated = true,
                                                IsDeleted = false,
                                            };


                                            consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
                                            consoleBusiness.CmsDb.SaveChanges();
                                        }
                                    }

                                    if (roleNames != null)
                                    {
                                        if (!roleNames.Contains("Users"))
                                        {
                                            ////اضافه کردن نقش Users
                                            var roleId = consoleBusiness.CmsDb.Roles.Where(r => r.RoleName.Equals("Users")).FirstOrDefault().RoleId;

                                            UsersRoles usersRoles = new UsersRoles()
                                            {
                                                RoleId = roleId,
                                                UserId = user.UserId,
                                                CreateEnDate = DateTime.Now,
                                                CreateTime = PersianDate.TimeNow,
                                                UserIdCreator = investorsVM.UserIdCreator.Value,
                                                IsActivated = true,
                                                IsDeleted = false,
                                            };


                                            consoleBusiness.CmsDb.UsersRoles.Add(usersRoles);
                                            consoleBusiness.CmsDb.SaveChanges();
                                        }
                                    }

                                }
                            }
                        }
                    }

                    #endregion

                    transaction.Commit();

                    return investors.InvestorId;

                }
                catch (Exception exc)
                {
                    transaction.Rollback();
                }
            }

            return 0;
        }



        public int UpdateInvestors(ref InvestorsVM investorsVM,
           List<long> childsUsersIds)
        {
            int investorId = investorsVM.InvestorId;


            bool? isActivated = investorsVM.IsActivated.HasValue ? investorsVM.IsActivated.Value : (bool?)true;
            bool? isDeleted = investorsVM.IsDeleted.HasValue ? investorsVM.IsDeleted.Value : (bool?)true;

            if (teniacoApiDb.Investors.Where(n => childsUsersIds.Contains(n.UserIdCreator.Value)).Where(x => x.InvestorId.Equals(investorId)).Any())
            {
                try
                {
                    Investors investors = (from a in teniacoApiDb.Investors
                                           where a.InvestorId == investorId
                                           select a).FirstOrDefault();

                    investors.GuildCategoryId = investorsVM.GuildCategoryId;
                    investors.Job = investorsVM.Job;
                    investors.CompanyName = investorsVM.CompanyName;
                    investors.CompanyPhone = investorsVM.CompanyPhone;
                    investors.CompanyAddress = investorsVM.CompanyAddress;
                    investors.DescriptionOfCompany = investorsVM.DescriptionOfCompany;
                    investors.RepresentativeId = investorsVM.RepresentativeId;
                    investors.FundId = investorsVM.FundId.HasValue ? investorsVM.FundId.Value : (int?)0;
                    investors.TradableNumber = investorsVM.TradableNumber.HasValue ? investorsVM.TradableNumber.Value : (int?)0;
                    investors.DescriptionOfFund = investorsVM.DescriptionOfFund;
                    investors.CountOfProperties = investorsVM.CountOfProperties;
                    investors.RelatedPersons = investorsVM.RelatedPersons;
                    investors.BusinessSpirit = investorsVM.BusinessSpirit;
                    investors.PersonalSpirit = investorsVM.PersonalSpirit;
                    investors.PastTransactions = investorsVM.PastTransactions;


                    teniacoApiDb.Entry<Investors>(investors).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();




                    investorsVM.UserIdCreator = investors.UserIdCreator.Value;

                    return investors.InvestorId;
                }
                catch (Exception ex)
                { }

            }
            return 0;
        }



        public bool ToggleActivationInvestors(
              int investorId,
              long userId,
              IConsoleBusiness consoleBusiness,
              List<long> childsUsersIds)
        {


            using (var transaction = teniacoApiDb.Database.BeginTransaction())
            {


                try
                {

                    #region Investors


                    var investors = (from c in teniacoApiDb.Investors
                                     where c.InvestorId == investorId &&
                                     childsUsersIds.Contains(c.UserIdCreator.Value)
                                     select c).FirstOrDefault();


                    if (investors != null)
                    {
                        investors.IsActivated = !investors.IsActivated;
                        investors.EditEnDate = DateTime.Now;
                        investors.EditTime = PersianDate.TimeNow;
                        investors.UserIdEditor = userId;

                        teniacoApiDb.Entry<Investors>(investors).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();
                    }


                    #endregion

                    #region User




                    var user = consoleBusiness.CmsDb.Users.Where(c => c.UserId.Equals(investors.UserId)).FirstOrDefault();

                    if (user != null)
                    {
                        if (investors.IsActivated == false)
                        {
                            user.IsActivated = false;

                        }
                        else if (investors.IsActivated == true)
                        {
                            user.IsActivated = true;
                        }
                    }



                    //user.IsActivated = !user.IsActivated;
                    //user.IsActivated = !investors.IsActivated.Value;
                    user.EditEnDate = DateTime.Now;
                    user.EditTime = PersianDate.TimeNow;
                    user.UserIdEditor = userId;



                    consoleBusiness.CmsDb.Entry<Users>(user).State = EntityState.Modified;
                    consoleBusiness.CmsDb.SaveChanges();


                    #endregion


                    transaction.Commit();
                    return true;
                }
                catch (Exception exc)
                { }
            }



            return false;

        }

        public bool TemporaryDeleteInvestors(
        int investorId,
        long userId,
        List<long> childsUsersIds)
        {
            try
            {
                var investors = (from c in teniacoApiDb.Investors
                                 where c.InvestorId == investorId &&
                                 childsUsersIds.Contains(c.UserIdCreator.Value)
                                 select c).FirstOrDefault();

                if (investors != null)
                {
                    investors.IsDeleted = !investors.IsDeleted;
                    investors.EditEnDate = DateTime.Now;
                    investors.EditTime = PersianDate.TimeNow;
                    investors.UserIdEditor = userId;

                    teniacoApiDb.Entry<Investors>(investors).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();


                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;

        }


        public bool CompleteDeleteInvestors(
             int investorId,
            List<long> childsUsersIds)
        {
            try
            {
                var investors = (from c in teniacoApiDb.Investors
                                 where c.InvestorId == investorId &&
                                 childsUsersIds.Contains(c.UserIdCreator.Value)
                                 select c).FirstOrDefault();

                if (investors != null)
                {
                    teniacoApiDb.Investors.Remove(investors);
                    teniacoApiDb.SaveChanges();


                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;

        }


        public InvestorsVM GetInvestorWithInvestorId(
             int? investorId,
             List<long> childsUsersIds)
        {
            InvestorsVM investorsVM = new InvestorsVM();

            try
            {
                investorsVM = _mapper.Map<Investors,
                    InvestorsVM>(teniacoApiDb.Investors
                    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                     .Where(e => e.InvestorId.Equals(investorId)).FirstOrDefault());

            }
            catch (Exception exc)
            { }

            return investorsVM;
        }
        #endregion

        #region Methods for Work With MapLayerCategories

        public List<MapLayerCategoriesVM> GetAllMapLayerCategoriesList(
          ref int listCount,
          List<long> childsUsersIds,
          string mapLayerCategoryTitle = "")
        {
            List<MapLayerCategoriesVM> mapLayerCategoriesVMList = new List<MapLayerCategoriesVM>();

            try
            {

                var list = (from p in teniacoApiDb.MapLayerCategories
                            where p.IsActivated.Value.Equals(true) &&
                            p.IsDeleted.Value.Equals(false)
                            select new MapLayerCategoriesVM
                            {
                                MapLayerCategoryId = p.MapLayerCategoryId,
                                MapLayerCategoryTitle = p.MapLayerCategoryTitle,
                                ParentMapLayerCategoryId = p.ParentMapLayerCategoryId,
                                Description = p.Description,
                                Color = p.Color,
                                UserIdCreator = p.UserIdCreator.Value,
                                CreateEnDate = p.CreateEnDate,
                                CreateTime = p.CreateTime,
                                EditEnDate = p.EditEnDate,
                                EditTime = p.EditTime,
                                UserIdEditor = p.UserIdEditor.Value,
                                RemoveEnDate = p.RemoveEnDate,
                                RemoveTime = p.EditTime,
                                UserIdRemover = p.UserIdRemover.Value,
                                IsActivated = p.IsActivated,
                                IsDeleted = p.IsDeleted
                            })
                            .AsEnumerable();



                if (!string.IsNullOrEmpty(mapLayerCategoryTitle))
                {
                    list = list.Where(a => a.MapLayerCategoryTitle.Contains(mapLayerCategoryTitle));
                }


                mapLayerCategoriesVMList = list.OrderByDescending(s => s.MapLayerCategoryId).ToList();

            }
            catch (Exception ex)
            { }

            return mapLayerCategoriesVMList;
        }

        public List<MapLayerCategoriesVM> GetListOfMapLayerCategories(
            int jtStartIndex,
            int jtPageSize,
            ref int listCount,
            List<long> childsUsersIds,
            string mapLayerCategoryTitle = "",
            string jtSorting = null)
        {
            List<MapLayerCategoriesVM> mapLayerCategoriesVMList = new List<MapLayerCategoriesVM>();


            var list = (from p in teniacoApiDb.MapLayerCategories
                        where p.IsActivated.Value.Equals(true) &&
                              p.IsDeleted.Value.Equals(false)
                        select new MapLayerCategoriesVM
                        {
                            MapLayerCategoryId = p.MapLayerCategoryId,
                            MapLayerCategoryTitle = p.MapLayerCategoryTitle,
                            ParentMapLayerCategoryId = p.ParentMapLayerCategoryId,
                            Description = p.Description,
                            Color = p.Color,
                            UserIdCreator = p.UserIdCreator.Value,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor.Value,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover.Value,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted
                        })
                        .AsEnumerable();



            if (!string.IsNullOrEmpty(mapLayerCategoryTitle))
            {
                list = list.Where(a => a.MapLayerCategoryTitle.Contains(mapLayerCategoryTitle));
            }


            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        mapLayerCategoriesVMList = list.OrderByDescending(s => s.MapLayerCategoryId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                        mapLayerCategoriesVMList = list.OrderByDescending(s => s.MapLayerCategoryId).ToList();
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {
                        switch (jtSorting)
                        {
                            case "MapLayerCategoryTitle ASC":
                                list = list.OrderBy(l => l.MapLayerCategoryTitle);
                                break;
                            case "MapLayerCategoryTitle DESC":
                                list = list.OrderByDescending(l => l.MapLayerCategoryTitle);
                                break;
                        }


                        if (string.IsNullOrEmpty(jtSorting))
                            mapLayerCategoriesVMList = list.OrderByDescending(s => s.MapLayerCategoryId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            mapLayerCategoriesVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {
                        mapLayerCategoriesVMList = list.ToList();
                    }
                }

            }
            catch (Exception exc)
            { }
            return mapLayerCategoriesVMList;
        }


        public int AddToMapLayerCategories(MapLayerCategoriesVM mapLayerCategoriesVM,
             IConsoleBusiness consoleBusiness,
            string domainName)
        {

            try
            {

                if (!teniacoApiDb.MapLayerCategories.Where(c => c.MapLayerCategoryTitle.Equals(mapLayerCategoriesVM.MapLayerCategoryTitle) &&
                     c.ParentMapLayerCategoryId.Equals(mapLayerCategoriesVM.ParentMapLayerCategoryId)).Any())
                {
                    MapLayerCategories mapLayerCategories = _mapper.Map<MapLayerCategoriesVM, MapLayerCategories>(mapLayerCategoriesVM);

                    mapLayerCategories.IsActivated = true;
                    mapLayerCategories.IsDeleted = false;

                    if (mapLayerCategories.ParentMapLayerCategoryId == 0)
                    {
                        mapLayerCategories.ParentMapLayerCategoryId = null;
                    }
                    teniacoApiDb.MapLayerCategories.Add(mapLayerCategories);
                    teniacoApiDb.SaveChanges();

                    return mapLayerCategories.MapLayerCategoryId;
                }

            }
            catch (Exception exc)
            {

            }

            return 0;
        }


        public int UpdateMapLayerCategories(ref MapLayerCategoriesVM mapLayerCategoriesVM,
            List<long> childsUsersIds)
        {
            int mapLayerCategoryId = mapLayerCategoriesVM.MapLayerCategoryId;


            bool? isActivated = mapLayerCategoriesVM.IsActivated.HasValue ? mapLayerCategoriesVM.IsActivated.Value : (bool?)true;
            bool? isDeleted = mapLayerCategoriesVM.IsDeleted.HasValue ? mapLayerCategoriesVM.IsDeleted.Value : (bool?)true;


            string? mapLayerCategoryTitle = !string.IsNullOrEmpty(mapLayerCategoriesVM.MapLayerCategoryTitle) ? mapLayerCategoriesVM.MapLayerCategoryTitle : "";
            int? parentMapLayerCategoryId = mapLayerCategoriesVM.ParentMapLayerCategoryId.HasValue ? mapLayerCategoriesVM.ParentMapLayerCategoryId.Value : (int?)0;

            string? color = !string.IsNullOrEmpty(mapLayerCategoriesVM.Color) ? mapLayerCategoriesVM.Color : "";


            if (teniacoApiDb.MapLayerCategories.Where(n => childsUsersIds.Contains(n.UserIdCreator.Value)).Where(x => x.MapLayerCategoryId.Equals(mapLayerCategoryId)).Any())
            {
                try
                {
                    MapLayerCategories mapLayerCategories = (from a in teniacoApiDb.MapLayerCategories
                                                             where a.MapLayerCategoryId == mapLayerCategoryId
                                                             select a).FirstOrDefault();



                    var selectedMapCategory = teniacoApiDb.MapLayerCategories.Where(c => c.MapLayerCategoryId.Equals(mapLayerCategoryId));


                    if (!selectedMapCategory.Where(c => c.MapLayerCategoryTitle.Equals(mapLayerCategoryTitle)).Any() ||
                        !selectedMapCategory.Where(c => c.ParentMapLayerCategoryId.Equals(parentMapLayerCategoryId)).Any())
                    {
                        if (!teniacoApiDb.MapLayerCategories.Where(c => c.MapLayerCategoryTitle.Equals(mapLayerCategoryTitle) &&
                           c.ParentMapLayerCategoryId.Equals(parentMapLayerCategoryId)).Any())
                        {
                            mapLayerCategories.MapLayerCategoryTitle = mapLayerCategoriesVM.MapLayerCategoryTitle;
                            mapLayerCategories.ParentMapLayerCategoryId = mapLayerCategoriesVM.ParentMapLayerCategoryId;
                            mapLayerCategories.Description = mapLayerCategoriesVM.Description;
                            mapLayerCategories.Color = mapLayerCategoriesVM.Color;

                            mapLayerCategories.EditEnDate = DateTime.Now;
                            mapLayerCategories.EditTime = PersianDate.TimeNow;
                            mapLayerCategories.UserIdEditor = mapLayerCategories.UserIdEditor;
                            mapLayerCategories.IsActivated = isActivated.Value;
                            mapLayerCategories.IsDeleted = isDeleted.Value;


                            teniacoApiDb.Entry<MapLayerCategories>(mapLayerCategories).State = EntityState.Modified;
                            teniacoApiDb.SaveChanges();


                            mapLayerCategoriesVM.UserIdCreator = mapLayerCategories.UserIdCreator;

                            return mapLayerCategories.MapLayerCategoryId;
                        }
                    }
                    else
                    {
                        mapLayerCategories.MapLayerCategoryTitle = mapLayerCategoriesVM.MapLayerCategoryTitle;
                        mapLayerCategories.ParentMapLayerCategoryId = mapLayerCategoriesVM.ParentMapLayerCategoryId;
                        mapLayerCategories.Description = mapLayerCategoriesVM.Description;
                        mapLayerCategories.Color = mapLayerCategoriesVM.Color;

                        mapLayerCategories.EditEnDate = DateTime.Now;
                        mapLayerCategories.EditTime = PersianDate.TimeNow;
                        mapLayerCategories.UserIdEditor = mapLayerCategories.UserIdEditor;
                        mapLayerCategories.IsActivated = isActivated.Value;
                        mapLayerCategories.IsDeleted = isDeleted.Value;


                        teniacoApiDb.Entry<MapLayerCategories>(mapLayerCategories).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();


                        mapLayerCategoriesVM.UserIdCreator = mapLayerCategories.UserIdCreator;

                        return mapLayerCategories.MapLayerCategoryId;
                    }

                }
                catch (Exception ex)
                { }

            }
            return 0;
        }

        public bool ToggleActivationMapLayerCategories(int mapLayerCategoryId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                var mapLayerCategories = (from c in teniacoApiDb.MapLayerCategories
                                          where c.MapLayerCategoryId == mapLayerCategoryId &&
                                          childsUsersIds.Contains(c.UserIdCreator.Value)
                                          select c).FirstOrDefault();



                if (mapLayerCategories != null)
                {
                    mapLayerCategories.IsActivated = !mapLayerCategories.IsActivated;
                    mapLayerCategories.EditEnDate = DateTime.Now;
                    mapLayerCategories.EditTime = PersianDate.TimeNow;
                    mapLayerCategories.UserIdEditor = userId;

                    teniacoApiDb.Entry<MapLayerCategories>(mapLayerCategories).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }


            }
            catch (Exception)
            { }

            return false;
        }

        public bool TemporaryDeleteMapLayerCategories(int mapLayerCategoryId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                var mapLayerCategories = (from a in teniacoApiDb.MapLayerCategories
                                          where a.MapLayerCategoryId == mapLayerCategoryId &&
                                          childsUsersIds.Contains(a.UserIdCreator.Value)
                                          select a).FirstOrDefault();


                if (mapLayerCategories != null)
                {
                    mapLayerCategories.IsDeleted = !mapLayerCategories.IsDeleted;
                    mapLayerCategories.EditEnDate = DateTime.Now;
                    mapLayerCategories.EditTime = PersianDate.TimeNow;
                    mapLayerCategories.UserIdEditor = userId;


                    teniacoApiDb.Entry<MapLayerCategories>(mapLayerCategories).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();


                    return true;
                }
            }
            catch (Exception ex)
            { }
            return false;
        }

        public bool CompleteDeleteMapLayerCategories(int mapLayerCategoryId,
            List<long> childsUsersIds)
        {
            try
            {
                var mapLayerCategories = (from a in teniacoApiDb.MapLayerCategories
                                          where a.MapLayerCategoryId == mapLayerCategoryId &&
                                          childsUsersIds.Contains(a.UserIdCreator.Value)
                                          select a).FirstOrDefault();

                if (mapLayerCategories != null)
                {
                    using (var transaction = teniacoApiDb.Database.BeginTransaction())
                    {
                        try
                        {
                            teniacoApiDb.MapLayerCategories.Remove(mapLayerCategories);
                            teniacoApiDb.SaveChanges();


                            transaction.Commit();

                            return true;
                        }
                        catch (Exception)
                        {
                            transaction.Rollback();
                        }
                    }
                }
            }
            catch (Exception ex)
            { }

            return false;
        }

        public MapLayerCategoriesVM GetMapLayerCategoryWithMapLayerCategoryId(
            int? mapLayerCategoryId,
            List<long> childsUsersIds)
        {
            MapLayerCategoriesVM mapLayerCategoriesVM = new MapLayerCategoriesVM();

            try
            {
                mapLayerCategoriesVM = _mapper.Map<MapLayerCategories,
                    MapLayerCategoriesVM>(teniacoApiDb.MapLayerCategories
                    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                     .Where(e => e.MapLayerCategoryId.Equals(mapLayerCategoryId)).FirstOrDefault());

            }
            catch (Exception exc)
            { }

            return mapLayerCategoriesVM;
        }

        public List<ChartMapCatNodeWithDataVM> GetAllMapLayerCategoriesHierarchical()
        {
            List<ChartMapCatNodeWithDataVM> chartMapCatNodeWithDataVMList = new List<ChartMapCatNodeWithDataVM>();

            try
            {
                chartMapCatNodeWithDataVMList = teniacoApiDb.MapLayerCategories.Select(a => new ChartMapCatNodeWithDataVM
                {
                    id = a.MapLayerCategoryId.ToString(),
                    name = a.MapLayerCategoryTitle,
                    parent = a.ParentMapLayerCategoryId == null ? "#" : a.ParentMapLayerCategoryId.ToString()

                }).ToList();
            }
            catch (Exception exc)
            { }

            return chartMapCatNodeWithDataVMList;
        }

        #region old code for GetListOfPropertiesPricesForMap


        //        public List<PropertiesPricesForMapVM> GetListOfPropertiesPricesForMap(List<long> childsUsersIds,
        //            int Platform,//all=0, teniaco=1, melkavan=2
        //            long? PriceFrom,
        //            long? PriceTo,
        //            int? StateId,
        //            int? CityId,
        //            int? ZoneId,
        //            int? DistrictId,
        //            int? typeOfUseId,
        //            int? PropertyTypeId)
        //        {
        //            List<PropertiesPricesForMapVM> propertiesPricesForMapVMList = new List<PropertiesPricesForMapVM>();

        //            try
        //            {
        //                string sp = "";

        //                switch (Platform)
        //                {
        //                    case 0://all
        //                        sp = @"
        //                        (select Advertisement.AdvertisementId as PropertyId, AdvertisementTitle as PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
        //                        	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
        //                        (
        //                        	select AdvertisementId,  MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  from MelkavanDbKazemi.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
        //                        	group by AdvertisementId
        //                        ) tmpAdvertisementPricesHistories
        //                        	inner join MelkavanDbKazemi.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
        //                        	inner join MelkavanDbKazemi.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
        //                        	inner join MelkavanDbKazemi.dbo.AdvertisementAddress on Advertisement.AdvertisementId = AdvertisementAddress.AdvertisementId
        //                        	)
        //                        	union all 
        //                        (select Properties.PropertyId, PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
        //                        	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
        //                        (
        //                        	select PropertyId,  MAX(PropertyPriceHistoryId) as PropertyPriceHistoryId  from TeniacoDbKazemi.dbo.PropertiesPricesHistories tmpPropertiesPricesHistories
        //                        	group by PropertyId
        //                        ) tmpPropertiesPricesHistories
        //                        	inner join TeniacoDbKazemi.dbo.Properties on TeniacoDbKazemi.dbo.Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
        //                        	inner join TeniacoDbKazemi.dbo.PropertiesPricesHistories on tmpPropertiesPricesHistories.PropertyPriceHistoryId = TeniacoDbKazemi.dbo.PropertiesPricesHistories.PropertyPriceHistoryId
        //                        	inner join TeniacoDbKazemi.dbo.PropertyAddress on TeniacoDbKazemi.dbo.Properties.PropertyId = TeniacoDbKazemi.dbo.PropertyAddress.PropertyId
        //                        	)
        //                        ";
        //                        break;
        //                    case 1://teniaco
        //                        sp = @"
        //select Properties.PropertyId, PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
        //	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
        //(
        //	select PropertyId,  MAX(PropertyPriceHistoryId) as PropertyPriceHistoryId  from PropertiesPricesHistories tmpPropertiesPricesHistories
        //	group by PropertyId
        //) tmpPropertiesPricesHistories
        //	inner join Properties on Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
        //	inner join PropertiesPricesHistories on tmpPropertiesPricesHistories.PropertyPriceHistoryId = PropertiesPricesHistories.PropertyPriceHistoryId
        //	inner join PropertyAddress on Properties.PropertyId = PropertyAddress.PropertyId
        //";
        //                        break;
        //                    case 2://melkavan

        //                        sp = @"
        //                            select Advertisement.AdvertisementId as PropertyId, AdvertisementTitle as PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
        //                            	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
        //                            (
        //                            	select AdvertisementId,  MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  from MelkavanDbKazemi.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
        //                            	group by AdvertisementId
        //                            ) tmpAdvertisementPricesHistories
        //                            	inner join MelkavanDbKazemi.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
        //                            	inner join MelkavanDbKazemi.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
        //                            	inner join MelkavanDbKazemi.dbo.AdvertisementAddress on Advertisement.AdvertisementId = Advertisement.AdvertisementId
        //                            ";
        //                        break;
        //                }

        //                var propertiesPricesForMapList = teniacoApiDb.PropertiesPricesForMapVM.FromSqlRaw(sp).AsQueryable();

        //                #region where clause

        //                if (PriceFrom.HasValue)
        //                    if (PriceFrom > 0)
        //                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.LastPrice.HasValue).Where(p => p.LastPrice.Value >= PriceFrom.Value);

        //                if (PriceTo.HasValue)
        //                    if (PriceTo > 0)
        //                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.LastPrice.HasValue).Where(p => p.LastPrice.Value >= PriceTo.Value);

        //                if (StateId.HasValue)
        //                    if (StateId > 0)
        //                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.StateId.HasValue).Where(p => p.StateId.Value == StateId.Value);

        //                if (CityId.HasValue)
        //                    if (CityId > 0)
        //                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.CityId.HasValue).Where(p => p.CityId.Value == CityId.Value);

        //                if (ZoneId.HasValue)
        //                    if (ZoneId > 0)
        //                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.ZoneId.HasValue).Where(p => p.ZoneId.Value == ZoneId.Value);

        //                if (DistrictId.HasValue)
        //                    if (DistrictId > 0)
        //                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.DistrictId.HasValue).Where(p => p.DistrictId.Value == DistrictId.Value);

        //                if (typeOfUseId.HasValue)
        //                    if (typeOfUseId > 0)
        //                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.TypeOfUseId.HasValue).Where(p => p.TypeOfUseId.Value == typeOfUseId.Value);

        //                if (PropertyTypeId.HasValue)
        //                    if (PropertyTypeId > 0)
        //                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.PropertyTypeId == PropertyTypeId.Value);

        //                #endregion

        //                propertiesPricesForMapVMList = propertiesPricesForMapList.ToList();
        //            }
        //            catch (Exception exc)
        //            { }

        //            return propertiesPricesForMapVMList;
        //        }
        #endregion


        #region Sina's Code


        //public List<PropertiesPricesForMapVM> GetListOfPropertiesPricesForMap(List<long> childsUsersIds,
        //    int Platform,//all=0, teniaco=1, melkavan=2
        //    long? PriceFrom,
        //    long? PriceTo,
        //    int? StateId,
        //    int? CityId,
        //    int? ZoneId,
        //    int? DistrictId,
        //    int? typeOfUseId,
        //    int? PropertyTypeId)
        //{
        //    List<PropertiesPricesForMapVM> propertiesPricesForMapVMList = new List<PropertiesPricesForMapVM>();

        //    try
        //    {
        //        string sp = "";

        //        switch (Platform)
        //        {
        //            case 0://all
        //                sp = @"
        //                            (select Advertisement.AdvertisementId as PropertyId, AdvertisementTitle as PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
        //                            	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
        //                            (
        //                            	select AdvertisementId,  MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  from MelkavanDbHaghighi.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
        //                            	group by AdvertisementId
        //                            ) tmpAdvertisementPricesHistories
        //                            	inner join MelkavanDbHaghighi.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
        //                            	inner join MelkavanDbHaghighi.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
        //                            	inner join MelkavanDbHaghighi.dbo.AdvertisementAddress on Advertisement.AdvertisementId = AdvertisementAddress.AdvertisementId
        //                            	)
        //                            	union all 
        //                            (select Properties.PropertyId, PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
        //                            	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
        //                            (
        //                            	select PropertyId,  MAX(PropertyPriceHistoryId) as PropertyPriceHistoryId  from TeniacoDbHaghighi.dbo.PropertiesPricesHistories tmpPropertiesPricesHistories
        //                            	group by PropertyId
        //                            ) tmpPropertiesPricesHistories
        //                            	inner join TeniacoDbHaghighi.dbo.Properties on TeniacoDbHaghighi.dbo.Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
        //                            	inner join TeniacoDbHaghighi.dbo.PropertiesPricesHistories on tmpPropertiesPricesHistories.PropertyPriceHistoryId = TeniacoDbHaghighi.dbo.PropertiesPricesHistories.PropertyPriceHistoryId
        //                            	inner join TeniacoDbHaghighi.dbo.PropertyAddress on TeniacoDbHaghighi.dbo.Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertyAddress.PropertyId
        //                            	)
        //                            ";
        //                break;
        //            case 1://teniaco
        //                sp = @"
        //                            select Properties.PropertyId, PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
        //                            	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
        //                            (
        //                            	select PropertyId,  MAX(PropertyPriceHistoryId) as PropertyPriceHistoryId  from PropertiesPricesHistories tmpPropertiesPricesHistories
        //                            	group by PropertyId
        //                            ) tmpPropertiesPricesHistories
        //                            	inner join Properties on Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
        //                            	inner join PropertiesPricesHistories on tmpPropertiesPricesHistories.PropertyPriceHistoryId = PropertiesPricesHistories.PropertyPriceHistoryId
        //                            	inner join PropertyAddress on Properties.PropertyId = PropertyAddress.PropertyId
        //                            ";
        //                break;
        //            case 2://melkavan
        //                sp = @"
        //                            select Advertisement.AdvertisementId as PropertyId, AdvertisementTitle as PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
        //                            	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
        //                            (
        //                            	select AdvertisementId,  MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  from MelkavanDbHaghighi.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
        //                            	group by AdvertisementId
        //                            ) tmpAdvertisementPricesHistories
        //                            	inner join MelkavanDbHaghighi.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
        //                            	inner join MelkavanDbHaghighi.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
        //                            	inner join MelkavanDbHaghighi.dbo.AdvertisementAddress on Advertisement.AdvertisementId = Advertisement.AdvertisementId
        //                            ";
        //                break;
        //            case 3: //ONLY FOR MELKAVAN & SELL ONLY - SINA QUERY
        //                    // *Note : In this query LastPrice is considered as Total Price And CalculatedOfferPrice is considered as Price per metter
        //                sp = @"(
        //                            select 
        //           AdvertisementDetails.AdvertisementTypeId,
        //                                Advertisement.AdvertisementId as PropertyId, 
        //                                AdvertisementTitle as PropertyCodeName, 
        //                                1 as 'ShowInMelkavan', 
        //        OfferPrice,
        //                                CalculatedOfferPrice, 
        //                                OfferPriceType, 
        //                                OfferPrice as 'LastPrice', 
        //        convert(bigint, 0) as 'RentPrice',
        //        convert(bigint, 0) as 'DepositPrice',
        //                                StateId, 
        //                                CityId, 
        //                                ZoneId, 
        //                                DistrictId, 
        //                                LocationLat, 
        //                                LocationLon, 
        //                                PropertyTypeId, 
        //                                TypeOfUseId 
        //                            from 
        //                                (
        //                                    select 
        //                                        AdvertisementId,  
        //                                        MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  
        //                                    from 
        //                                        MelkavanDbHaghighi.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
        //                                    group by 
        //                                        AdvertisementId
        //                                ) tmpAdvertisementPricesHistories
        //                                inner join MelkavanDbHaghighi.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
        //                                inner join MelkavanDbHaghighi.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
        //                                inner join MelkavanDbHaghighi.dbo.AdvertisementAddress on Advertisement.AdvertisementId = AdvertisementAddress.AdvertisementId
        //                        		inner join MelkavanDbHaghighi.dbo.AdvertisementDetails on Advertisement.AdvertisementId = AdvertisementDetails.AdvertisementId

        //                        		where MelkavanDbHaghighi.dbo.AdvertisementDetails.AdvertisementTypeId = 2
        //                        )
        //                        union all 
        //                        (
        //                            SELECT 
        //    PropertiesDetails.AdvertisementTypeId,
        //    Properties.PropertyId, 
        //    PropertyCodeName, 
        //    ShowInMelkavan, 
        //    OfferPrice,
        //    CASE OfferPriceType 
        //        WHEN '0' THEN OfferPrice / 10 
        //        ELSE CalculatedOfferPrice / 10 
        //    END AS CalculatedOfferPrice,
        //    OfferPriceType, 
        //    CASE OfferPriceType 
        //        WHEN '0' THEN CalculatedOfferPrice / 10 
        //        ELSE OfferPrice / 10 
        //    END AS LastPrice, 
        //    CONVERT(BIGINT, 0) AS 'RentPrice',
        //    CONVERT(BIGINT, 0) AS 'DepositPrice',
        //    StateId, 
        //    CityId, 
        //    ZoneId, 
        //    DistrictId, 
        //    LocationLat, 
        //    LocationLon, 
        //    PropertyTypeId, 
        //    TypeOfUseId 
        //FROM 
        //    (
        //        SELECT 
        //            PropertyId,  
        //            MAX(PropertyPriceHistoryId) AS PropertyPriceHistoryId  
        //        FROM 
        //            TeniacoDbHaghighi.dbo.PropertiesPricesHistories 
        //        GROUP BY 
        //            PropertyId 
        //    ) tmpPropertiesPricesHistories 
        //    INNER JOIN TeniacoDbHaghighi.dbo.Properties 
        //        ON TeniacoDbHaghighi.dbo.Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
        //    INNER JOIN TeniacoDbHaghighi.dbo.PropertiesPricesHistories 
        //        ON tmpPropertiesPricesHistories.PropertyPriceHistoryId = TeniacoDbHaghighi.dbo.PropertiesPricesHistories.PropertyPriceHistoryId
        //    INNER JOIN TeniacoDbHaghighi.dbo.PropertyAddress 
        //        ON TeniacoDbHaghighi.dbo.Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertyAddress.PropertyId
        //    INNER JOIN TeniacoDbHaghighi.dbo.PropertiesDetails 
        //        ON TeniacoDbHaghighi.dbo.Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertiesDetails.PropertyId
        //WHERE 
        //    TeniacoDbHaghighi.dbo.Properties.ShowInMelkavan = 1 
        //    AND TeniacoDbHaghighi.dbo.PropertiesDetails.AdvertisementTypeId = 2
        //                        )";
        //                break;
        //            case 4: // ONLY FOR MELKAVAN & RENT ONLY - SINA QUERY
        //                sp = @"(
        //                            select 
        //                                AdvertisementDetails.AdvertisementTypeId,
        //                                Advertisement.AdvertisementId as PropertyId, 
        //                                AdvertisementTitle as PropertyCodeName, 
        //                                OfferPrice, 
        //                                1 as 'ShowInMelkavan', 
        //                                CalculatedOfferPrice, 
        //                                OfferPriceType, 
        //        CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice,
        //                                RentPrice, 
        //        DepositPrice,
        //                                StateId, 
        //                                CityId, 
        //                                ZoneId, 
        //                                DistrictId, 
        //                                LocationLat, 
        //                                LocationLon, 
        //                                PropertyTypeId, 
        //                                TypeOfUseId 
        //                            from 
        //                                (
        //                                    select 
        //                                        AdvertisementId,  
        //                                        MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  
        //                                    from 
        //                                        MelkavanDbHaghighi.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
        //                                    group by 
        //                                        AdvertisementId
        //                                ) tmpAdvertisementPricesHistories
        //                                inner join MelkavanDbHaghighi.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
        //                                inner join MelkavanDbHaghighi.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
        //                                inner join MelkavanDbHaghighi.dbo.AdvertisementAddress on Advertisement.AdvertisementId = AdvertisementAddress.AdvertisementId
        //                        		inner join MelkavanDbHaghighi.dbo.AdvertisementDetails on Advertisement.AdvertisementId = AdvertisementDetails.AdvertisementId

        //                        		where MelkavanDbHaghighi.dbo.AdvertisementDetails.AdvertisementTypeId = 1
        //                        )
        //                        union all 
        //                        (
        //                            select 
        //                                PropertiesDetails.AdvertisementTypeId,
        //                                Properties.PropertyId, 
        //                                PropertyCodeName, 
        //                                OfferPrice, 
        //                                ShowInMelkavan, 
        //                                CalculatedOfferPrice, 
        //                                OfferPriceType, 
        //        CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice,
        //                                RentPrice, 
        //        DepositPrice,
        //                                StateId, 
        //                                CityId, 
        //                                ZoneId, 
        //                                DistrictId, 
        //                                LocationLat, 
        //                                LocationLon, 
        //                                PropertyTypeId, 
        //                                TypeOfUseId 
        //                            from 
        //                                (
        //                                    select 
        //                                        PropertyId,  
        //                                        MAX(PropertyPriceHistoryId) as PropertyPriceHistoryId  
        //                                    from 
        //                                        TeniacoDbHaghighi.dbo.PropertiesPricesHistories tmpPropertiesPricesHistories 
        //                                    group by 
        //                                        PropertyId 
        //                                ) tmpPropertiesPricesHistories 
        //                                inner join TeniacoDbHaghighi.dbo.Properties on TeniacoDbHaghighi.dbo.Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
        //                                inner join TeniacoDbHaghighi.dbo.PropertiesPricesHistories on tmpPropertiesPricesHistories.PropertyPriceHistoryId = TeniacoDbHaghighi.dbo.PropertiesPricesHistories.PropertyPriceHistoryId
        //                                inner join TeniacoDbHaghighi.dbo.PropertyAddress on TeniacoDbHaghighi.dbo.Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertyAddress.PropertyId
        //                        		inner join TeniacoDbHaghighi.dbo.PropertiesDetails on TeniacoDbHaghighi.dbo.Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertiesDetails.PropertyId
        //                            where 
        //                                TeniacoDbHaghighi.dbo.Properties.ShowInMelkavan = 1 AND TeniacoDbHaghighi.dbo.PropertiesDetails.AdvertisementTypeId= 1
        //                        )";
        //                break;
        //        }

        //        var propertiesPricesForMapList = teniacoApiDb.PropertiesPricesForMapVM.FromSqlRaw(sp).AsQueryable();

        //        #region where clause

        //        if (PriceFrom.HasValue)
        //            if (PriceFrom > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.LastPrice.HasValue).Where(p => p.LastPrice.Value >= PriceFrom.Value);

        //        if (PriceTo.HasValue)
        //            if (PriceTo > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.LastPrice.HasValue).Where(p => p.LastPrice.Value >= PriceTo.Value);

        //        if (StateId.HasValue)
        //            if (StateId > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.StateId.HasValue).Where(p => p.StateId.Value == StateId.Value);

        //        if (CityId.HasValue)
        //            if (CityId > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.CityId.HasValue).Where(p => p.CityId.Value == CityId.Value);

        //        if (ZoneId.HasValue)
        //            if (ZoneId > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.ZoneId.HasValue).Where(p => p.ZoneId.Value == ZoneId.Value);

        //        if (DistrictId.HasValue)
        //            if (DistrictId > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.DistrictId.HasValue).Where(p => p.DistrictId.Value == DistrictId.Value);

        //        if (typeOfUseId.HasValue)
        //            if (typeOfUseId > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.TypeOfUseId.HasValue).Where(p => p.TypeOfUseId.Value == typeOfUseId.Value);

        //        if (PropertyTypeId.HasValue)
        //            if (PropertyTypeId > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.PropertyTypeId == PropertyTypeId.Value);

        //        #endregion

        //        propertiesPricesForMapVMList = propertiesPricesForMapList.ToList();
        //    }
        //    catch (Exception exc)
        //    { }

        //    return propertiesPricesForMapVMList;
        //}

        #endregion



        #region Ghaliany's Code


        //public List<PropertiesPricesForMapVM> GetListOfPropertiesPricesForMap(List<long> childsUsersIds,
        //    int Platform,//all=0, teniaco=1, melkavan=2
        //    long? PriceFrom,
        //    long? PriceTo,
        //    int? StateId,
        //    int? CityId,
        //    int? ZoneId,
        //    int? DistrictId,
        //    int? typeOfUseId,
        //    int? PropertyTypeId)
        //{
        //    List<PropertiesPricesForMapVM> propertiesPricesForMapVMList = new List<PropertiesPricesForMapVM>();

        //    try
        //    {
        //        string sp = "";

        //        switch (Platform)
        //        {
        //            case 0://all
        //                sp = @"
        //                            (select Advertisement.AdvertisementId as PropertyId, AdvertisementTitle as PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
        //                            	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
        //                            (
        //                            	select AdvertisementId,  MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  from MelkavanDbGhaliany.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
        //                            	group by AdvertisementId
        //                            ) tmpAdvertisementPricesHistories
        //                            	inner join MelkavanDbGhaliany.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
        //                            	inner join MelkavanDbGhaliany.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
        //                            	inner join MelkavanDbGhaliany.dbo.AdvertisementAddress on Advertisement.AdvertisementId = AdvertisementAddress.AdvertisementId
        //                            	)
        //                            	union all 
        //                            (select Properties.PropertyId, PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
        //                            	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
        //                            (
        //                            	select PropertyId,  MAX(PropertyPriceHistoryId) as PropertyPriceHistoryId  from TeniacoDbGhaliany.dbo.PropertiesPricesHistories tmpPropertiesPricesHistories
        //                            	group by PropertyId
        //                            ) tmpPropertiesPricesHistories
        //                            	inner join TeniacoDbGhaliany.dbo.Properties on TeniacoDbGhaliany.dbo.Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
        //                            	inner join TeniacoDbGhaliany.dbo.PropertiesPricesHistories on tmpPropertiesPricesHistories.PropertyPriceHistoryId = TeniacoDbGhaliany.dbo.PropertiesPricesHistories.PropertyPriceHistoryId
        //                            	inner join TeniacoDbGhaliany.dbo.PropertyAddress on TeniacoDbGhaliany.dbo.Properties.PropertyId = TeniacoDbGhaliany.dbo.PropertyAddress.PropertyId
        //                            	)
        //                            ";
        //                break;
        //            case 1://teniaco
        //                sp = @"
        //                            select Properties.PropertyId, PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
        //                            	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
        //                            (
        //                            	select PropertyId,  MAX(PropertyPriceHistoryId) as PropertyPriceHistoryId  from PropertiesPricesHistories tmpPropertiesPricesHistories
        //                            	group by PropertyId
        //                            ) tmpPropertiesPricesHistories
        //                            	inner join Properties on Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
        //                            	inner join PropertiesPricesHistories on tmpPropertiesPricesHistories.PropertyPriceHistoryId = PropertiesPricesHistories.PropertyPriceHistoryId
        //                            	inner join PropertyAddress on Properties.PropertyId = PropertyAddress.PropertyId
        //                            ";
        //                break;
        //            case 2://melkavan
        //                sp = @"
        //                            select Advertisement.AdvertisementId as PropertyId, AdvertisementTitle as PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
        //                            	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
        //                            (
        //                            	select AdvertisementId,  MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  from MelkavanDbGhaliany.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
        //                            	group by AdvertisementId
        //                            ) tmpAdvertisementPricesHistories
        //                            	inner join MelkavanDbGhaliany.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
        //                            	inner join MelkavanDbGhaliany.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
        //                            	inner join MelkavanDbGhaliany.dbo.AdvertisementAddress on Advertisement.AdvertisementId = Advertisement.AdvertisementId
        //                            ";
        //                break;
        //            case 3: //ONLY FOR MELKAVAN & SELL ONLY - SINA QUERY
        //                    // *Note : In this query LastPrice is considered as Total Price And CalculatedOfferPrice is considered as Price per metter
        //                sp = @"(
        //                            select 
        //           AdvertisementDetails.AdvertisementTypeId,
        //                                Advertisement.AdvertisementId as PropertyId, 
        //                                AdvertisementTitle as PropertyCodeName, 
        //                                1 as 'ShowInMelkavan', 
        //        OfferPrice,
        //                                CalculatedOfferPrice, 
        //                                OfferPriceType, 
        //                                OfferPrice as 'LastPrice', 
        //        convert(bigint, 0) as 'RentPrice',
        //        convert(bigint, 0) as 'DepositPrice',
        //                                StateId, 
        //                                CityId, 
        //                                ZoneId, 
        //                                DistrictId, 
        //                                LocationLat, 
        //                                LocationLon, 
        //                                PropertyTypeId, 
        //                                TypeOfUseId 
        //                            from 
        //                                (
        //                                    select 
        //                                        AdvertisementId,  
        //                                        MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  
        //                                    from 
        //                                        MelkavanDbGhaliany.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
        //                                    group by 
        //                                        AdvertisementId
        //                                ) tmpAdvertisementPricesHistories
        //                                inner join MelkavanDbGhaliany.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
        //                                inner join MelkavanDbGhaliany.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
        //                                inner join MelkavanDbGhaliany.dbo.AdvertisementAddress on Advertisement.AdvertisementId = AdvertisementAddress.AdvertisementId
        //                        		inner join MelkavanDbGhaliany.dbo.AdvertisementDetails on Advertisement.AdvertisementId = AdvertisementDetails.AdvertisementId

        //                        		where MelkavanDbGhaliany.dbo.AdvertisementDetails.AdvertisementTypeId = 2
        //                        )
        //                        union all 
        //                        (
        //                            SELECT 
        //    PropertiesDetails.AdvertisementTypeId,
        //    Properties.PropertyId, 
        //    PropertyCodeName, 
        //    ShowInMelkavan, 
        //    OfferPrice,
        //    CASE OfferPriceType 
        //        WHEN '0' THEN OfferPrice / 10 
        //        ELSE CalculatedOfferPrice / 10 
        //    END AS CalculatedOfferPrice,
        //    OfferPriceType, 
        //    CASE OfferPriceType 
        //        WHEN '0' THEN CalculatedOfferPrice / 10 
        //        ELSE OfferPrice / 10 
        //    END AS LastPrice, 
        //    CONVERT(BIGINT, 0) AS 'RentPrice',
        //    CONVERT(BIGINT, 0) AS 'DepositPrice',
        //    StateId, 
        //    CityId, 
        //    ZoneId, 
        //    DistrictId, 
        //    LocationLat, 
        //    LocationLon, 
        //    PropertyTypeId, 
        //    TypeOfUseId 
        //FROM 
        //    (
        //        SELECT 
        //            PropertyId,  
        //            MAX(PropertyPriceHistoryId) AS PropertyPriceHistoryId  
        //        FROM 
        //            TeniacoDbGhaliany.dbo.PropertiesPricesHistories 
        //        GROUP BY 
        //            PropertyId 
        //    ) tmpPropertiesPricesHistories 
        //    INNER JOIN TeniacoDbGhaliany.dbo.Properties 
        //        ON TeniacoDbGhaliany.dbo.Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
        //    INNER JOIN TeniacoDbGhaliany.dbo.PropertiesPricesHistories 
        //        ON tmpPropertiesPricesHistories.PropertyPriceHistoryId = TeniacoDbGhaliany.dbo.PropertiesPricesHistories.PropertyPriceHistoryId
        //    INNER JOIN TeniacoDbGhaliany.dbo.PropertyAddress 
        //        ON TeniacoDbGhaliany.dbo.Properties.PropertyId = TeniacoDbGhaliany.dbo.PropertyAddress.PropertyId
        //    INNER JOIN TeniacoDbGhaliany.dbo.PropertiesDetails 
        //        ON TeniacoDbGhaliany.dbo.Properties.PropertyId = TeniacoDbGhaliany.dbo.PropertiesDetails.PropertyId
        //WHERE 
        //    TeniacoDbGhaliany.dbo.Properties.ShowInMelkavan = 1 
        //    AND TeniacoDbGhaliany.dbo.PropertiesDetails.AdvertisementTypeId = 2
        //                        )";
        //                break;
        //            case 4: // ONLY FOR MELKAVAN & RENT ONLY - SINA QUERY
        //                sp = @"(
        //                            select 
        //                                AdvertisementDetails.AdvertisementTypeId,
        //                                Advertisement.AdvertisementId as PropertyId, 
        //                                AdvertisementTitle as PropertyCodeName, 
        //                                OfferPrice, 
        //                                1 as 'ShowInMelkavan', 
        //                                CalculatedOfferPrice, 
        //                                OfferPriceType, 
        //        CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice,
        //                                RentPrice, 
        //        DepositPrice,
        //                                StateId, 
        //                                CityId, 
        //                                ZoneId, 
        //                                DistrictId, 
        //                                LocationLat, 
        //                                LocationLon, 
        //                                PropertyTypeId, 
        //                                TypeOfUseId 
        //                            from 
        //                                (
        //                                    select 
        //                                        AdvertisementId,  
        //                                        MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  
        //                                    from 
        //                                        MelkavanDbGhaliany.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
        //                                    group by 
        //                                        AdvertisementId
        //                                ) tmpAdvertisementPricesHistories
        //                                inner join MelkavanDbGhaliany.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
        //                                inner join MelkavanDbGhaliany.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
        //                                inner join MelkavanDbGhaliany.dbo.AdvertisementAddress on Advertisement.AdvertisementId = AdvertisementAddress.AdvertisementId
        //                        		inner join MelkavanDbGhaliany.dbo.AdvertisementDetails on Advertisement.AdvertisementId = AdvertisementDetails.AdvertisementId

        //                        		where MelkavanDbGhaliany.dbo.AdvertisementDetails.AdvertisementTypeId = 1
        //                        )
        //                        union all 
        //                        (
        //                            select 
        //                                PropertiesDetails.AdvertisementTypeId,
        //                                Properties.PropertyId, 
        //                                PropertyCodeName, 
        //                                OfferPrice, 
        //                                ShowInMelkavan, 
        //                                CalculatedOfferPrice, 
        //                                OfferPriceType, 
        //        CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice,
        //                                RentPrice, 
        //        DepositPrice,
        //                                StateId, 
        //                                CityId, 
        //                                ZoneId, 
        //                                DistrictId, 
        //                                LocationLat, 
        //                                LocationLon, 
        //                                PropertyTypeId, 
        //                                TypeOfUseId 
        //                            from 
        //                                (
        //                                    select 
        //                                        PropertyId,  
        //                                        MAX(PropertyPriceHistoryId) as PropertyPriceHistoryId  
        //                                    from 
        //                                        TeniacoDbGhaliany.dbo.PropertiesPricesHistories tmpPropertiesPricesHistories 
        //                                    group by 
        //                                        PropertyId 
        //                                ) tmpPropertiesPricesHistories 
        //                                inner join TeniacoDbGhaliany.dbo.Properties on TeniacoDbGhaliany.dbo.Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
        //                                inner join TeniacoDbGhaliany.dbo.PropertiesPricesHistories on tmpPropertiesPricesHistories.PropertyPriceHistoryId = TeniacoDbGhaliany.dbo.PropertiesPricesHistories.PropertyPriceHistoryId
        //                                inner join TeniacoDbGhaliany.dbo.PropertyAddress on TeniacoDbGhaliany.dbo.Properties.PropertyId = TeniacoDbGhaliany.dbo.PropertyAddress.PropertyId
        //                        		inner join TeniacoDbGhaliany.dbo.PropertiesDetails on TeniacoDbGhaliany.dbo.Properties.PropertyId = TeniacoDbGhaliany.dbo.PropertiesDetails.PropertyId
        //                            where 
        //                                TeniacoDbGhaliany.dbo.Properties.ShowInMelkavan = 1 AND TeniacoDbGhaliany.dbo.PropertiesDetails.AdvertisementTypeId= 1
        //                        )";
        //                break;
        //        }

        //        var propertiesPricesForMapList = teniacoApiDb.PropertiesPricesForMapVM.FromSqlRaw(sp).AsQueryable();

        //        #region where clause

        //        if (PriceFrom.HasValue)
        //            if (PriceFrom > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.LastPrice.HasValue).Where(p => p.LastPrice.Value >= PriceFrom.Value);

        //        if (PriceTo.HasValue)
        //            if (PriceTo > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.LastPrice.HasValue).Where(p => p.LastPrice.Value >= PriceTo.Value);

        //        if (StateId.HasValue)
        //            if (StateId > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.StateId.HasValue).Where(p => p.StateId.Value == StateId.Value);

        //        if (CityId.HasValue)
        //            if (CityId > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.CityId.HasValue).Where(p => p.CityId.Value == CityId.Value);

        //        if (ZoneId.HasValue)
        //            if (ZoneId > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.ZoneId.HasValue).Where(p => p.ZoneId.Value == ZoneId.Value);

        //        if (DistrictId.HasValue)
        //            if (DistrictId > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.DistrictId.HasValue).Where(p => p.DistrictId.Value == DistrictId.Value);

        //        if (typeOfUseId.HasValue)
        //            if (typeOfUseId > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.TypeOfUseId.HasValue).Where(p => p.TypeOfUseId.Value == typeOfUseId.Value);

        //        if (PropertyTypeId.HasValue)
        //            if (PropertyTypeId > 0)
        //                propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.PropertyTypeId == PropertyTypeId.Value);

        //        #endregion

        //        propertiesPricesForMapVMList = propertiesPricesForMapList.ToList();
        //    }
        //    catch (Exception exc)
        //    { }

        //    return propertiesPricesForMapVMList;
        //}

        #endregion


        public List<PropertiesPricesForMapVM> GetListOfPropertiesPricesForMap(List<long> childsUsersIds,
                   int Platform,//all=0, teniaco=1, melkavan=2
                   long? PriceFrom,
                   long? PriceTo,
                   int? StateId,
                   int? CityId,
                   int? ZoneId,
                   int? DistrictId,
                   int? typeOfUseId,
                   int? PropertyTypeId)
        {
            List<PropertiesPricesForMapVM> propertiesPricesForMapVMList = new List<PropertiesPricesForMapVM>();

            try
            {
                string sp = "";

                switch (Platform)
                {
                    case 0://all
                        sp = @"
                                    (select Advertisement.AdvertisementId as PropertyId, AdvertisementTitle as PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
                                    	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
                                    (
                                    	select AdvertisementId,  MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  from MelkavanDb.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
                                    	group by AdvertisementId
                                    ) tmpAdvertisementPricesHistories
                                    	inner join MelkavanDb.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
                                    	inner join MelkavanDb.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
                                    	inner join MelkavanDb.dbo.AdvertisementAddress on Advertisement.AdvertisementId = AdvertisementAddress.AdvertisementId
                                    	)
                                    	union all 
                                    (select Properties.PropertyId, PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
                                    	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
                                    (
                                    	select PropertyId,  MAX(PropertyPriceHistoryId) as PropertyPriceHistoryId  from TeniacoDb.dbo.PropertiesPricesHistories tmpPropertiesPricesHistories
                                    	group by PropertyId
                                    ) tmpPropertiesPricesHistories
                                    	inner join TeniacoDb.dbo.Properties on TeniacoDb.dbo.Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
                                    	inner join TeniacoDb.dbo.PropertiesPricesHistories on tmpPropertiesPricesHistories.PropertyPriceHistoryId = TeniacoDb.dbo.PropertiesPricesHistories.PropertyPriceHistoryId
                                    	inner join TeniacoDb.dbo.PropertyAddress on TeniacoDb.dbo.Properties.PropertyId = TeniacoDb.dbo.PropertyAddress.PropertyId
                                    	)
                                    ";
                        break;
                    case 1://teniaco
                        sp = @"
                                    select Properties.PropertyId, PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
                                    	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
                                    (
                                    	select PropertyId,  MAX(PropertyPriceHistoryId) as PropertyPriceHistoryId  from PropertiesPricesHistories tmpPropertiesPricesHistories
                                    	group by PropertyId
                                    ) tmpPropertiesPricesHistories
                                    	inner join Properties on Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
                                    	inner join PropertiesPricesHistories on tmpPropertiesPricesHistories.PropertyPriceHistoryId = PropertiesPricesHistories.PropertyPriceHistoryId
                                    	inner join PropertyAddress on Properties.PropertyId = PropertyAddress.PropertyId
                                    ";
                        break;
                    case 2://melkavan
                        sp = @"
                                    select Advertisement.AdvertisementId as PropertyId, AdvertisementTitle as PropertyCodeName, OfferPrice, CalculatedOfferPrice, OfferPriceType, CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice, 
                                    	StateId, CityId, ZoneId, DistrictId, LocationLat, LocationLon, PropertyTypeId, TypeOfUseId from 
                                    (
                                    	select AdvertisementId,  MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  from MelkavanDb.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
                                    	group by AdvertisementId
                                    ) tmpAdvertisementPricesHistories
                                    	inner join MelkavanDb.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
                                    	inner join MelkavanDb.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
                                    	inner join MelkavanDb.dbo.AdvertisementAddress on Advertisement.AdvertisementId = Advertisement.AdvertisementId
                                    ";
                        break;
                    case 3: //ONLY FOR MELKAVAN & SELL ONLY - SINA QUERY
                            // *Note : In this query LastPrice is considered as Total Price And CalculatedOfferPrice is considered as Price per metter
                        sp = @"(
                                    select 
                   AdvertisementDetails.AdvertisementTypeId,
                                        Advertisement.AdvertisementId as PropertyId, 
                                        AdvertisementTitle as PropertyCodeName, 
                                        1 as 'ShowInMelkavan', 
                OfferPrice,
                                        CalculatedOfferPrice, 
                                        OfferPriceType, 
                                        OfferPrice as 'LastPrice', 
                convert(bigint, 0) as 'RentPrice',
                convert(bigint, 0) as 'DepositPrice',
                                        StateId, 
                                        CityId, 
                                        ZoneId, 
                                        DistrictId, 
                                        LocationLat, 
                                        LocationLon, 
                                        PropertyTypeId, 
                                        TypeOfUseId 
                                    from 
                                        (
                                            select 
                                                AdvertisementId,  
                                                MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  
                                            from 
                                                MelkavanDb.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
                                            group by 
                                                AdvertisementId
                                        ) tmpAdvertisementPricesHistories
                                        inner join MelkavanDb.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
                                        inner join MelkavanDb.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
                                        inner join MelkavanDb.dbo.AdvertisementAddress on Advertisement.AdvertisementId = AdvertisementAddress.AdvertisementId
                                		inner join MelkavanDb.dbo.AdvertisementDetails on Advertisement.AdvertisementId = AdvertisementDetails.AdvertisementId

                                		where MelkavanDb.dbo.AdvertisementDetails.AdvertisementTypeId = 2
                                )
                                union all 
                                (
                                    SELECT 
            PropertiesDetails.AdvertisementTypeId,
            Properties.PropertyId, 
            PropertyCodeName, 
            ShowInMelkavan, 
            OfferPrice,
            CASE OfferPriceType 
                WHEN '0' THEN OfferPrice / 10 
                ELSE CalculatedOfferPrice / 10 
            END AS CalculatedOfferPrice,
            OfferPriceType, 
            CASE OfferPriceType 
                WHEN '0' THEN CalculatedOfferPrice / 10 
                ELSE OfferPrice / 10 
            END AS LastPrice, 
            CONVERT(BIGINT, 0) AS 'RentPrice',
            CONVERT(BIGINT, 0) AS 'DepositPrice',
            StateId, 
            CityId, 
            ZoneId, 
            DistrictId, 
            LocationLat, 
            LocationLon, 
            PropertyTypeId, 
            TypeOfUseId 
        FROM 
            (
                SELECT 
                    PropertyId,  
                    MAX(PropertyPriceHistoryId) AS PropertyPriceHistoryId  
                FROM 
                    TeniacoDb.dbo.PropertiesPricesHistories 
                GROUP BY 
                    PropertyId 
            ) tmpPropertiesPricesHistories 
            INNER JOIN TeniacoDb.dbo.Properties 
                ON TeniacoDb.dbo.Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
            INNER JOIN TeniacoDb.dbo.PropertiesPricesHistories 
                ON tmpPropertiesPricesHistories.PropertyPriceHistoryId = TeniacoDb.dbo.PropertiesPricesHistories.PropertyPriceHistoryId
            INNER JOIN TeniacoDb.dbo.PropertyAddress 
                ON TeniacoDb.dbo.Properties.PropertyId = TeniacoDb.dbo.PropertyAddress.PropertyId
            INNER JOIN TeniacoDb.dbo.PropertiesDetails 
                ON TeniacoDb.dbo.Properties.PropertyId = TeniacoDb.dbo.PropertiesDetails.PropertyId
        WHERE 
            TeniacoDb.dbo.Properties.ShowInMelkavan = 1 
            AND TeniacoDb.dbo.PropertiesDetails.AdvertisementTypeId = 2
                                )";
                        break;
                    case 4: // ONLY FOR MELKAVAN & RENT ONLY - SINA QUERY
                        sp = @"(
                                    select 
                                        AdvertisementDetails.AdvertisementTypeId,
                                        Advertisement.AdvertisementId as PropertyId, 
                                        AdvertisementTitle as PropertyCodeName, 
                                        OfferPrice, 
                                        1 as 'ShowInMelkavan', 
                                        CalculatedOfferPrice, 
                                        OfferPriceType, 
                CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice,
                                        RentPrice, 
                DepositPrice,
                                        StateId, 
                                        CityId, 
                                        ZoneId, 
                                        DistrictId, 
                                        LocationLat, 
                                        LocationLon, 
                                        PropertyTypeId, 
                                        TypeOfUseId 
                                    from 
                                        (
                                            select 
                                                AdvertisementId,  
                                                MAX(AdvertisementPriceHistoryId) as PropertyPriceHistoryId  
                                            from 
                                                MelkavanDb.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories
                                            group by 
                                                AdvertisementId
                                        ) tmpAdvertisementPricesHistories
                                        inner join MelkavanDb.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId
                                        inner join MelkavanDb.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.PropertyPriceHistoryId = AdvertisementPricesHistories.AdvertisementPriceHistoryId
                                        inner join MelkavanDb.dbo.AdvertisementAddress on Advertisement.AdvertisementId = AdvertisementAddress.AdvertisementId
                                		inner join MelkavanDb.dbo.AdvertisementDetails on Advertisement.AdvertisementId = AdvertisementDetails.AdvertisementId

                                		where MelkavanDb.dbo.AdvertisementDetails.AdvertisementTypeId = 1
                                )
                                union all 
                                (
                                    select 
                                        PropertiesDetails.AdvertisementTypeId,
                                        Properties.PropertyId, 
                                        PropertyCodeName, 
                                        OfferPrice, 
                                        ShowInMelkavan, 
                                        CalculatedOfferPrice, 
                                        OfferPriceType, 
                CASE OfferPriceType WHEN '0' THEN OfferPrice ELSE CalculatedOfferPrice END as LastPrice,
                                        RentPrice, 
                DepositPrice,
                                        StateId, 
                                        CityId, 
                                        ZoneId, 
                                        DistrictId, 
                                        LocationLat, 
                                        LocationLon, 
                                        PropertyTypeId, 
                                        TypeOfUseId 
                                    from 
                                        (
                                            select 
                                                PropertyId,  
                                                MAX(PropertyPriceHistoryId) as PropertyPriceHistoryId  
                                            from 
                                                TeniacoDb.dbo.PropertiesPricesHistories tmpPropertiesPricesHistories 
                                            group by 
                                                PropertyId 
                                        ) tmpPropertiesPricesHistories 
                                        inner join TeniacoDb.dbo.Properties on TeniacoDb.dbo.Properties.PropertyId = tmpPropertiesPricesHistories.PropertyId
                                        inner join TeniacoDb.dbo.PropertiesPricesHistories on tmpPropertiesPricesHistories.PropertyPriceHistoryId = TeniacoDb.dbo.PropertiesPricesHistories.PropertyPriceHistoryId
                                        inner join TeniacoDb.dbo.PropertyAddress on TeniacoDb.dbo.Properties.PropertyId = TeniacoDb.dbo.PropertyAddress.PropertyId
                                		inner join TeniacoDb.dbo.PropertiesDetails on TeniacoDb.dbo.Properties.PropertyId = TeniacoDb.dbo.PropertiesDetails.PropertyId
                                    where 
                                        TeniacoDb.dbo.Properties.ShowInMelkavan = 1 AND TeniacoDb.dbo.PropertiesDetails.AdvertisementTypeId= 1
                                )";
                        break;
                }

                var propertiesPricesForMapList = teniacoApiDb.PropertiesPricesForMapVM.FromSqlRaw(sp).AsQueryable();

                #region where clause

                if (PriceFrom.HasValue)
                    if (PriceFrom > 0)
                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.LastPrice.HasValue).Where(p => p.LastPrice.Value >= PriceFrom.Value);

                if (PriceTo.HasValue)
                    if (PriceTo > 0)
                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.LastPrice.HasValue).Where(p => p.LastPrice.Value >= PriceTo.Value);

                if (StateId.HasValue)
                    if (StateId > 0)
                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.StateId.HasValue).Where(p => p.StateId.Value == StateId.Value);

                if (CityId.HasValue)
                    if (CityId > 0)
                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.CityId.HasValue).Where(p => p.CityId.Value == CityId.Value);

                if (ZoneId.HasValue)
                    if (ZoneId > 0)
                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.ZoneId.HasValue).Where(p => p.ZoneId.Value == ZoneId.Value);

                if (DistrictId.HasValue)
                    if (DistrictId > 0)
                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.DistrictId.HasValue).Where(p => p.DistrictId.Value == DistrictId.Value);

                if (typeOfUseId.HasValue)
                    if (typeOfUseId > 0)
                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.TypeOfUseId.HasValue).Where(p => p.TypeOfUseId.Value == typeOfUseId.Value);

                if (PropertyTypeId.HasValue)
                    if (PropertyTypeId > 0)
                        propertiesPricesForMapList = propertiesPricesForMapList.Where(p => p.PropertyTypeId == PropertyTypeId.Value);

                #endregion

                propertiesPricesForMapVMList = propertiesPricesForMapList.ToList();
            }
            catch (Exception exc)
            { }

            return propertiesPricesForMapVMList;
        }


        #endregion

        #region Methods for Work With MapLayers

        public List<MapLayersVM> GetAllMapLayersList(
        ref int listCount,
        List<long> childsUsersIds,
        int? mapLayerCategoryId = null)
        {
            List<MapLayersVM> mapLayersVMList = new List<MapLayersVM>();

            try
            {
                var list = (from p in teniacoApiDb.MapLayers
                            where p.IsActivated.Value.Equals(true) &&
                                  p.IsDeleted.Value.Equals(false)
                            select new MapLayersVM
                            {
                                MapLayerId = p.MapLayerId,
                                MapLayerCategoryId = p.MapLayerCategoryId,
                                StrPolygon = p.StrPolygon,
                                UserIdCreator = p.UserIdCreator,
                                CreateEnDate = p.CreateEnDate,
                                CreateTime = p.CreateTime,
                                EditEnDate = p.EditEnDate,
                                EditTime = p.EditTime,
                                UserIdEditor = p.UserIdEditor,
                                RemoveEnDate = p.RemoveEnDate,
                                RemoveTime = p.EditTime,
                                UserIdRemover = p.UserIdRemover,
                                IsActivated = p.IsActivated,
                                IsDeleted = p.IsDeleted,
                                DistrictId = p.DistrictId

                            })
                            .AsEnumerable();


                if (mapLayerCategoryId.HasValue)
                    if (mapLayerCategoryId.Value > 0)
                        list = list.Where(a => a.MapLayerCategoryId.Equals(mapLayerCategoryId));


                mapLayersVMList = list.OrderByDescending(s => s.MapLayerId).ToList();

            }
            catch (Exception ex)
            { }

            return mapLayersVMList;
        }

        public List<MapLayersVM> GetListOfMapLayers(
            int jtStartIndex,
            int jtPageSize,
            ref int listCount,
            List<long> childsUsersIds,
            int? mapLayerCategoryId = null,
            string jtSorting = null)
        {
            List<MapLayersVM> mapLayersVMList = new List<MapLayersVM>();

            var list = (from p in teniacoApiDb.MapLayers
                        where p.IsActivated.Value.Equals(true) &&
                        p.IsDeleted.Value.Equals(false)
                        select new MapLayersVM
                        {
                            MapLayerId = p.MapLayerId,
                            MapLayerCategoryId = p.MapLayerCategoryId,
                            StrPolygon = p.StrPolygon,
                            UserIdCreator = p.UserIdCreator.Value,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor.Value,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover.Value,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted,
                            DistrictId = p.DistrictId
                        })
                        .AsEnumerable();


            if (mapLayerCategoryId.HasValue)
                if (mapLayerCategoryId.Value > 0)
                    list = list.Where(a => a.MapLayerCategoryId.Equals(mapLayerCategoryId));


            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        mapLayersVMList = list.OrderByDescending(s => s.MapLayerId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                        mapLayersVMList = list.OrderByDescending(s => s.MapLayerId).ToList();
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        if (string.IsNullOrEmpty(jtSorting))
                            mapLayersVMList = list.OrderByDescending(s => s.MapLayerId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            mapLayersVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {
                        mapLayersVMList = list.ToList();
                    }
                }

            }
            catch (Exception exc)
            { }
            return mapLayersVMList;
        }


        public int AddToMapLayersWithJsonData(MapLayersVM mapLayersVM, List<string> StrPolygonList, IConsoleBusiness consoleBusiness, string domainName)
        {
            try
            {
                List<MapLayers> result = new List<MapLayers>();
                result = StrPolygonList.Select(a => new MapLayers
                {
                    IsActivated = true,
                    IsDeleted = false,
                    MapLayerCategoryId = mapLayersVM.MapLayerCategoryId,
                    CreateEnDate = mapLayersVM.CreateEnDate,
                    CreateTime = mapLayersVM.CreateTime,
                    StrPolygon = a,
                    UserIdCreator = mapLayersVM.UserIdCreator,

                    DistrictId = mapLayersVM.DistrictId
                }).ToList();

                teniacoApiDb.MapLayers.AddRange(result);
                int _Cnt = teniacoApiDb.SaveChanges();
                return _Cnt;
            }
            catch (Exception exx)
            {

            }
            return 0;

        }

        public int AddToMapLayers(MapLayersVM mapLayersVM,
             IConsoleBusiness consoleBusiness,
            string domainName)
        {

            try
            {
                MapLayers mapLayers = _mapper.Map<MapLayersVM, MapLayers>(mapLayersVM);

                mapLayers.IsActivated = true;
                mapLayers.IsDeleted = false;
                mapLayers.UserIdCreator = consoleBusiness.GetDomainsSettingsWithDomainName(domainName).UserIdCreator;

                teniacoApiDb.MapLayers.Add(mapLayers);
                teniacoApiDb.SaveChanges();

                return mapLayers.MapLayerId;

            }
            catch (Exception exc)
            { }

            return 0;
        }


        public int UpdateMapLayers(ref MapLayersVM mapLayersVM,
            List<long> childsUsersIds)
        {
            int mapLayerId = mapLayersVM.MapLayerId;


            bool? isActivated = mapLayersVM.IsActivated.HasValue ? mapLayersVM.IsActivated.Value : (bool?)true;
            bool? isDeleted = mapLayersVM.IsDeleted.HasValue ? mapLayersVM.IsDeleted.Value : (bool?)false;



            if (teniacoApiDb.MapLayers.Where(n => childsUsersIds.Contains(n.UserIdCreator.Value)).Where(x => x.MapLayerId.Equals(mapLayerId)).Any())
            {
                try
                {
                    MapLayers mapLayers = (from a in teniacoApiDb.MapLayers
                                           where a.MapLayerId == mapLayerId
                                           select a).FirstOrDefault();


                    mapLayers.DistrictId = mapLayersVM.DistrictId;


                    mapLayers.MapLayerCategoryId = mapLayersVM.MapLayerCategoryId;
                    mapLayers.StrPolygon = mapLayersVM.StrPolygon;

                    mapLayers.EditEnDate = DateTime.Now;
                    mapLayers.EditTime = PersianDate.TimeNow;
                    mapLayers.UserIdEditor = mapLayersVM.UserIdEditor;
                    mapLayers.IsActivated = isActivated.Value;
                    mapLayers.IsDeleted = isDeleted.Value;



                    teniacoApiDb.Entry<MapLayers>(mapLayers).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();


                    //mapLayersVM.UserIdCreator = mapLayersVM.UserIdCreator.Value;

                    return mapLayersVM.MapLayerId;
                }
                catch (Exception ex)
                { }

            }
            return 0;
        }



        public bool ToggleActivationMapLayers(int mapLayerId,
           long userId,
           List<long> childsUsersIds)
        {
            try
            {
                var mapLayers = (from c in teniacoApiDb.MapLayers
                                 where c.MapLayerId == mapLayerId &&
                                      childsUsersIds.Contains(c.UserIdCreator.Value)
                                 select c).FirstOrDefault();



                if (mapLayers != null)
                {
                    mapLayers.IsActivated = !mapLayers.IsActivated;
                    mapLayers.EditEnDate = DateTime.Now;
                    mapLayers.EditTime = PersianDate.TimeNow;
                    mapLayers.UserIdEditor = userId;

                    teniacoApiDb.Entry<MapLayers>(mapLayers).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception)
            { }

            return false;
        }


        public bool TemporaryDeleteMapLayers(int mapLayerId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                var mapLayers = (from a in teniacoApiDb.MapLayers
                                 where a.MapLayerId == mapLayerId &&
                                 childsUsersIds.Contains(a.UserIdCreator.Value)
                                 select a).FirstOrDefault();


                if (mapLayers != null)
                {
                    mapLayers.IsDeleted = !mapLayers.IsDeleted;
                    mapLayers.EditEnDate = DateTime.Now;
                    mapLayers.EditTime = PersianDate.TimeNow;
                    mapLayers.UserIdEditor = userId;


                    teniacoApiDb.Entry<MapLayers>(mapLayers).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();


                    return true;
                }
            }
            catch (Exception ex)
            { }
            return false;
        }

        public bool CompleteDeleteMapLayersIds(CompleteDeleteMapLayersIdsPVM completeDeleteMapLayersIdsPVM)
        {
            try
            {
                List<MapLayers> list = new List<MapLayers>();
                completeDeleteMapLayersIdsPVM?.MapLayerIds.ForEach(a => list.Add(new MapLayers() { MapLayerId = a }));
                teniacoApiDb.RemoveRange(list);
                return teniacoApiDb.SaveChanges() > 0;
            }
            catch (Exception exx)
            {

            }
            return false;
        }
        public bool CompleteDeleteMapLayers(int mapLayerId,
            List<long> childsUsersIds)
        {
            try
            {
                var mapLayers = (from a in teniacoApiDb.MapLayers
                                 where a.MapLayerId == mapLayerId &&
                                      childsUsersIds.Contains(a.UserIdCreator.Value)
                                 select a).FirstOrDefault();

                if (mapLayers != null)
                {
                    using (var transaction = teniacoApiDb.Database.BeginTransaction())
                    {
                        try
                        {
                            teniacoApiDb.MapLayers.Remove(mapLayers);
                            teniacoApiDb.SaveChanges();


                            transaction.Commit();

                            return true;
                        }
                        catch (Exception)
                        {
                            transaction.Rollback();
                        }
                    }
                }
            }
            catch (Exception ex)
            { }

            return false;
        }

        public MapLayersVM GetMapLayerWithMapLayerId(
            int? mapLayerId,
            List<long> childsUsersIds)
        {
            MapLayersVM mapLayersVM = new MapLayersVM();

            try
            {
                mapLayersVM = _mapper.Map<MapLayers,
                    MapLayersVM>(teniacoApiDb.MapLayers
                    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                     .Where(e => e.MapLayerId.Equals(mapLayerId)).FirstOrDefault());

            }
            catch (Exception exc)
            { }

            return mapLayersVM;
        }


        //public bool AddToMapLayerFiles(List<MapLayerFilesVM> mapLayerFilesVMList)
        //{
        //    try
        //    {
        //        if (mapLayerFilesVMList != null)
        //            if (mapLayerFilesVMList.Count > 0)
        //            {
        //                var mapLayerFilesList = _mapper.Map<List<MapLayerFilesVM>, List<MapLayerFiles>>(mapLayerFilesVMList);

        //                teniacoApiDb.MapLayerFiles.AddRange(mapLayerFilesList);
        //                teniacoApiDb.SaveChanges();

        //                return true;
        //            }
        //    }
        //    catch (Exception exc)
        //    {
        //    }
        //    return false;
        //}

        #endregion

        #region Methods For Work With MyProperties

        #region Methods For Work With MyPropertiesManagement
        public List<MyPropertiesVM> GetAllMyPropertiesList(ref int listCount,
           List<long> childsUsersIds,
           PublicApiContext publicApiDb,
           int? propertyTypeId = null,
           int? typeOfUseId = null,
           int? documentTypeId = null,
           long? ConsultantUserId = null,
           long? OwnerId = null,
           string propertyCodeName = null,
           long? stateId = null,
           long? cityId = null,
           long? zoneId = null,
           long? districtId = null,
           string jtSorting = null)
        {
            List<MyPropertiesVM> myPropertiesVMList = new List<MyPropertiesVM>();

            try
            {

                var districts = (from s in publicApiDb.States
                                 join c in publicApiDb.Cities on s.StateId equals c.StateId
                                 join z in publicApiDb.Zones on c.CityId equals z.CityId
                                 join d in publicApiDb.Districts on z.ZoneId equals d.ZoneId
                                 select new DistrictsVM
                                 {
                                     CityId = c.CityId,
                                     StateId = s.StateId,
                                     ZoneId = z.ZoneId,
                                     DistrictId = d.DistrictId,
                                 }).AsEnumerable();

                var list = (from p in teniacoApiDb.Properties
                            join pa in teniacoApiDb.PropertyAddress on p.PropertyId equals pa.PropertyId
                            where childsUsersIds.Contains(p.UserIdCreator.Value) &&
                            p.IsDeleted.Value.Equals(false) &&
                            p.IsActivated.Value.Equals(true)
                            select new MyPropertiesVM
                            {
                                Area = p.Area,
                                BuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                                BuiltInYearFa = p.BuiltInYearFa.HasValue ? p.BuiltInYearFa.Value : (int?)0,
                                ConsultantUserId = p.ConsultantUserId.HasValue ? p.ConsultantUserId.Value : (long?)null,
                                //PropertyOwnersVM = new List<PropertyOwnersVM>(),
                                //OwnerId = p.OwnerId.HasValue ? p.OwnerId.Value : (long?)null,
                                PropertyCodeName = p.PropertyCodeName,
                                PropertyId = p.PropertyId,
                                PropertyTypeId = p.PropertyTypeId,
                                RebuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                                RebuiltInYearFa = p.RebuiltInYearFa.HasValue ? p.RebuiltInYearFa.Value : (int?)0,
                                TypeOfUseId = p.TypeOfUseId.HasValue ? p.TypeOfUseId.Value : (int?)0,
                                DocumentTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
                                DocumentOwnershipTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
                                DocumentRootTypeId = p.DocumentRootTypeId.HasValue ? p.DocumentRootTypeId.Value : (int?)0,
                                UserIdCreator = p.UserIdCreator.Value,
                                CreateEnDate = p.CreateEnDate,
                                CreateTime = p.CreateTime,
                                EditEnDate = p.EditEnDate,
                                EditTime = p.EditTime,
                                UserIdEditor = p.UserIdEditor.Value,
                                RemoveEnDate = p.RemoveEnDate,
                                RemoveTime = p.EditTime,
                                UserIdRemover = p.UserIdRemover.Value,
                                IsActivated = p.IsActivated,
                                IsDeleted = p.IsDeleted,
                                MyPropertyAddressVM = new MyPropertyAddressVM
                                {
                                    StateId = 0,
                                    CityId = 0,
                                    ZoneId = pa.ZoneId,
                                    DistrictId = pa.DistrictId,
                                    //Abbreviation = pa.Address,
                                    Address = pa.Address,
                                    LocationLat = pa.LocationLat,
                                    LocationLon = pa.LocationLon,
                                    PropertyId = pa.PropertyId,
                                    UserIdCreator = p.UserIdCreator.Value,
                                    CreateEnDate = p.CreateEnDate,
                                    CreateTime = p.CreateTime,
                                    EditEnDate = p.EditEnDate,
                                    EditTime = p.EditTime,
                                    UserIdEditor = p.UserIdEditor.Value,
                                    RemoveEnDate = p.RemoveEnDate,
                                    RemoveTime = p.EditTime,
                                    UserIdRemover = p.UserIdRemover.Value,
                                    IsActivated = p.IsActivated,
                                    IsDeleted = p.IsDeleted,
                                }
                            })
                            .AsEnumerable()
                            .Join(districts, pa => pa.MyPropertyAddressVM.DistrictId, z => z.DistrictId, (a, b) => new { a, b })
                            .Select(p => new MyPropertiesVM
                            {
                                Area = p.a.Area,
                                BuiltInYear = p.a.BuiltInYear.HasValue ? p.a.BuiltInYear.Value : (int?)0,
                                BuiltInYearFa = p.a.BuiltInYearFa.HasValue ? p.a.BuiltInYearFa.Value : (int?)0,
                                ConsultantUserId = p.a.ConsultantUserId.HasValue ? p.a.ConsultantUserId.Value : (long?)null,
                                OwnerId = p.a.OwnerId.HasValue ? p.a.OwnerId.Value : (long?)null,
                                PropertyCodeName = p.a.PropertyCodeName,
                                PropertyId = p.a.PropertyId,
                                PropertyTypeId = p.a.PropertyTypeId,
                                RebuiltInYear = p.a.BuiltInYear.HasValue ? p.a.BuiltInYear.Value : (int?)0,
                                RebuiltInYearFa = p.a.RebuiltInYearFa.HasValue ? p.a.RebuiltInYearFa.Value : (int?)0,
                                TypeOfUseId = p.a.TypeOfUseId.HasValue ? p.a.TypeOfUseId.Value : (int?)0,
                                DocumentTypeId = p.a.DocumentTypeId.HasValue ? p.a.DocumentTypeId.Value : (int?)0,
                                DocumentOwnershipTypeId = p.a.DocumentOwnershipTypeId.HasValue ? p.a.DocumentOwnershipTypeId.Value : (int?)0,
                                DocumentRootTypeId = p.a.DocumentRootTypeId.HasValue ? p.a.DocumentRootTypeId.Value : (int?)0,
                                UserIdCreator = p.a.UserIdCreator.Value,
                                CreateEnDate = p.a.CreateEnDate,
                                CreateTime = p.a.CreateTime,
                                EditEnDate = p.a.EditEnDate,
                                EditTime = p.a.EditTime,
                                UserIdEditor = p.a.UserIdEditor.Value,
                                RemoveEnDate = p.a.RemoveEnDate,
                                RemoveTime = p.a.EditTime,
                                UserIdRemover = p.a.UserIdRemover.Value,
                                IsActivated = p.a.IsActivated,
                                IsDeleted = p.a.IsDeleted,
                                MyPropertyAddressVM = new MyPropertyAddressVM
                                {
                                    StateId = p.b.StateId.Value,
                                    CityId = p.b.CityId.Value,
                                    ZoneId = p.b.ZoneId,
                                    DistrictId = p.b.DistrictId,
                                    Address = p.a.MyPropertyAddressVM.Address,
                                    LocationLat = p.a.MyPropertyAddressVM.LocationLat,
                                    LocationLon = p.a.MyPropertyAddressVM.LocationLon,
                                    PropertyId = p.a.MyPropertyAddressVM.PropertyId,
                                    UserIdCreator = p.a.MyPropertyAddressVM.UserIdCreator.Value,
                                    CreateEnDate = p.a.MyPropertyAddressVM.CreateEnDate,
                                    CreateTime = p.a.MyPropertyAddressVM.CreateTime,
                                    EditEnDate = p.a.MyPropertyAddressVM.EditEnDate,
                                    EditTime = p.a.MyPropertyAddressVM.EditTime,
                                    UserIdEditor = p.a.MyPropertyAddressVM.UserIdEditor.Value,
                                    RemoveEnDate = p.a.MyPropertyAddressVM.RemoveEnDate,
                                    RemoveTime = p.a.MyPropertyAddressVM.EditTime,
                                    UserIdRemover = p.a.MyPropertyAddressVM.UserIdRemover.Value,
                                    IsActivated = p.a.MyPropertyAddressVM.IsActivated,
                                    IsDeleted = p.a.MyPropertyAddressVM.IsDeleted,
                                }
                            }).AsQueryable();

                if (propertyTypeId.HasValue)
                    if (propertyTypeId.Value > 0)
                        list = list.Where(a => a.PropertyTypeId.Equals(propertyTypeId.Value));

                if (typeOfUseId.HasValue)
                    if (typeOfUseId.Value > 0)
                        list = list.Where(a => a.TypeOfUseId.Equals(typeOfUseId.Value));

                if (documentTypeId.HasValue)
                    if (documentTypeId.Value > 0)
                        list = list.Where(a => a.DocumentTypeId.Equals(documentTypeId.Value));


                if (!string.IsNullOrEmpty(propertyCodeName))
                    list = list.Where(z => z.PropertyCodeName.Contains(propertyCodeName));


                if (stateId.HasValue)
                    if (stateId.Value > 0)
                        list = list.Where(a => a.MyPropertyAddressVM.StateId.Equals(stateId.Value));

                if (cityId.HasValue)
                    if (cityId.Value > 0)
                        list = list.Where(a => a.MyPropertyAddressVM.CityId.Equals(cityId.Value));

                if (zoneId.HasValue)
                    if (zoneId.Value > 0)
                        list = list.Where(a => a.MyPropertyAddressVM.ZoneId.Equals(zoneId.Value));

                if (districtId.HasValue)
                    if (districtId.Value > 0)
                        list = list.Where(a => a.MyPropertyAddressVM.DistrictId.Equals(districtId.Value));

                if (ConsultantUserId.HasValue)
                    if (ConsultantUserId.Value > 0)
                        list = list.Where(a => a.ConsultantUserId.Value.Equals(ConsultantUserId.Value));

                if (OwnerId.HasValue)
                    if (OwnerId.Value > 0)
                        list = list.Where(a => a.OwnerId.Value.Equals(OwnerId.Value));


                myPropertiesVMList = list.OrderByDescending(f => f.PropertyId).ToList();


            }
            catch (Exception exc)
            { }

            return myPropertiesVMList;
        }


        public List<MyPropertiesVM> GetListOfMyProperties(int jtStartIndex,
             int jtPageSize,
             ref int listCount,
             List<long> childsUsersIds,
             PublicApiContext publicApiDb,
             int? propertyTypeId = null,
             int? typeOfUseId = null,
             int? documentTypeId = null,
             long? ConsultantUserId = null,
             long? OwnerId = null,
             string propertyCodeName = null,
             long? stateId = null,
             long? cityId = null,
             long? zoneId = null,
             long? districtId = null,
             string jtSorting = null,
             long? userId = null)
        {


            List<MyPropertiesVM> myPropertiesVMList = new List<MyPropertiesVM>();

            var states = publicApiDb.States.ToList();
            var cities = publicApiDb.Cities.ToList();
            var zones = publicApiDb.Zones.ToList();
            var districts = publicApiDb.Districts.ToList();

            List<long> OwnerPropertiesIds = teniacoApiDb.PropertyOwners.Where(po => po.OwnerId == userId && po.OwnerType == "users").Select(po => po.PropertyId).ToList();
            //List<long> ProjectedPropertiesIds = projectApiDb.ConstructionProjects.Select(c => c.PropertyId).ToList();

            var list = (from p in teniacoApiDb.Properties
                        join pa in teniacoApiDb.PropertyAddress on p.PropertyId equals pa.PropertyId

                        where (childsUsersIds.Contains(p.UserIdCreator.Value) ||
                        childsUsersIds.Contains(userId.Value)) &&
                        OwnerPropertiesIds.Contains(p.PropertyId) &&
                        p.IsActivated.Value.Equals(true) &&
                        p.IsDeleted.Value.Equals(false)
                        select new MyPropertiesVM
                        {
                            Area = p.Area,
                            BuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                            BuiltInYearFa = p.BuiltInYearFa.HasValue ? p.BuiltInYearFa.Value : (int?)0,
                            ConsultantUserId = p.ConsultantUserId.HasValue ? p.ConsultantUserId.Value : (long?)null,
                            //OwnerId = p.OwnerId.HasValue ? p.OwnerId.Value : (long?)null,
                            PropertyCodeName = p.PropertyCodeName,
                            PropertyId = p.PropertyId,
                            PropertyTypeId = p.PropertyTypeId,
                            RebuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                            RebuiltInYearFa = p.RebuiltInYearFa.HasValue ? p.RebuiltInYearFa.Value : (int?)0,
                            TypeOfUseId = p.TypeOfUseId.HasValue ? p.TypeOfUseId.Value : (int?)0,
                            DocumentTypeId = p.DocumentTypeId.HasValue ? p.DocumentTypeId.Value : (int?)0,
                            DocumentOwnershipTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
                            DocumentRootTypeId = p.DocumentRootTypeId.HasValue ? p.DocumentRootTypeId.Value : (int?)0,
                            PropertyDescriptions = !string.IsNullOrEmpty(p.PropertyDescriptions) ? p.PropertyDescriptions : "",
                            UserIdCreator = p.UserIdCreator.Value,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor.Value,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover.Value,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted,
                            MyPropertyAddressVM = new MyPropertyAddressVM
                            {
                                StateId = pa.StateId.Value,
                                CityId = pa.CityId.Value,
                                ZoneId = pa.ZoneId,
                                DistrictId = pa.DistrictId,
                                CityName = "",//x.CityName,
                                StateName = "",//x.StateName,
                                TownName = "",//x.TownName,
                                VillageName = "",//x.VillageName,
                                ZoneName = "",//x.ZoneName,
                                DistrictName = "",
                                //Abbreviation = "",//x.Abbreviation,
                                Address = pa.Address,
                                LocationLat = pa.LocationLat,
                                LocationLon = pa.LocationLon,
                                PropertyId = pa.PropertyId,
                                UserIdCreator = pa.UserIdCreator,
                                CreateEnDate = pa.CreateEnDate,
                                CreateTime = pa.CreateTime,
                                EditEnDate = pa.EditEnDate,
                                EditTime = pa.EditTime,
                                UserIdEditor = pa.UserIdEditor,
                                RemoveEnDate = pa.RemoveEnDate,
                                RemoveTime = pa.EditTime,
                                UserIdRemover = pa.UserIdRemover,
                                IsActivated = pa.IsActivated,
                                IsDeleted = pa.IsDeleted,

                            }
                        })
                        .AsEnumerable();


            if (propertyTypeId.HasValue)
                if (propertyTypeId.Value > 0)
                    list = list.Where(a => a.PropertyTypeId.Equals(propertyTypeId.Value));

            if (typeOfUseId.HasValue)
                if (typeOfUseId.Value > 0)
                    list = list.Where(a => a.TypeOfUseId.Equals(typeOfUseId.Value));

            if (documentTypeId.HasValue)
                if (documentTypeId.Value > 0)
                    list = list.Where(a => a.DocumentTypeId.Equals(documentTypeId.Value));


            if (!string.IsNullOrEmpty(propertyCodeName))
                list = list.Where(z => z.PropertyCodeName.Contains(propertyCodeName));

            if (stateId.HasValue)
                if (stateId.Value > 0)
                    list = list.Where(a => a.MyPropertyAddressVM.StateId.Equals(stateId.Value));

            if (cityId.HasValue)
                if (cityId.Value > 0)
                    list = list.Where(a => a.MyPropertyAddressVM.CityId.Equals(cityId.Value));

            if (zoneId.HasValue)
                if (zoneId.Value > 0)
                    list = list.Where(a => a.MyPropertyAddressVM.ZoneId.Equals(zoneId.Value));

            if (districtId.HasValue)
                if (districtId.Value > 0)
                    list = list.Where(a => a.MyPropertyAddressVM.DistrictId.Equals(districtId.Value));

            if (ConsultantUserId.HasValue)
                if (ConsultantUserId.Value > 0)
                    list = list.Where(a => a.ConsultantUserId.Equals(ConsultantUserId));

            if (OwnerId.HasValue)
                if (OwnerId.Value > 0)
                    list = list.Where(a => a.OwnerId.Equals(OwnerId));



            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {


                        myPropertiesVMList = list.OrderByDescending(s => s.PropertyId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {


                        myPropertiesVMList = list.OrderByDescending(s => s.PropertyId).ToList();
                    }
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {
                        switch (jtSorting)
                        {
                            case "PropertyCodeName ASC":
                                list = list.OrderBy(l => l.PropertyCodeName);
                                break;
                            case "PropertyCodeName DESC":
                                list = list.OrderByDescending(l => l.PropertyCodeName);
                                break;
                        }


                        if (string.IsNullOrEmpty(jtSorting))
                            myPropertiesVMList = list.OrderByDescending(s => s.PropertyId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            myPropertiesVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {

                        myPropertiesVMList = list.ToList();
                    }
                }

                foreach (var item in myPropertiesVMList)
                {
                    var state = states.Where(s => s.StateId.Equals(item.MyPropertyAddressVM.StateId)).FirstOrDefault();
                    if (state != null)
                    {
                        item.MyPropertyAddressVM.StateId = state.StateId;
                        item.MyPropertyAddressVM.StateName = state.StateName;
                    }

                    var city = cities.Where(c => c.CityId.Equals(item.MyPropertyAddressVM.CityId)).FirstOrDefault();
                    if (city != null)
                    {
                        item.MyPropertyAddressVM.CityId = city.CityId;
                        item.MyPropertyAddressVM.CityName = city.CityName;
                    }

                    if (item.MyPropertyAddressVM.ZoneId.HasValue)
                    {
                        var zone = zones.Where(z => z.ZoneId.Equals(item.MyPropertyAddressVM.ZoneId.Value)).FirstOrDefault();
                        if (zone != null)
                        {
                            item.MyPropertyAddressVM.ZoneId = zone.ZoneId;
                            item.MyPropertyAddressVM.ZoneName = zone.ZoneName;
                        }
                    }

                    if (item.MyPropertyAddressVM.DistrictId.HasValue)
                    {
                        var district = districts.Where(z => z.DistrictId.Equals(item.MyPropertyAddressVM.DistrictId.Value)).FirstOrDefault();
                        if (district != null)
                        {
                            item.MyPropertyAddressVM.DistrictId = district.DistrictId;
                            item.MyPropertyAddressVM.DistrictName = district.DistrictName;
                            item.MyPropertyAddressVM.VillageName = district.VillageName;
                            item.MyPropertyAddressVM.TownName = district.TownName;
                        }
                    }

                    // پر کردن عکس های ملک
                    if (teniacoApiDb.PropertyFiles.Where(f => f.PropertyId == item.PropertyId).Any())
                    {
                        var mainPhoto = teniacoApiDb.PropertyFiles.Where(f => f.PropertyId == item.PropertyId && f.PropertyFileOrder == 1).FirstOrDefault();
                        MyPropertyFilesVM myPropertyFilesVM = new MyPropertyFilesVM()
                        {
                            PropertyId = item.PropertyId,
                            PropertyFileTitle = mainPhoto.PropertyFileTitle,
                            PropertyFilePath = mainPhoto.PropertyFilePath
                        };
                        item.MyPropertyFilesVM.Add(myPropertyFilesVM);

                    }
                }


            }
            catch (Exception exc)
            { }

            return myPropertiesVMList;
        }


        public long AddToMyProperties(MyPropertiesVM myPropertiesVM,
            IPublicApiBusiness publicApiBusiness)
        {
            using (var transaction = teniacoApiDb.Database.BeginTransaction())
            {
                try
                {
                    Entities.Properties properties = _mapper.Map<MyPropertiesVM, Entities.Properties>(myPropertiesVM);

                    teniacoApiDb.Properties.Add(properties);
                    teniacoApiDb.SaveChanges();

                    if (myPropertiesVM.MyPropertyAddressVM != null)
                    {
                        PropertyAddress propertyAddress = _mapper.Map<MyPropertyAddressVM, PropertyAddress>(myPropertiesVM.MyPropertyAddressVM);
                        propertyAddress.PropertyId = properties.PropertyId;

                        teniacoApiDb.PropertyAddress.Add(propertyAddress);
                        teniacoApiDb.SaveChanges();
                    }
                    else
                    {
                        PropertyAddress propertyAddress = new PropertyAddress();
                        propertyAddress.PropertyId = properties.PropertyId;
                        propertyAddress.CreateEnDate = properties.CreateEnDate.Value;
                        propertyAddress.CreateTime = properties.CreateTime;
                        propertyAddress.UserIdCreator = properties.UserIdCreator.Value;
                        propertyAddress.IsActivated = true;
                        propertyAddress.IsDeleted = false;

                        teniacoApiDb.PropertyAddress.Add(propertyAddress);
                        teniacoApiDb.SaveChanges();
                    }

                    PropertiesPricesHistories propertiesPricesHistories = new PropertiesPricesHistories();
                    propertiesPricesHistories.OfferPrice = myPropertiesVM.OfferPrice.HasValue ? myPropertiesVM.OfferPrice.Value : 0;
                    propertiesPricesHistories.OfferPriceType = myPropertiesVM.OfferPriceType.HasValue ? myPropertiesVM.OfferPriceType.Value : 0;
                    propertiesPricesHistories.CalculatedOfferPrice = myPropertiesVM.CalculatedOfferPrice.HasValue ? myPropertiesVM.CalculatedOfferPrice.Value : 0;
                    propertiesPricesHistories.PropertyId = properties.PropertyId;

                    propertiesPricesHistories.CreateEnDate = properties.CreateEnDate.Value;
                    propertiesPricesHistories.CreateTime = properties.CreateTime;
                    propertiesPricesHistories.UserIdCreator = properties.UserIdCreator.Value;
                    propertiesPricesHistories.IsActivated = true;
                    propertiesPricesHistories.IsDeleted = false;

                    teniacoApiDb.PropertiesPricesHistories.Add(propertiesPricesHistories);
                    teniacoApiDb.SaveChanges();


                    transaction.Commit();

                    return properties.PropertyId;

                }
                catch (Exception exc)
                {
                    transaction.Rollback();
                }
            }
            return 0;
        }



        public MyPropertiesVM GetMyPropertyWithMyPropertyId(long propertyId,
            List<long> childsUsersIds,
            PublicApiContext publicApiDb)
        {
            MyPropertiesVM myPropertiesVM = new MyPropertiesVM();

            try
            {

                myPropertiesVM = _mapper.Map<Entities.Properties,
                    MyPropertiesVM>(teniacoApiDb.Properties
                    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                    .Where(e => e.PropertyId.Equals(propertyId)).FirstOrDefault());

                myPropertiesVM.MyPropertyAddressVM = new MyPropertyAddressVM();

                myPropertiesVM.MyPropertyAddressVM = _mapper.Map<PropertyAddress,
                    MyPropertyAddressVM>(teniacoApiDb.PropertyAddress
                    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                    .Where(e => e.PropertyId.Equals(propertyId)).FirstOrDefault());

                //States
                var stateIds = publicApiDb.States.Select(s => s.StateId).ToList();
                var states = publicApiDb.States.Where(p => stateIds.Contains(p.StateId)).ToList();

                if (states.Where(p => p.StateId.Equals(myPropertiesVM.MyPropertyAddressVM.StateId)).Any())
                {
                    var state = states.Where(p => p.StateId.Equals(myPropertiesVM.MyPropertyAddressVM.StateId)).FirstOrDefault();
                    myPropertiesVM.MyPropertyAddressVM.StateId = state.StateId;
                    myPropertiesVM.MyPropertyAddressVM.StateName = state.StateName;
                }

                //Cities
                var cityIds = publicApiDb.Cities.Select(s => s.CityId).ToList();
                var cities = publicApiDb.Cities.Where(p => cityIds.Contains(p.CityId)).ToList();

                if (cities.Where(c => c.CityId.Equals(myPropertiesVM.MyPropertyAddressVM.CityId)).Any())
                {
                    var city = cities.Where(c => c.CityId.Equals(myPropertiesVM.MyPropertyAddressVM.CityId)).FirstOrDefault();
                    myPropertiesVM.MyPropertyAddressVM.CityId = city.CityId;
                    myPropertiesVM.MyPropertyAddressVM.CityName = city.CityName;
                }

                //Zones
                var zoneIds = publicApiDb.Zones.Select(s => s.ZoneId).ToList();
                var zones = publicApiDb.Zones.Where(p => zoneIds.Contains(p.ZoneId)).ToList();

                if (zones.Where(c => c.ZoneId.Equals(myPropertiesVM.MyPropertyAddressVM.ZoneId)).Any())
                {
                    var zone = zones.Where(c => c.ZoneId.Equals(myPropertiesVM.MyPropertyAddressVM.ZoneId)).FirstOrDefault();
                    myPropertiesVM.MyPropertyAddressVM.ZoneId = zone.ZoneId;
                    myPropertiesVM.MyPropertyAddressVM.ZoneName = zone.ZoneName;
                }

                myPropertiesVM.MyPropertiesPricesHistoriesVM = new List<MyPropertiesPricesHistoriesVM>();

                myPropertiesVM.MyPropertiesPricesHistoriesVM.Add(_mapper.Map<PropertiesPricesHistories,
                    MyPropertiesPricesHistoriesVM>(teniacoApiDb.PropertiesPricesHistories
                     .Where(h => h.PropertyId.Equals(propertyId)).OrderByDescending(c => c.CreateEnDate)
                    .ThenByDescending(c => c.CreateTime).FirstOrDefault()));

            }
            catch (Exception exc)
            { }

            return myPropertiesVM;
        }

        public long UpdateMyProperties(ref MyPropertiesVM myPropertiesVM,
           List<long> childsUsersIds)
        {
            long propertyId = myPropertiesVM.PropertyId;


            if (teniacoApiDb.Properties.Where(n => childsUsersIds.Contains(n.UserIdCreator.Value))
                        .Where(x => x.PropertyId.Equals(propertyId)).Any())
            {
                using (var transaction = teniacoApiDb.Database.BeginTransaction())
                {
                    try
                    {
                        Entities.Properties properties = (from c in teniacoApiDb.Properties
                                                          where c.PropertyId == propertyId
                                                          select c).FirstOrDefault();

                        properties.PropertyTypeId = myPropertiesVM.PropertyTypeId;
                        properties.PropertyCodeName = myPropertiesVM.PropertyCodeName;
                        properties.TypeOfUseId = myPropertiesVM.TypeOfUseId.HasValue ? myPropertiesVM.TypeOfUseId.Value : (int?)0;
                        properties.DocumentOwnershipTypeId = myPropertiesVM.DocumentOwnershipTypeId.HasValue ? myPropertiesVM.DocumentOwnershipTypeId.Value : (int?)0;
                        properties.DocumentRootTypeId = myPropertiesVM.DocumentRootTypeId.HasValue ? myPropertiesVM.DocumentRootTypeId.Value : (int?)0;
                        properties.DocumentTypeId = myPropertiesVM.DocumentTypeId.HasValue ? myPropertiesVM.DocumentTypeId.Value : (int?)0;
                        properties.Area = myPropertiesVM.Area;
                        properties.ConsultantUserId = myPropertiesVM.ConsultantUserId.HasValue ? myPropertiesVM.ConsultantUserId.Value : (long?)0;
                        //properties.OwnerId = myPropertiesVM.OwnerId.HasValue ? myPropertiesVM.OwnerId.Value : (long?)0;

                        properties.EditEnDate = DateTime.Now;
                        properties.EditTime = PersianDate.TimeNow;
                        properties.UserIdEditor = properties.UserIdEditor.Value;
                        properties.IsActivated = properties.IsActivated.HasValue ? properties.IsActivated.Value : (bool?)true;
                        properties.IsDeleted = properties.IsDeleted.HasValue ? properties.IsDeleted.Value : (bool?)false;
                        properties.PropertyDescriptions = myPropertiesVM.NewPropertyDescriptions;


                        teniacoApiDb.Entry<Entities.Properties>(properties).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();

                        if (myPropertiesVM.PriceTypeRegister == 0)//اصلاح قیمت قبلی
                        {
                            PropertiesPricesHistories propertiesPricesHistories = (from h in teniacoApiDb.PropertiesPricesHistories
                                                                                   where h.PropertyId == propertyId
                                                                                   select h).OrderByDescending(c => c.CreateEnDate)
                                                                                    .ThenByDescending(c => c.CreateTime)
                                                                                    .FirstOrDefault();

                            propertiesPricesHistories.OfferPrice = myPropertiesVM.OfferPrice;
                            propertiesPricesHistories.OfferPriceType = myPropertiesVM.OfferPriceType;
                            propertiesPricesHistories.CalculatedOfferPrice = myPropertiesVM.CalculatedOfferPrice;
                            propertiesPricesHistories.PriceTypeRegister = myPropertiesVM.PriceTypeRegister;
                            propertiesPricesHistories.EditEnDate = DateTime.Now;
                            propertiesPricesHistories.EditTime = PersianDate.TimeNow;
                            propertiesPricesHistories.IsActivated = true;
                            propertiesPricesHistories.IsDeleted = false;

                            teniacoApiDb.Entry<PropertiesPricesHistories>(propertiesPricesHistories).State = EntityState.Modified;
                            teniacoApiDb.SaveChanges();
                        }
                        else//ثبت قیمت جدید
                        {
                            PropertiesPricesHistories propertiesPricesHistories = new PropertiesPricesHistories();
                            propertiesPricesHistories.OfferPrice = myPropertiesVM.OfferPrice.HasValue ? myPropertiesVM.OfferPrice.Value : 0;
                            propertiesPricesHistories.OfferPriceType = myPropertiesVM.OfferPriceType.HasValue ? myPropertiesVM.OfferPriceType.Value : 0;
                            propertiesPricesHistories.CalculatedOfferPrice = myPropertiesVM.CalculatedOfferPrice.HasValue ? myPropertiesVM.CalculatedOfferPrice.Value : 0;
                            propertiesPricesHistories.PriceTypeRegister = myPropertiesVM.PriceTypeRegister;
                            propertiesPricesHistories.PropertyId = properties.PropertyId;

                            propertiesPricesHistories.CreateEnDate = DateTime.Now;
                            propertiesPricesHistories.CreateTime = PersianDate.TimeNow;
                            propertiesPricesHistories.UserIdCreator = properties.UserIdCreator.Value;
                            propertiesPricesHistories.IsActivated = true;
                            propertiesPricesHistories.IsDeleted = false;

                            teniacoApiDb.PropertiesPricesHistories.Add(propertiesPricesHistories);
                            teniacoApiDb.SaveChanges();


                        }


                        transaction.Commit();

                        myPropertiesVM.UserIdCreator = properties.UserIdCreator.Value;

                        return properties.PropertyId;
                    }
                    catch (Exception exc)
                    {
                        transaction.Rollback();
                    }



                }
            }

            return 0;
        }


        public bool ToggleActivationMyProperties(long propertyId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                var properties = (from c in teniacoApiDb.Properties
                                  where c.PropertyId == propertyId &&
                                  childsUsersIds.Contains(c.UserIdCreator.Value)
                                  select c).FirstOrDefault();

                if (properties != null)
                {
                    properties.IsActivated = !properties.IsActivated;
                    properties.EditEnDate = DateTime.Now;
                    properties.EditTime = PersianDate.TimeNow;
                    properties.UserIdEditor = userId;

                    teniacoApiDb.Entry<Entities.Properties>(properties).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;
        }

        public bool TemporaryDeleteMyProperties(long propertyId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                var properties = (from c in teniacoApiDb.Properties
                                  where c.PropertyId == propertyId &&
                                  childsUsersIds.Contains(c.UserIdCreator.Value)
                                  select c).FirstOrDefault();

                if (properties != null)
                {
                    properties.IsDeleted = !properties.IsDeleted;
                    properties.EditEnDate = DateTime.Now;
                    properties.EditTime = PersianDate.TimeNow;
                    properties.UserIdEditor = userId;

                    teniacoApiDb.Entry<Entities.Properties>(properties).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;
        }

        public bool CompleteDeleteMyProperties(long propertyId,
            List<long> childsUsersIds)
        {
            try
            {
                var properties = (from c in teniacoApiDb.Properties
                                  where c.PropertyId == propertyId &&
                                  childsUsersIds.Contains(c.UserIdCreator.Value)
                                  select c).FirstOrDefault();

                if (properties != null)
                {
                    using (var transaction = teniacoApiDb.Database.BeginTransaction())
                    {
                        try
                        {
                            var propertyAddress = (from c in teniacoApiDb.PropertyAddress
                                                   where c.PropertyId == propertyId &&
                                                   childsUsersIds.Contains(c.UserIdCreator.Value)
                                                   select c).FirstOrDefault();

                            teniacoApiDb.PropertyAddress.Remove(propertyAddress);
                            teniacoApiDb.SaveChanges();

                            teniacoApiDb.Properties.Remove(properties);
                            teniacoApiDb.SaveChanges();

                            transaction.Commit();

                            return true;
                        }
                        catch (Exception exc)
                        {
                            transaction.Rollback();
                        }
                    }
                }
            }
            catch (Exception exc)
            { }

            return false;
        }


        public List<MyPropertiesCompareTopicVM> GetAllMyPropertiesCompareTopic(
             PublicApiContext publicApiDb,
             GetAllMyPropertiesCompareTopicPVM getAllMyPropertiesCompareTopicPVM)
        {
            var _query = teniacoApiDb.Properties.AsQueryable();
            var PropertyList = _query.ToList();
            var _Person = publicApiDb.Persons.AsQueryable();
            var PersonList = _Person.ToList().Select(a => new { Fname = a.Name + " " + a.Family, a.PersonId });
            var result = PropertyList.Select(a => new MyPropertiesCompareTopicVM
            {
                PropertyId = a.PropertyId,
                Title = a.PropertyId.ToString() + //+"/" + (String.IsNullOrEmpty(a.PropertyCodeName)==false ? "/"+a.PropertyCodeName:"")+
                (String.IsNullOrEmpty(a.PropertyCodeName) == false ? "/" + a.PropertyCodeName : "")/* +

                (string.IsNullOrEmpty(PersonList.FirstOrDefault(b => b.PersonId == a.ConsultantUserId)?.Fname) == false ?
                "/" + PersonList.FirstOrDefault(b => b.PersonId == a.ConsultantUserId)?.Fname
                : "") +
                (string.IsNullOrEmpty(PersonList.FirstOrDefault(b => b.PersonId == a.OwnerId)?.Fname) == false ?
                "/" + PersonList.FirstOrDefault(b => b.PersonId == a.OwnerId)?.Fname : "")*/,
                PropertyTypeId = a.PropertyTypeId
            }).ToList();
            return result;
        }


        public List<MyFeaturesValuesCompareVM> GetAllMyFeaturesValuesCompare(
            GetMyFeaturesValuesComparePVM getMyFeaturesValuesComparePVM)
        {
            var query = from a in teniacoApiDb.Features.AsQueryable()
                        join b in teniacoApiDb.FeaturesValues.AsQueryable() on a.FeatureId equals b.FeatureId
                        where b.PropertyId == getMyFeaturesValuesComparePVM.PropertyId
                        select new MyFeaturesValuesCompareVM
                        {
                            FeatureId = a.FeatureId,
                            PropertyId = b.PropertyId,
                            FeatureValueId = b.FeatureValueId,
                            FeatureTitle = a.FeatureTitle,
                            FeatureValue = b.FeatureValue
                        };
            return query.ToList();

        }


        public MyPropertiesCompareBasicInfoVM GetMyPropertiesCompareBasicInfo(
            PublicApiContext publicApiDb,
            GetMyPropertiesCompareBasicInfoPVM getMyPropertiesCompareBasicInfoPVM)
        {

            var _Property = teniacoApiDb.Properties.FirstOrDefault(a => a.PropertyId == getMyPropertiesCompareBasicInfoPVM.PropertyId);
            ArgumentNullException.ThrowIfNull(_Property);
            var _Propert_Address = teniacoApiDb.PropertyAddress.FirstOrDefault(a => a.PropertyId == getMyPropertiesCompareBasicInfoPVM.PropertyId);
            MyPropertiesCompareBasicInfoVM result = new MyPropertiesCompareBasicInfoVM();
            result.Area = _Property?.Area;
            result.PropertyCodeName = _Property?.PropertyCodeName;
            result.PropertyTypesName = teniacoApiDb.PropertyTypes.FirstOrDefault(a => a.PropertyTypeId == _Property!.PropertyTypeId)?.PropertyTypeTilte;
            result.TypeOfUses = teniacoApiDb.TypeOfUses.FirstOrDefault(a => a.TypeOfUseId == _Property!.TypeOfUseId)?.TypeOfUseTitle;
            result.DocumentTypes = teniacoApiDb.DocumentTypes.FirstOrDefault(a => a.DocumentTypeId == _Property!.DocumentTypeId)?.DocumentTypeTitle;

            if (_Propert_Address != null)
            {
                result.StateName = publicApiDb.States.FirstOrDefault(a => a.StateId == _Propert_Address!.StateId)?.StateName;
                result.CityName = publicApiDb.Cities.FirstOrDefault(a => a.CityId == _Propert_Address!.CityId)?.CityName;
                if (_Propert_Address.ZoneId.HasValue && _Propert_Address.ZoneId.Value > 0)
                    result.ZoneName = publicApiDb.Zones.FirstOrDefault(a => a.ZoneId == _Propert_Address.ZoneId)?.ZoneName;
                if (_Propert_Address.DistrictId.HasValue && _Propert_Address.DistrictId.Value > 0)
                    result.DistrictName = publicApiDb.Districts.FirstOrDefault(a => a.DistrictId == _Propert_Address.DistrictId)?.DistrictName;
                result.LocationLat = _Propert_Address.LocationLat;
                result.LocationLon = _Propert_Address.LocationLon;


            }
            return result;
        }

        public List<PropertiesInfoVM> GetAllPropertiesInfo(GetAllPropertiesInfoPVM getAllPropertiesInfoPVM)
        {
            List<PropertiesInfoVM> list = new List<PropertiesInfoVM>();

            try
            {
                //var queryPrice = from a in teniacoApiDb.PropertiesPricesHistories.AsQueryable()

                var Propquery = from a in teniacoApiDb.Properties.AsQueryable()
                                join b in teniacoApiDb.PropertyAddress.AsQueryable() on a.PropertyId equals b.PropertyId into temp
                                from c in temp.DefaultIfEmpty()
                                where a.IsDeleted == false && a.IsActivated == true
                                select new PropertiesInfoVM
                                {
                                    PropertyId = a.PropertyId,
                                    PropertyTypeId = a.PropertyTypeId,
                                    TypeOfUseId = a.TypeOfUseId,
                                    DocumentTypeId = a.DocumentTypeId,
                                    ConsultantUserId = a.ConsultantUserId,
                                    PropertyCodeName = a.PropertyCodeName,
                                    //OwnerId = a.OwnerId,
                                    PropertyDescriptions = a.PropertyDescriptions,
                                    UserIdCreator = a.UserIdCreator,
                                    Area = a.Area,
                                    ProppertyAddressInfo = new ProppertyAddressInfo
                                    {
                                        LocationLat = c.LocationLat,
                                        LocationLon = c.LocationLon,
                                        Address = c.Address,
                                        StateId = c.StateId,
                                        CityId = c.CityId,
                                        ZoneId = c.ZoneId,
                                        DistrictId = c.DistrictId
                                    },
                                    OfferPrice = (from k in teniacoApiDb.PropertiesPricesHistories.Where(k => k.PropertyId == a.PropertyId)
                                                  orderby k.PropertyPriceHistoryId descending
                                                  select k.OfferPrice).FirstOrDefault(),
                                    OfferPriceType = (from k in teniacoApiDb.PropertiesPricesHistories.Where(k => k.PropertyId == a.PropertyId)
                                                      orderby k.PropertyPriceHistoryId descending
                                                      select k.OfferPriceType).FirstOrDefault(),
                                    PropertyFiles = (List<PropertyFilesVM>)(from f in teniacoApiDb.PropertyFiles.AsQueryable()
                                                                            where f.PropertyId == a.PropertyId && f.IsActivated == true && f.IsDeleted == false
                                                                            select new PropertyFilesVM
                                                                            {
                                                                                PropertyId = f.PropertyId,
                                                                                PropertyFileId = f.PropertyFileId,
                                                                                PropertyFileTitle = f.PropertyFileTitle,
                                                                                PropertyFilePath = f.PropertyFilePath,
                                                                                PropertyFileExt = f.PropertyFileExt,
                                                                                PropertyFileOrder = f.PropertyFileOrder,
                                                                                PropertyFileType = f.PropertyFileType

                                                                            })

                                };
                list = Propquery.Where(a => a.OwnerId == getAllPropertiesInfoPVM.OwnerId && a.UserIdCreator == getAllPropertiesInfoPVM.OwnerId).ToList();
            }
            catch (Exception exx)
            {

            }
            return list;
        }
        #endregion

        #region Methods for Work With MyPropertyTypesManagement
        public List<MyPropertyTypesVM> GetAllMyPropertyTypesList()
        {
            try
            {
                var myPropertyTypes = teniacoApiDb.PropertyTypes.Where(p => p.IsDeleted.Value.Equals(false) && p.IsActivated.Value.Equals(true)).AsQueryable();

                return _mapper.Map<List<PropertyTypes>, List<MyPropertyTypesVM>>(myPropertyTypes.ToList());
            }
            catch (Exception exc)
            { }
            return new List<MyPropertyTypesVM>();
        }
        #endregion

        #region  Methods for Work With MyPropertiesFeaturesManagement
        public MyPropertyFeaturesValuesVM GetMyPropertyFeaturesValues(long propertyId,
        int propertyTypeId)
        {
            MyPropertyFeaturesValuesVM myPropertyFeaturesValuesVM = new MyPropertyFeaturesValuesVM();

            try
            {

                if (teniacoApiDb.Features.Where(f => f.PropertyTypeId.Equals(propertyTypeId)).Any())
                {
                    myPropertyFeaturesValuesVM.FeaturesVMList = _mapper.Map<List<Features>,
                        List<FeaturesVM>>(teniacoApiDb.Features.Where(f => f.PropertyTypeId.Equals(propertyTypeId)).ToList());

                    List<int> featureIds = myPropertyFeaturesValuesVM.FeaturesVMList.Select(f => f.FeatureId).ToList();

                    if (teniacoApiDb.FeaturesOptions.Where(fo => featureIds.Contains(fo.FeatureId)).Any())
                    {
                        myPropertyFeaturesValuesVM.FeaturesOptionsVMList = _mapper.Map<List<FeaturesOptions>,
                            List<FeaturesOptionsVM>>(teniacoApiDb.FeaturesOptions.Where(fo => featureIds.Contains(fo.FeatureId)).ToList());
                    }

                    if (teniacoApiDb.FeaturesValues.Where(fv => fv.PropertyId.Equals(propertyId)).Any())
                    {
                        myPropertyFeaturesValuesVM.FeaturesValuesVMList = myPropertyFeaturesValuesVM.FeaturesValuesVMList = _mapper.Map<List<FeaturesValues>,
                            List<FeaturesValuesVM>>(teniacoApiDb.FeaturesValues.Where(fv => fv.PropertyId.Equals(propertyId)).ToList());
                    }
                }
            }
            catch (Exception exc)
            { }

            return myPropertyFeaturesValuesVM;
        }


        public bool UpdateMyPropertyFeatures(long propertyId, List<FeaturesValuesVM> featuresValuesVMList)
        {
            try
            {
                if (teniacoApiDb.FeaturesValues.Where(fv => fv.PropertyId.Equals(propertyId)).Any())
                {
                    var oldFeaturesValues = teniacoApiDb.FeaturesValues.Where(fv => fv.PropertyId.Equals(propertyId)).ToList();
                    teniacoApiDb.FeaturesValues.RemoveRange(oldFeaturesValues);
                    teniacoApiDb.SaveChanges();
                }

                var featuresValuesList = _mapper.Map<List<FeaturesValuesVM>, List<FeaturesValues>>(featuresValuesVMList);

                teniacoApiDb.FeaturesValues.AddRange(featuresValuesList);
                teniacoApiDb.SaveChanges();

                return true;
            }
            catch (Exception exc)
            { }

            return false;
        }
        #endregion

        #region Methods for Work With MyPropertyFilesManagement

        public List<MyPropertyFilesVM> GetAllMyPropertyFilesList(ref int listCount,
        List<long> childsUsersIds,
        long? propertyId = null,
        string propertyFileTitle = "",
        string propertyFileType = "",
        string jtSorting = null)
        {
            List<MyPropertyFilesVM> myPropertyFilesVMList = new List<MyPropertyFilesVM>();

            try
            {
                var list = (from pf in teniacoApiDb.PropertyFiles
                            where childsUsersIds.Contains(pf.UserIdCreator.Value) &&
                            pf.IsDeleted.Value.Equals(false) &&
                            pf.IsActivated.Value.Equals(true) &&
                            pf.PropertyId.Equals(propertyId)
                            select pf).AsQueryable();

                if (!string.IsNullOrEmpty(propertyFileTitle))
                    list = list.Where(a => a.PropertyFileTitle.Contains(propertyFileTitle));

                if (!string.IsNullOrEmpty(propertyFileType))
                    list = list.Where(a => a.PropertyFileType.Contains(propertyFileType));

                listCount = list.Count();

                myPropertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<MyPropertyFilesVM>>(list.OrderByDescending(pf => pf.PropertyFileId).ToList());
            }
            catch (Exception exc)
            { }

            return myPropertyFilesVMList;
        }


        public List<MyPropertyFilesVM> GetListOfMyPropertyFiles(int jtStartIndex,
             int jtPageSize,
             ref int listCount,
             List<long> childsUsersIds,
             long? propertyId = null,
             string propertyFileTitle = "",
             string propertyFileType = "",
             string jtSorting = null)
        {
            List<MyPropertyFilesVM> myPropertyFilesVMList = new List<MyPropertyFilesVM>();

            var list = (from pf in teniacoApiDb.PropertyFiles
                        where /*childsUsersIds.Contains(pf.UserIdCreator.Value) &&*/
                        pf.IsDeleted.Value.Equals(false) &&
                        pf.IsActivated.Value.Equals(true) &&
                        pf.PropertyId.Equals(propertyId)
                        select pf).AsQueryable();

            if (!string.IsNullOrEmpty(propertyFileTitle))
                list = list.Where(a => a.PropertyFileTitle.Contains(propertyFileTitle));

            if (!string.IsNullOrEmpty(propertyFileType))
                list = list.Where(a => a.PropertyFileType.Contains(propertyFileType));

            listCount = list.Count();

            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    if (listCount > jtPageSize)
                    {

                        myPropertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<MyPropertyFilesVM>>(list.OrderByDescending(s => s.PropertyId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList());
                    }
                    else
                    {

                        myPropertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<MyPropertyFilesVM>>(list.OrderByDescending(s => s.PropertyId).ToList());
                    }
                }
                else
                {
                    if (listCount > jtPageSize)
                    {
                        switch (jtSorting)
                        {
                            case "PropertyFileTitle ASC":
                                list = list.OrderBy(l => l.PropertyFileTitle);
                                break;
                            case "PropertyFileTitle DESC":
                                list = list.OrderByDescending(l => l.PropertyFileTitle);
                                break;
                        }

                        if (string.IsNullOrEmpty(jtSorting))
                            myPropertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<MyPropertyFilesVM>>(list.OrderByDescending(s => s.PropertyId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList());
                        else
                            myPropertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<MyPropertyFilesVM>>(list.Skip(jtStartIndex).Take(jtPageSize).ToList());
                    }
                    else
                    {
                        myPropertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<MyPropertyFilesVM>>(list.ToList());
                    }
                }

            }
            catch (Exception exc)
            { }
            return myPropertyFilesVMList;
        }


        public bool AddToMyPropertyFiles(List<MyPropertyFilesVM> myPropertyFilesVMList)
        {
            try
            {
                if (myPropertyFilesVMList != null)
                    if (myPropertyFilesVMList.Count > 0)
                    {
                        var myPropertyFilesList = _mapper.Map<List<MyPropertyFilesVM>, List<PropertyFiles>>(myPropertyFilesVMList);

                        teniacoApiDb.PropertyFiles.AddRange(myPropertyFilesList);
                        teniacoApiDb.SaveChanges();

                        return true;
                    }
            }
            catch (Exception exc)
            {
            }
            return false;
        }

        public MyPropertyFilesVM GetMyPropertyFileWithMyPropertyFileId(int propertyFileId,
           List<long> childsUsersIds)
        {
            MyPropertyFilesVM myPropertyFilesVM = new MyPropertyFilesVM();

            try
            {
                myPropertyFilesVM = _mapper.Map<PropertyFiles,
                    MyPropertyFilesVM>(teniacoApiDb.PropertyFiles
                    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                    .Where(e => e.PropertyFileId.Equals(propertyFileId)).FirstOrDefault());
            }
            catch (Exception exc)
            { }

            return myPropertyFilesVM;
        }


        public bool UpdateMyPropertyFiles(ref MyPropertyFilesVM myPropertyFilesVM,
           List<long> childsUsersIds)
        {
            int propertyFileId = myPropertyFilesVM.PropertyFileId;
            long propertyId = myPropertyFilesVM.PropertyId;
            int propertyFileOrder = myPropertyFilesVM.PropertyFileOrder;
            string propertyFileExt = myPropertyFilesVM.PropertyFileExt;
            string propertyFilePath = myPropertyFilesVM.PropertyFilePath;
            string propertyFileTitle = myPropertyFilesVM.PropertyFileTitle;
            string propertyFileType = myPropertyFilesVM.PropertyFileType;

            try
            {
                PropertyFiles myPropertyFiles = (from c in teniacoApiDb.PropertyFiles
                                                 where c.PropertyFileId == propertyFileId
                                                 select c).FirstOrDefault();

                myPropertyFiles.PropertyId = propertyId;
                myPropertyFiles.PropertyFileExt = propertyFileExt;
                myPropertyFiles.PropertyFileOrder = propertyFileOrder;
                myPropertyFiles.PropertyFilePath = propertyFilePath;
                myPropertyFiles.PropertyFileTitle = propertyFileTitle;
                myPropertyFiles.PropertyFileType = propertyFileType;

                myPropertyFiles.EditEnDate = DateTime.Now;
                myPropertyFiles.EditTime = PersianDate.TimeNow;
                myPropertyFiles.UserIdEditor = myPropertyFilesVM.UserIdEditor;
                myPropertyFiles.IsActivated = myPropertyFilesVM.IsActivated;
                myPropertyFiles.IsDeleted = myPropertyFilesVM.IsDeleted;

                teniacoApiDb.Entry<PropertyFiles>(myPropertyFiles).State = EntityState.Modified;
                teniacoApiDb.SaveChanges();

                return true;
            }
            catch (Exception exc)
            {
            }

            return false;
        }

        public bool ToggleActivationMyPropertyFiles(int propertyFileId,
         long userId,
         List<long> childsUsersIds)
        {
            try
            {
                var propertyFiles = (from c in teniacoApiDb.PropertyFiles
                                     where c.PropertyFileId == propertyFileId &&
                                     childsUsersIds.Contains(c.UserIdCreator.Value)
                                     select c).FirstOrDefault();

                if (propertyFiles != null)
                {
                    propertyFiles.IsActivated = !propertyFiles.IsActivated;
                    propertyFiles.EditEnDate = DateTime.Now;
                    propertyFiles.EditTime = PersianDate.TimeNow;
                    propertyFiles.UserIdEditor = userId;

                    teniacoApiDb.Entry<PropertyFiles>(propertyFiles).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;
        }

        public bool TemporaryDeleteMyPropertyFiles(int propertyFileId,
          long userId,
          List<long> childsUsersIds)
        {
            try
            {
                var propertyFiles = (from c in teniacoApiDb.PropertyFiles
                                     where c.PropertyFileId == propertyFileId &&
                                     childsUsersIds.Contains(c.UserIdCreator.Value)
                                     select c).FirstOrDefault();

                if (propertyFiles != null)
                {
                    propertyFiles.IsDeleted = !propertyFiles.IsDeleted;
                    propertyFiles.EditEnDate = DateTime.Now;
                    propertyFiles.EditTime = PersianDate.TimeNow;
                    propertyFiles.UserIdEditor = userId;

                    teniacoApiDb.Entry<PropertyFiles>(propertyFiles).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;
        }

        public bool CompleteDeleteMyPropertyFiles(int propertyFileId,
            List<long> childsUsersIds)
        {
            try
            {
                var propertyFiles = (from c in teniacoApiDb.PropertyFiles
                                     where c.PropertyFileId == propertyFileId &&
                                     childsUsersIds.Contains(c.UserIdCreator.Value)
                                     select c).FirstOrDefault();

                if (propertyFiles != null)
                {
                    teniacoApiDb.PropertyFiles.Remove(propertyFiles);
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;
        }


        public bool UpdateListPropertyFilesTitle(List<UpdateListPropertyFilesTitlePVM> list, long userid, string edittime)
        {
            try
            {
                var lst = teniacoApiDb.PropertyFiles.Where(a => list.Select(b => b.PropertyFileId).Contains(a.PropertyFileId)).ToList();
                foreach (var item in lst)
                {
                    item.PropertyFileTitle = list.First(a => a.PropertyFileId == item.PropertyFileId).PropertyFileTitle;
                    item.EditEnDate = DateTime.Now;
                    item.EditTime = edittime;
                    item.UserIdEditor = userid;

                }
                return teniacoApiDb.SaveChanges() > 0;

            }
            catch (Exception exx)
            {

            }
            return false;
        }

        public (bool IsSuccess, List<PropertiesInfoVM>? finalResult) AddToMyPropertyFilesReg(List<MyPropertyFilesVM> myPropertyFilesVMList, int CurrentUserId)
        {
            try
            {
                if (myPropertyFilesVMList?.Count > 0)
                {
                    var myPropertyFilesList = _mapper.Map<List<MyPropertyFilesVM>, List<PropertyFiles>>(myPropertyFilesVMList);

                    teniacoApiDb.PropertyFiles.AddRange(myPropertyFilesList);
                    teniacoApiDb.SaveChanges();

                    GetAllPropertiesInfoPVM prm = new GetAllPropertiesInfoPVM() { OwnerId = CurrentUserId };

                    var result = GetAllPropertiesInfo(prm);// _mapper.Map<List<PropertyFiles>, List<MyPropertyFilesVM>>(myPropertyFilesList);
                    return (true, result);
                }
            }
            catch (Exception exc)
            {
            }
            return (false, null);
        }
        #endregion

        #region Methods For Work With MyPropertylocationManagement
        public bool UpdateMyPropertyLocation(long userId,
            long propertyId,
            int stateId,
            int cityId,
            int zoneId,
            int districtId,
            string address,
            double locationLat,
            double locationLon)
        {
            try
            {
                if (teniacoApiDb.PropertyAddress.Where(pa => pa.PropertyId.Equals(propertyId)).Any())
                {
                    var myPropertyAddress = teniacoApiDb.PropertyAddress.Where(pa => pa.PropertyId.Equals(propertyId)).FirstOrDefault();

                    if (myPropertyAddress != null)
                    {

                        myPropertyAddress.LocationLat = locationLat;
                        myPropertyAddress.LocationLon = locationLon;
                        myPropertyAddress.StateId = stateId;
                        myPropertyAddress.CityId = cityId;
                        myPropertyAddress.ZoneId = zoneId;
                        myPropertyAddress.DistrictId = districtId;
                        myPropertyAddress.Address = address;
                        myPropertyAddress.EditEnDate = DateTime.Now;
                        myPropertyAddress.EditTime = PersianDate.TimeNow;
                        myPropertyAddress.UserIdEditor = userId;
                        teniacoApiDb.Entry<PropertyAddress>(myPropertyAddress).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();

                        return true;
                    }
                }
            }
            catch (Exception exc)
            { }

            return false;
        }
        #endregion

        #region Methods For Work With MyPropertiesPricesHistoriesManagement
        public List<MyPropertiesPricesHistoriesVM> GetListOfMyPropertiesPricesHistories(
             int jtStartIndex,
             int jtPageSize,
             ref int listCount,
             List<long> childsUsersIds,
             long propertyId,
             string jtSorting = null)
        {
            List<MyPropertiesPricesHistoriesVM> myPropertiesPricesHistoriesVMList = new List<MyPropertiesPricesHistoriesVM>();


            var list = (from p in teniacoApiDb.PropertiesPricesHistories
                        where p.IsActivated.Value.Equals(true) &&
                        p.IsDeleted.Value.Equals(false)
                        select new MyPropertiesPricesHistoriesVM
                        {
                            PropertyPriceHistoryId = p.PropertyPriceHistoryId,
                            CalculatedOfferPrice = p.CalculatedOfferPrice,
                            OfferPrice = p.OfferPrice,
                            PropertyId = p.PropertyId,
                            OfferPriceType = p.OfferPriceType,
                            UserIdCreator = p.UserIdCreator.Value,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor.Value,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover.Value,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted,
                        }).AsQueryable();

            if (propertyId != null)
                if (propertyId > 0)
                    list = list.Where(a => a.PropertyId.Equals(propertyId));

            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        myPropertiesPricesHistoriesVMList = list.OrderByDescending(s => s.PropertyPriceHistoryId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                        myPropertiesPricesHistoriesVMList = list.OrderByDescending(s => s.PropertyPriceHistoryId).ToList();
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        if (string.IsNullOrEmpty(jtSorting))
                            myPropertiesPricesHistoriesVMList = list.OrderByDescending(s => s.PropertyPriceHistoryId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            myPropertiesPricesHistoriesVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {

                        myPropertiesPricesHistoriesVMList = list.ToList();
                    }
                }
            }
            catch (Exception exc)
            { }
            return myPropertiesPricesHistoriesVMList;
        }
        #endregion

        #endregion

        #region OutterDashboard

        public OutterDashboardPricesBlockVM GetOutterDashboardPricesBlock(long userId,
            long personId,
            IProjectsApiBusiness projectsApiBusiness)
        {
            OutterDashboardPricesBlockVM outterDashboardPricesBlockVM = new OutterDashboardPricesBlockVM();

            DateTime greatestDateTime = DateTime.Now;

            #region Properties

            try
            {

                string sp = @"

                        --last price	
                        select 	
                        	ROW_NUMBER() OVER(ORDER BY Price ASC) AS RowNumber, * from	(
                        	select 
                        	'last' PriceType,
                        	t.CreateEnDate,
                        	CASE
                                WHEN OfferPriceType = 0 THEN ((PropertyOwners.SharePercent * CalculatedOfferPrice) / 100)
                                WHEN OfferPriceType = 1 THEN ((PropertyOwners.SharePercent * OfferPrice) / 100)
                                END as Price,
                            t.PropertyId AS ParentId 
                        	from TeniacoDb.dbo.PropertiesPricesHistories t
                        inner join
                        ( SELECT PropertyId, MAX(CreateEnDate) as CreateEnDate
                        FROM TeniacoDb.dbo.PropertiesPricesHistories
                        GROUP BY PropertyId ) a
                        on a.PropertyId = t.PropertyId and a.CreateEnDate = t.CreateEnDate
                        inner join TeniacoDb.dbo.PropertyOwners on t.PropertyId = TeniacoDb.dbo.PropertyOwners.PropertyId
                        where OwnerId = " + userId + @"
                        
                        union all 
                        
                        --first price
                        select 
                        	'first' PriceType,
                        	t.CreateEnDate,
                        	CASE
                                WHEN OfferPriceType = 0 THEN ((PropertyOwners.SharePercent * CalculatedOfferPrice) / 100)
                                WHEN OfferPriceType = 1 THEN ((PropertyOwners.SharePercent * OfferPrice) / 100)
                                END as Price,
                            t.PropertyId ParentId 
                        	from TeniacoDb.dbo.PropertiesPricesHistories t
                        inner join
                        ( SELECT PropertyId, MIN(CreateEnDate) as CreateEnDate
                        FROM TeniacoDb.dbo.PropertiesPricesHistories
                        GROUP BY PropertyId ) a
                        on a.PropertyId = t.PropertyId and a.CreateEnDate = t.CreateEnDate
                        inner join TeniacoDb.dbo.PropertyOwners on t.PropertyId = TeniacoDb.dbo.PropertyOwners.PropertyId
                        where OwnerId = " + userId + @"
                        ) tmp
                        
                        
                        ";

                var propertyIdsWithConstructionProjects = (from c in projectsApiBusiness.ProjectsApiDb.ConstructionProjects
                                                           join owner in projectsApiBusiness.ProjectsApiDb.ConstructionProjectOwnerUsers
                                                           on c.ConstructionProjectId equals owner.ConstructionProjectId
                                                           where owner.OwnerUserId.Equals(userId)
                                                           select c.PropertyId).Distinct().ToList();

                List<OutterDashboardPricesVM> outterDashboardPricesVMList = teniacoApiDb.OutterDashboardPricesVM.FromSqlRaw(sp).Where(p => !propertyIdsWithConstructionProjects.Contains(p.ParentId)).ToList();

                if (outterDashboardPricesVMList != null)
                    if (outterDashboardPricesVMList.Count > 0)
                    {
                        outterDashboardPricesBlockVM.SumOfFirstPropertiesPrices = outterDashboardPricesVMList.Where(p => p.PriceType.Equals("first")).Sum(p => p.Price);
                        outterDashboardPricesBlockVM.OldestEnDateOfPropertyInvestment = outterDashboardPricesVMList.Where(p => p.PriceType.Equals("first")).OrderBy(p => p.CreateEnDate).
                            FirstOrDefault().CreateEnDate;

                        outterDashboardPricesBlockVM.OldestFaDateOfPropertyInvestment = PersianDate.PersianDateFrom(outterDashboardPricesBlockVM.OldestEnDateOfPropertyInvestment);

                        outterDashboardPricesBlockVM.SumOfLastPropertiesPrices = outterDashboardPricesVMList.Where(p => p.PriceType.Equals("last")).Sum(p => p.Price);
                        outterDashboardPricesBlockVM.NewestEnDateOfPropertyInvestment = outterDashboardPricesVMList.Where(p => p.PriceType.Equals("last")).OrderByDescending(p => p.CreateEnDate).
                            FirstOrDefault().CreateEnDate;

                        greatestDateTime = outterDashboardPricesBlockVM.NewestEnDateOfPropertyInvestment;

                        outterDashboardPricesBlockVM.NewestFaDateOfPropertyInvestment = PersianDate.PersianDateFrom(outterDashboardPricesBlockVM.NewestEnDateOfPropertyInvestment);

                        outterDashboardPricesBlockVM.PropertiesProfit = outterDashboardPricesBlockVM.SumOfLastPropertiesPrices - outterDashboardPricesBlockVM.SumOfFirstPropertiesPrices;

                        outterDashboardPricesBlockVM.PropertiesGrowth = (outterDashboardPricesBlockVM.PropertiesProfit / outterDashboardPricesBlockVM.SumOfFirstPropertiesPrices) * 100;
                    }
            }
            catch (Exception exc)
            { }

            #endregion

            #region ConstructionProjects

            try
            {

                string sp = @"

                    --last price
                    select 	
                    	ROW_NUMBER() OVER(ORDER BY Price ASC) AS RowNumber, * from (
                    	select 
                    	'last' PriceType,
                    	t.CreateEnDate,
                    	((ConstructionProjectOwnerUsers.SharePercent * CurrentValueOfProject) / 100) as Price,
                        t.ConstructionProjectId ParentId 
                    	from ProjectsDb.dbo.ConstructionProjectPriceHistories t
                    inner join
                    ( SELECT ConstructionProjectId, MAX(CreateEnDate) as CreateEnDate
                    FROM ProjectsDb.dbo.ConstructionProjectPriceHistories
                    GROUP BY ConstructionProjectId ) a
                    on a.ConstructionProjectId = t.ConstructionProjectId and a.CreateEnDate = t.CreateEnDate
                    inner join ProjectsDb.dbo.ConstructionProjectOwnerUsers on t.ConstructionProjectId = ProjectsDb.dbo.ConstructionProjectOwnerUsers.ConstructionProjectId
                    where OwnerUserId = " + userId + @"
                    
                    union all
                    
                    --first price
                    select 
                    	'first' PriceType,
                    	t.CreateEnDate,
                    	((ConstructionProjectOwnerUsers.SharePercent * CurrentValueOfProject) / 100) as Price,
                        t.ConstructionProjectId ParentId 
                    	from ProjectsDb.dbo.ConstructionProjectPriceHistories t
                    inner join
                    ( SELECT ConstructionProjectId, MIN(CreateEnDate) as CreateEnDate
                    FROM ProjectsDb.dbo.ConstructionProjectPriceHistories
                    GROUP BY ConstructionProjectId ) a
                    on a.ConstructionProjectId = t.ConstructionProjectId and a.CreateEnDate = t.CreateEnDate
                    inner join ProjectsDb.dbo.ConstructionProjectOwnerUsers on t.ConstructionProjectId = ProjectsDb.dbo.ConstructionProjectOwnerUsers.ConstructionProjectId
                    where OwnerUserId = " + userId + @"
                    
                    ) tmp
                    ";

                List<OutterDashboardPricesVM> outterDashboardPricesVMList = projectsApiBusiness.ProjectsApiDb.OutterDashboardPricesVM.FromSqlRaw(sp).ToList();

                if (outterDashboardPricesVMList != null)
                    if (outterDashboardPricesVMList.Count > 0)
                    {
                        outterDashboardPricesBlockVM.SumOfFirstConstructionProjectsPrices = outterDashboardPricesVMList.Where(p => p.PriceType.Equals("first")).Sum(p => p.Price);
                        outterDashboardPricesBlockVM.OldestEnDateOfConstructionProjectInvestment = outterDashboardPricesVMList.Where(p => p.PriceType.Equals("first")).OrderBy(p => p.CreateEnDate).
                            FirstOrDefault().CreateEnDate;

                        outterDashboardPricesBlockVM.OldestFaDateOfConstructionProjectInvestment = PersianDate.PersianDateFrom(outterDashboardPricesBlockVM.OldestEnDateOfConstructionProjectInvestment);

                        outterDashboardPricesBlockVM.SumOfLastConstructionProjectsPrices = outterDashboardPricesVMList.Where(p => p.PriceType.Equals("last")).Sum(p => p.Price);
                        outterDashboardPricesBlockVM.NewestEnDateOfConstructionProjectInvestment = outterDashboardPricesVMList.Where(p => p.PriceType.Equals("last")).OrderByDescending(p => p.CreateEnDate).
                            FirstOrDefault().CreateEnDate;

                        if (outterDashboardPricesBlockVM.NewestEnDateOfConstructionProjectInvestment > outterDashboardPricesBlockVM.NewestEnDateOfPropertyInvestment)
                            greatestDateTime = outterDashboardPricesBlockVM.NewestEnDateOfConstructionProjectInvestment;

                        outterDashboardPricesBlockVM.NewestFaDateOfConstructionProjectInvestment = PersianDate.PersianDateFrom(outterDashboardPricesBlockVM.NewestEnDateOfConstructionProjectInvestment);

                        outterDashboardPricesBlockVM.ConstructionProjectsProfit = outterDashboardPricesBlockVM.SumOfLastConstructionProjectsPrices - outterDashboardPricesBlockVM.SumOfFirstConstructionProjectsPrices;

                        outterDashboardPricesBlockVM.ConstructionProjectsGrowth = (outterDashboardPricesBlockVM.ConstructionProjectsProfit / outterDashboardPricesBlockVM.SumOfFirstConstructionProjectsPrices) * 100;
                    }
            }
            catch (Exception exc)
            { }

            try
            {
                double sumOfPayments = 0;

                var constructionProjectIds = (from c in projectsApiBusiness.ProjectsApiDb.ConstructionProjects
                                              join owner in projectsApiBusiness.ProjectsApiDb.ConstructionProjectOwnerUsers
                                              on c.ConstructionProjectId equals owner.ConstructionProjectId
                                              where owner.OwnerUserId.Equals(userId)
                                              select c.ConstructionProjectId.ToString()).ToList();

                foreach (var constructionProjectId in constructionProjectIds)
                {
                    string sp = @"

                        SELECT CellIndex, REPLACE(CellData, ',', '') AS CellData  
                        FROM (
                          SELECT *, MAX(CellIndex) OVER() AS MaxCellIndex
                          FROM ConstructionProjectFinancialData
                          WHERE ParentType = 'person' 
                            AND RecordType = 'private'
                           AND UserIdCreator = " + userId + @"
                            AND ParentId = " + constructionProjectId + @"
                            AND ExcelSheetConfigId IN (
                              SELECT ExcelSheetConfigId
                              FROM ExcelSheetConfigs
                              INNER JOIN ConstructionProjects
                                ON ExcelSheetConfigs.ExcelSheetConfigName = ConstructionProjects.WorkshopName
                              WHERE ExcelSheetConfigs.ReportType = 'financial'
                            )
                        ) t
                        WHERE CellIndex = MaxCellIndex
                        
                        ";

                    var payments = projectsApiBusiness.ProjectsApiDb.ConstructionProjectFinancialData.FromSqlRaw(sp).Select(result => new RowsDataVM
                    {
                        CellData = result.CellData
                    }).ToList();

                    if (payments != null)
                        if (payments.Count > 0)
                        {
                            sumOfPayments = sumOfPayments + payments.Sum(f => double.Parse(f.CellData));
                        }
                }

                outterDashboardPricesBlockVM.SumOfPayments = sumOfPayments;

                DateTime currentDate = DateTime.Now;

                outterDashboardPricesBlockVM.LastDaysOfLastUpdate = (int)(currentDate - greatestDateTime).TotalDays;
            }
            catch (Exception exc)
            { }

            #endregion

            outterDashboardPricesBlockVM.TotalInvestment = outterDashboardPricesBlockVM.SumOfLastPropertiesPrices +
                outterDashboardPricesBlockVM.SumOfLastConstructionProjectsPrices +
                outterDashboardPricesBlockVM.SumOfPayments;

            return outterDashboardPricesBlockVM;
        }

        //پراکندگی سرمایه
        public List<MyFundsVM> GetListOfMyFundsDispersion(long userId,
            long personId,
            IProjectsApiBusiness projectsApiBusiness)
        {
            List<MyFundsVM> myFundsVMList = new List<MyFundsVM>();

            #region Properties

            try
            {

                string sp = @"

                        --last price	
                        select 	
                        	ROW_NUMBER() OVER(ORDER BY Price ASC) AS RowNumber, * from	(
                        	select 
                        	'last' PriceType,
                        	t.CreateEnDate,
                        	CASE
                                WHEN OfferPriceType = 0 THEN ((PropertyOwners.SharePercent * CalculatedOfferPrice) / 100)
                                WHEN OfferPriceType = 1 THEN ((PropertyOwners.SharePercent * OfferPrice) / 100)
                                END as Price,
                            CAST(t.PropertyId AS bigint) ParentId, 
                        	Properties.PropertyCodeName MyFundTitle 
                        	from PropertiesPricesHistories t
                        inner join
                        ( SELECT PropertyId, MAX(CreateEnDate) as CreateEnDate
                        FROM PropertiesPricesHistories
                        GROUP BY PropertyId ) a
                        on a.PropertyId = t.PropertyId and a.CreateEnDate = t.CreateEnDate 
                        inner join PropertyOwners on t.PropertyId = PropertyOwners.PropertyId 
                        inner join Properties on t.PropertyId = Properties.PropertyId 
                        where OwnerId = " + userId + @"
                        
                        ) tmp
                        
                        
                        ";

                var propertyIdsWithConstructionProjects = (from c in projectsApiBusiness.ProjectsApiDb.ConstructionProjects
                                                           join owner in projectsApiBusiness.ProjectsApiDb.ConstructionProjectOwnerUsers
                                                           on c.ConstructionProjectId equals owner.ConstructionProjectId
                                                           where owner.OwnerUserId.Equals(userId)
                                                           select c.PropertyId).ToList();

                List<MyFundsDispersionVM> myFundsDispersionVMList = teniacoApiDb.MyFundsDispersionVM.FromSqlRaw(sp).Where(p => !propertyIdsWithConstructionProjects.Contains(p.ParentId.Value)).ToList();

                if (myFundsDispersionVMList != null)
                    if (myFundsDispersionVMList.Count > 0)
                    {
                        foreach (var dispersionOfMyFundVM in myFundsDispersionVMList)
                        {
                            try
                            {
                                MyFundsVM myFundsVM = new MyFundsVM()
                                {
                                    MyFundPrice = ((dispersionOfMyFundVM.Price.HasValue) ? dispersionOfMyFundVM.Price.Value : 0),
                                    MyFundTitle = (!string.IsNullOrEmpty(dispersionOfMyFundVM.MyFundTitle) ? dispersionOfMyFundVM.MyFundTitle : "وارد نشده"),
                                    Growth = 0
                                };

                                myFundsVMList.Add(myFundsVM);
                            }
                            catch (Exception exc)
                            { }
                        }
                    }
            }
            catch (Exception exc)
            { }

            #endregion

            #region ConstructionProjects

            try
            {

                string sp = @"

                    --last price
                    select 	
                    	ROW_NUMBER() OVER(ORDER BY Price ASC) AS RowNumber, * from (
                    	select 
                    	'last' PriceType,
                    	t.CreateEnDate,
                    	((ConstructionProjectOwnerUsers.SharePercent * t.CurrentValueOfProject) / 100) as Price,
                        t.ConstructionProjectId ParentId,
                    	ConstructionProjects.ConstructionProjectTitle MyFundTitle 
                    	from ConstructionProjectPriceHistories t 
                    inner join
                    ( SELECT ConstructionProjectId, MAX(CreateEnDate) as CreateEnDate
                    FROM ConstructionProjectPriceHistories
                    GROUP BY ConstructionProjectId ) a
                    on a.ConstructionProjectId = t.ConstructionProjectId and a.CreateEnDate = t.CreateEnDate
                    inner join ConstructionProjectOwnerUsers on t.ConstructionProjectId = ConstructionProjectOwnerUsers.ConstructionProjectId
                    inner join ConstructionProjects on t.ConstructionProjectId = ConstructionProjects.ConstructionProjectId
                    where OwnerUserId = " + userId + @"
                    
                    
                    ) tmp
                    
                    
                    ";

                List<MyFundsDispersionVM> myFundsDispersionVMList = projectsApiBusiness.ProjectsApiDb.MyFundsDispersionVM.FromSqlRaw(sp).ToList();

                if (myFundsDispersionVMList != null)
                    if (myFundsDispersionVMList.Count > 0)
                    {
                        foreach (var dispersionOfMyFundVM in myFundsDispersionVMList)
                        {
                            try
                            {
                                MyFundsVM myFundsVM = new MyFundsVM()
                                {
                                    MyFundPrice = ((dispersionOfMyFundVM.Price.HasValue) ? dispersionOfMyFundVM.Price.Value : 0),
                                    MyFundTitle = (!string.IsNullOrEmpty(dispersionOfMyFundVM.MyFundTitle) ? dispersionOfMyFundVM.MyFundTitle : "وارد نشده"),
                                    Growth = 0
                                };

                                string paymentsSp = @"

                                    SELECT CellIndex, REPLACE(CellData, ',', '') AS CellData  
                                    FROM (
                                      SELECT *, MAX(CellIndex) OVER() AS MaxCellIndex
                                      FROM ConstructionProjectFinancialData
                                      WHERE ParentType = 'person' 
                                        AND RecordType = 'private'
                                       AND UserIdCreator = " + userId + @"
                                        AND ParentId = " + dispersionOfMyFundVM.ParentId + @"
                                        AND ExcelSheetConfigId IN (
                                          SELECT ExcelSheetConfigId
                                          FROM ExcelSheetConfigs
                                          INNER JOIN ConstructionProjects
                                            ON ExcelSheetConfigs.ExcelSheetConfigName = ConstructionProjects.WorkshopName
                                          WHERE ExcelSheetConfigs.ReportType = 'financial'
                                        )
                                    ) t
                                    WHERE CellIndex = MaxCellIndex
                                    
                                    ";

                                var payments = projectsApiBusiness.ProjectsApiDb.ConstructionProjectFinancialData.FromSqlRaw(paymentsSp).Select(result => new RowsDataVM
                                {
                                    CellData = result.CellData
                                }).ToList();

                                if (payments != null)
                                {
                                    myFundsVM.MyFundPrice += payments.Sum(f => double.Parse(f.CellData));
                                }

                                myFundsVMList.Add(myFundsVM);
                            }
                            catch (Exception exc)
                            { }
                        }
                    }
            }
            catch (Exception exc)
            { }

            #endregion

            return myFundsVMList;
        }

        //رشد سرمایه
        public List<MyFundsVM> GetListOfMyFundsGrowth(long userId,
            long personId,
            IProjectsApiBusiness projectsApiBusiness)
        {
            List<MyFundsVM> myFundsVMList = new List<MyFundsVM>();

            #region Properties

            try
            {

                string sp = @"

                        --last price	
                        select 	
                        	ROW_NUMBER() OVER(ORDER BY Price ASC) AS RowNumber, * from	(
                        	select 
                        	'last' PriceType,
                        	t.CreateEnDate,
                        	CASE
                                WHEN OfferPriceType = 0 THEN ((PropertyOwners.SharePercent * CalculatedOfferPrice) / 100)
                                WHEN OfferPriceType = 1 THEN ((PropertyOwners.SharePercent * OfferPrice) / 100)
                                END as Price,
                            CAST(t.PropertyId AS bigint) ParentId, 
                        	Properties.PropertyCodeName MyFundTitle 
                        	from PropertiesPricesHistories t
                        inner join
                        ( SELECT PropertyId, MAX(CreateEnDate) as CreateEnDate
                        FROM PropertiesPricesHistories
                        GROUP BY PropertyId ) a
                        on a.PropertyId = t.PropertyId and a.CreateEnDate = t.CreateEnDate 
                        inner join PropertyOwners on t.PropertyId = PropertyOwners.PropertyId 
                        inner join Properties on t.PropertyId = Properties.PropertyId 
                        where OwnerId = " + userId + @"
                        
                        union all 
                        
                        --first price
                        select 
                        	'first' PriceType,
                        	t.CreateEnDate,
                        	CASE
                                WHEN OfferPriceType = 0 THEN ((PropertyOwners.SharePercent * CalculatedOfferPrice) / 100)
                                WHEN OfferPriceType = 1 THEN ((PropertyOwners.SharePercent * OfferPrice) / 100)
                                END as Price,
                            CAST(t.PropertyId AS bigint) ParentId,
                        	Properties.PropertyCodeName MyFundTitle
                        	from PropertiesPricesHistories t
                        inner join
                        ( SELECT PropertyId, MIN(CreateEnDate) as CreateEnDate
                        FROM PropertiesPricesHistories
                        GROUP BY PropertyId ) a
                        on a.PropertyId = t.PropertyId and a.CreateEnDate = t.CreateEnDate
                        inner join PropertyOwners on t.PropertyId = PropertyOwners.PropertyId
                        inner join Properties on t.PropertyId = Properties.PropertyId
                        where OwnerId = " + userId + @"
                        ) tmp
                        
                        
                        ";

                var propertyIdsWithConstructionProjects = (from c in projectsApiBusiness.ProjectsApiDb.ConstructionProjects
                                                           join owner in projectsApiBusiness.ProjectsApiDb.ConstructionProjectOwnerUsers
                                                           on c.ConstructionProjectId equals owner.ConstructionProjectId
                                                           where owner.OwnerUserId.Equals(userId)
                                                           select c.PropertyId).ToList();

                List<MyFundsGrowthVM> myFundsGrowthVMList = teniacoApiDb.MyFundsGrowthVM.FromSqlRaw(sp).Where(p => !propertyIdsWithConstructionProjects.Contains(p.ParentId.Value)).ToList();

                if (myFundsGrowthVMList != null)
                    if (myFundsGrowthVMList.Count > 0)
                    {
                        foreach (var dispersionOfMyFundVM in myFundsGrowthVMList.Where(f => f.PriceType.Equals("last")).ToList())
                        {
                            try
                            {
                                var first = myFundsGrowthVMList.Where(f => f.ParentId.Equals(dispersionOfMyFundVM.ParentId) && f.PriceType.Equals("first")).FirstOrDefault();
                                double growth = (dispersionOfMyFundVM.Price.Value - first.Price.Value);// / first.Price;

                                MyFundsVM myFundsVM = new MyFundsVM()
                                {
                                    MyFundPrice = growth,//dispersionOfMyFundVM.Price,
                                    MyFundTitle = (!string.IsNullOrEmpty(dispersionOfMyFundVM.MyFundTitle) ? dispersionOfMyFundVM.MyFundTitle : "وارد نشده"),
                                    Growth = (growth / first.Price)
                                };

                                myFundsVMList.Add(myFundsVM);
                            }
                            catch (Exception exc)
                            { }
                        }
                    }
            }
            catch (Exception exc)
            { }

            #endregion

            #region ConstructionProjects

            try
            {

                string sp = @"
                    
                    --last price
                    select 	
                    	ROW_NUMBER() OVER(ORDER BY Price ASC) AS RowNumber, * from (
                    	select 
                    	'last' PriceType,
                    	t.CreateEnDate,
                    	((ConstructionProjectOwnerUsers.SharePercent * t.CurrentValueOfProject) / 100) as Price,
                        t.ConstructionProjectId ParentId,
                    	ConstructionProjects.ConstructionProjectTitle MyFundTitle 
                    	from ConstructionProjectPriceHistories t 
                    inner join
                    ( SELECT ConstructionProjectId, MAX(CreateEnDate) as CreateEnDate
                    FROM ConstructionProjectPriceHistories
                    GROUP BY ConstructionProjectId ) a
                    on a.ConstructionProjectId = t.ConstructionProjectId and a.CreateEnDate = t.CreateEnDate
                    inner join ConstructionProjectOwnerUsers on t.ConstructionProjectId = ConstructionProjectOwnerUsers.ConstructionProjectId
                    inner join ConstructionProjects on t.ConstructionProjectId = ConstructionProjects.ConstructionProjectId
                    where OwnerUserId = " + userId + @"
                    
                    union all
                    
                    --first price
                    select 
                    	--SUM(CurrentValueOfProject) SumOfPrice 
                    	'first' PriceType,
                    	ConstructionProjects.CreateEnDate,
                    	--CurrentValueOfProject Price,
                    	((ConstructionProjectOwnerUsers.SharePercent * ConstructionProjectPriceHistories.CurrentValueOfProject) / 100) as Price,
                    	ConstructionProjects.ConstructionProjectId ParentId,
                    	ConstructionProjects.ConstructionProjectTitle MyFundTitle 
                    from ConstructionProjects 
                    inner join ConstructionProjectOwnerUsers on ConstructionProjects.ConstructionProjectId = ConstructionProjectOwnerUsers.ConstructionProjectId
                    inner join ConstructionProjectPriceHistories on ConstructionProjects.ConstructionProjectId = ConstructionProjectPriceHistories.ConstructionProjectId
                    where ConstructionProjectOwnerUsers.OwnerUserId = " + userId + @"
                    
                    ) tmp
                    
                    
                    ";

                List<MyFundsGrowthVM> myFundsGrowthVMList = projectsApiBusiness.ProjectsApiDb.MyFundsGrowthVM.FromSqlRaw(sp).ToList();

                if (myFundsGrowthVMList != null)
                    if (myFundsGrowthVMList.Count > 0)
                    {
                        foreach (var dispersionOfMyFundVM in myFundsGrowthVMList.Where(f => f.PriceType.Equals("last")).ToList())
                        {
                            try
                            {
                                var first = myFundsGrowthVMList.Where(f => f.ParentId.Equals(dispersionOfMyFundVM.ParentId) && f.PriceType.Equals("first")).FirstOrDefault();
                                double growth = (dispersionOfMyFundVM.Price.Value - first.Price.Value);// / first.Price;

                                MyFundsVM myFundsVM = new MyFundsVM()
                                {
                                    MyFundPrice = growth,// dispersionOfMyFundVM.Price,
                                    MyFundTitle = (!string.IsNullOrEmpty(dispersionOfMyFundVM.MyFundTitle) ? dispersionOfMyFundVM.MyFundTitle : "وارد نشده"),
                                    Growth = (growth / first.Price)
                                };

                                #region payments

                                //                            string paymentsSp = @"

                                //SELECT CellIndex, REPLACE(CellData, ',', '') AS CellData  
                                //FROM (
                                //  SELECT *, MAX(CellIndex) OVER() AS MaxCellIndex
                                //  FROM ConstructionProjectFinancialData
                                //  WHERE ParentType = 'person' 
                                //    AND RecordType = 'private'
                                //   AND UserIdCreator = " + userId + @"
                                //    AND ParentId = " + dispersionOfMyFundVM.ParentId + @"
                                //    AND ExcelSheetConfigId IN (
                                //      SELECT ExcelSheetConfigId
                                //      FROM ExcelSheetConfigs
                                //      INNER JOIN ConstructionProjects
                                //        ON ExcelSheetConfigs.ExcelSheetConfigName = ConstructionProjects.WorkshopName
                                //      WHERE ExcelSheetConfigs.ReportType = 'financial'
                                //    )
                                //) t
                                //WHERE CellIndex = MaxCellIndex

                                //";

                                //                            var sumOfPayments = projectsApiBusiness.ProjectsApiDb.ConstructionProjectFinancialData.FromSqlRaw(paymentsSp).Sum(f => double.Parse(f.CellData));
                                //                            myFundsVM.Growth += sumOfPayments;

                                #endregion

                                myFundsVMList.Add(myFundsVM);
                            }
                            catch (Exception exc)
                            { }
                        }
                    }
            }
            catch (Exception exc)
            { }

            #endregion

            return myFundsVMList;
        }


        #region Sina's Code



        //جزئیات داشبورد ( انحراف ها و تعداد مدارک تایید نشده و آگهی های نزدیک ، لیست مکالمات خوانده نشده و مدارک تایید نشده)
        //public async Task<DetailsForOuterDashboardVM> GetDetailsForOuterDashboard(long userId,
        //    IProjectsApiBusiness projectsApiBusiness,
        //    ITeniacoApiBusiness teniacoApiBusiness,
        //    IMelkavanApiBusiness melkavanApiBusiness)
        //{
        //    DetailsForOuterDashboardVM detailsForOuterDashboardVM = new DetailsForOuterDashboardVM();

        //    Dictionary<string, string> FaTableNames = new()
        //    {
        //        {"Attachments","الحاقیه ها" },
        //        {"InitialPlan" ,"نقشه ها"},
        //        {"ConfirmationAgreement" ,"تاییدیه ها"},
        //        {"ContractAgreement" ,"قرارداد های پروژه"},
        //        {"MeetingBoard" ,"صورت جلسات"},
        //        {"PartnershipAgreement" ,"درخواست ها"},
        //        {"PitchDeck" ,"معرفی پروژه"}
        //    };

        //    try
        //    {
        //        #region ConversationLogs
        //        string ConversationLogsSp = @"
        //                 WITH ProjectIds AS (
        //                 SELECT ConstructionProjectId
        //                 FROM ConstructionProjectOwnerUsers
        //                 WHERE OwnerUserId = {0}
        //             ),
        //             RelevantRecords AS (
        //                 SELECT MeetingBoardId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'MeetingBoard' AS TableName,MeetingBoardTitle AS ConversationTitle FROM MeetingBoards 
        //                	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  MeetingBoards.ConstructionProjectId
        //                	WHERE MeetingBoards.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)

        //                 UNION ALL

        //                 SELECT InitialPlanId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'InitialPlan' AS TableName,InitialPlanTitle AS ConversationTitle FROM InitialPlans
        //                	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  InitialPlans.ConstructionProjectId
        //                	WHERE InitialPlans.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)

        //                 UNION ALL

        //                 SELECT ConfirmationAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ConfirmationAgreement' AS TableName,ConfirmationAgreementTitle AS ConversationTitle FROM ConfirmationAgreements
        //                	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ConfirmationAgreements.ConstructionProjectId
        //                	WHERE ConfirmationAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)

        //                 UNION ALL

        //                 SELECT PitchDeckId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PitchDeck' AS TableName,PitchDeckTitle AS ConversationTitle FROM PitchDecks
        //                	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PitchDecks.ConstructionProjectId
        //                	WHERE PitchDecks.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)

        //                 UNION ALL

        //                 SELECT ContractAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ContractAgreement' AS TableName,ContractAgreementTitle AS ConversationTitle FROM ContractAgreements
        //                	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ContractAgreements.ConstructionProjectId
        //                	WHERE ContractAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)

        //                 UNION ALL

        //                 SELECT PartnershipAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PartnershipAgreement' AS TableName,PartnershipAgreementTitle AS ConversationTitle FROM PartnershipAgreements
        //                	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PartnershipAgreements.ConstructionProjectId
        //                	WHERE PartnershipAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
        //             ),
        //             AllRecords AS (
        //                 SELECT RecordId,ProjectTitle,TableName,ConversationTitle FROM RelevantRecords
        //                 UNION ALL
        //                 SELECT AttachementId,ProjectTitle,'Attachments' AS TableName,AttachementTitle AS ConversationTitle
        //                	FROM AttachementFiles af
        //                	JOIN RelevantRecords rr ON af.AttachementParentId = rr.RecordId AND af.AttachementTableTitle = CONCAT(rr.TableName , 's')
        //                	WHERE AttachementParentId IN (SELECT RecordId FROM RelevantRecords)
        //             )
        //             SELECT cl.*,ar.ProjectTitle,ar.ConversationTitle,CONCAT(up.Name,' ',up.Family) AS 'SenderName',up.Picture
        //             FROM ConversationLogs cl
        //             JOIN AllRecords ar ON cl.RecordId = ar.RecordId
        //             JOIN NewArashCmsDbHaghighi.dbo.UsersProfile up ON cl.UserIdCreator = up.UserId
        //             WHERE IsRead = 0 
        //             AND cl.RecordId IN (SELECT RecordId FROM AllRecords) AND (cl.UserIdCreator != {0} OR cl.UserIdCreator IS NULL) AND cl.TableTitle = ar.TableName
        //             ORDER BY ConversationLogId DESC;";

        //        var UnreadConversationsList = projectsApiBusiness.ProjectsApiDb.ConversationLogsForOuterDashboard.FromSqlRaw(ConversationLogsSp, userId).ToList();

        //        detailsForOuterDashboardVM.Conversations = UnreadConversationsList.Take(4).ToList();

        //        detailsForOuterDashboardVM.UnreadConversationsCount = UnreadConversationsList.Count();
        //        #endregion

        //        #region UnverifiedFileStatesLogs
        //        string FileStatesLogsSp = @"
        //                                        WITH ProjectIds AS (
        //                                        SELECT ConstructionProjectId
        //                                        FROM ConstructionProjectOwnerUsers
        //                                        WHERE OwnerUserId = {0}
        //                                    ),
        //                                    RelevantRecords AS (
        //                                        SELECT MeetingBoardId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'MeetingBoard' AS TableName,MeetingBoardTitle AS FileTitle FROM MeetingBoards 
        //                                    	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  MeetingBoards.ConstructionProjectId
        //                                    	WHERE MeetingBoards.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)

        //                                        UNION ALL

        //                                        SELECT InitialPlanId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'InitialPlan' AS TableName,InitialPlanTitle AS FileTitle FROM InitialPlans
        //                                    	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  InitialPlans.ConstructionProjectId
        //                                    	WHERE InitialPlans.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)

        //                                        UNION ALL

        //                                        SELECT ConfirmationAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ConfirmationAgreement' AS TableName,ConfirmationAgreementTitle AS FileTitle FROM ConfirmationAgreements
        //                                    	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ConfirmationAgreements.ConstructionProjectId
        //                                    	WHERE ConfirmationAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)

        //                                        UNION ALL

        //                                        SELECT PitchDeckId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PitchDeck' AS TableName,PitchDeckTitle AS FileTitle FROM PitchDecks
        //                                    	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PitchDecks.ConstructionProjectId
        //                                    	WHERE PitchDecks.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)

        //                                        UNION ALL

        //                                        SELECT ContractAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ContractAgreement' AS TableName,ContractAgreementTitle AS FileTitle FROM ContractAgreements
        //                                    	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ContractAgreements.ConstructionProjectId
        //                                    	WHERE ContractAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)

        //                                        UNION ALL

        //                                        SELECT PartnershipAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PartnershipAgreement' AS TableName,PartnershipAgreementTitle AS FileTitle FROM PartnershipAgreements
        //                                    	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PartnershipAgreements.ConstructionProjectId
        //                                    	WHERE PartnershipAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
        //                                    ),
        //                                    AllRecords AS (
        //                                        SELECT RecordId,ProjectTitle,TableName,FileTitle FROM RelevantRecords
        //                                        UNION ALL
        //                                        SELECT AttachementId,ProjectTitle,'Attachments' AS TableName,AttachementTitle AS FileTitle
        //                                    	FROM AttachementFiles af
        //                                    	JOIN RelevantRecords rr ON af.AttachementParentId = rr.RecordId AND af.AttachementTableTitle = CONCAT(rr.TableName , 's')
        //                                    	WHERE AttachementParentId IN (SELECT RecordId FROM RelevantRecords)
        //                                    )
        //                                    SELECT fsl.*,ar.ProjectTitle,ar.FileTitle
        //                                    FROM FileStatesLogs fsl
        //                                    JOIN AllRecords ar ON fsl.RecordId = ar.RecordId
        //                                    WHERE FileStateId = 1 
        //                                    AND fsl.RecordId IN (SELECT RecordId FROM AllRecords) AND (UserIdCreator != {0} OR UserIdCreator IS NULL) AND fsl.TableTitle = ar.TableName
        //                                    ORDER BY FileStateLogId DESC;";

        //        var UnverifiedFilesList = projectsApiBusiness.ProjectsApiDb.FileStatesLogsForOuterDashboard.FromSqlRaw(FileStatesLogsSp, userId).ToList();

        //        detailsForOuterDashboardVM.Files = UnverifiedFilesList.Take(8).ToList();

        //        detailsForOuterDashboardVM.UnverifiedFilesCount = UnverifiedFilesList.Count();
        //        #endregion

        //        #region MaxDeviation And MinDeviation
        //        var OwnerProjectsIds = projectsApiBusiness.ProjectsApiDb.ConstructionProjectOwnerUsers.Where(c => c.OwnerUserId == userId).Select(c => c.ConstructionProjectId).ToList();
        //        IQueryable<ConstructionProjectProgressData> DeviationQuery = projectsApiBusiness.ProjectsApiDb.ConstructionProjectProgressData.Where(c => c.RowIndex == 2 && c.CellIndex == 5 && OwnerProjectsIds.Contains(c.ConstructionProjectId.Value));

        //        if (DeviationQuery.Any())
        //        {

        //            var MaxDeviation = DeviationQuery.OrderByDescending(d => d.CellData).FirstOrDefault().CellData;
        //            var MinDeviation = DeviationQuery.OrderBy(d => d.CellData).FirstOrDefault().CellData;
        //            var MaxDeviationProjectName = projectsApiBusiness.ProjectsApiDb.ConstructionProjects.Where(c => c.ConstructionProjectId == DeviationQuery.OrderByDescending(d => d.CellData).FirstOrDefault().ConstructionProjectId).Select(c => c.ConstructionProjectTitle).FirstOrDefault();
        //            var MinDeviationProjectName = projectsApiBusiness.ProjectsApiDb.ConstructionProjects.Where(c => c.ConstructionProjectId == DeviationQuery.OrderBy(d => d.CellData).FirstOrDefault().ConstructionProjectId).Select(c => c.ConstructionProjectTitle).FirstOrDefault();

        //            detailsForOuterDashboardVM.MaxDeviation = MaxDeviation;
        //            detailsForOuterDashboardVM.MinDeviation = MinDeviation;
        //            detailsForOuterDashboardVM.MaxDeviationProjectName = MaxDeviationProjectName;
        //            detailsForOuterDashboardVM.MinDeviationProjectName = MinDeviationProjectName;
        //        }

        //        #endregion

        //        #region NearAdvertisements
        //        var OwnerProjectIds = projectsApiBusiness.ProjectsApiDb.ConstructionProjectOwnerUsers.Where(o => o.OwnerUserId == userId).Select(o => o.ConstructionProjectId).ToList();
        //        var ProjectsPropertyIds = projectsApiBusiness.ProjectsApiDb.ConstructionProjects.Where(c => OwnerProjectIds.Contains(c.ConstructionProjectId)).Select(c => c.PropertyId).ToList();
        //        var Addresses = teniacoApiBusiness.TeniacoApiDb.PropertyAddress.Where(pa => ProjectsPropertyIds.Contains(pa.PropertyId)).ToList();

        //        int TotalNearAdvertisements = 0;

        //        foreach (var address in Addresses)
        //        {
        //            double Lon = 0;
        //            double Lat = 0;

        //            // Get property Lon and Lat based on property id
        //            var propertyAddress = Addresses.Where(p => p.PropertyId == address.PropertyId).FirstOrDefault();

        //            if (propertyAddress.LocationLon is null || propertyAddress.LocationLat is null)
        //                continue;

        //            Lon = (double)propertyAddress.LocationLon;
        //            Lat = (double)propertyAddress.LocationLat;

        //            double radiusInMeters = 1000; // nearby range

        //            double latOffset = radiusInMeters / 111000;
        //            double lonOffset = radiusInMeters / (111000 * Math.Cos(Lat * Math.PI / 180));

        //            // Calculate range
        //            double minLat = Lat - latOffset;
        //            double maxLat = Lat + latOffset;
        //            double minLon = Lon - lonOffset;
        //            double maxLon = Lon + lonOffset;

        //            int nearMelkavanAdvertisementsCount = melkavanApiBusiness.MelkavanApiDb.AdvertisementAddress
        //                .Where(ad => ad.LocationLat >= minLat && ad.LocationLat <= maxLat && ad.LocationLon >= minLon && ad.LocationLon <= maxLon)
        //                .Count();

        //            int nearTeniacoAdvertisementsCount = teniacoApiBusiness.TeniacoApiDb.PropertyAddress
        //                .Join(teniacoApiBusiness.TeniacoApiDb.Properties, pa => pa.PropertyId, p => p.PropertyId, (pa, p) => new { pa, p })
        //                .Where(joined => joined.pa.LocationLat >= minLat && joined.pa.LocationLat <= maxLat && joined.pa.LocationLon >= minLon && joined.pa.LocationLon <= maxLon && joined.p.ShowInMelkavan == true && joined.p.PropertyId != address.PropertyId)
        //                .Count();

        //            TotalNearAdvertisements += (nearMelkavanAdvertisementsCount + nearTeniacoAdvertisementsCount);
        //        }

        //        detailsForOuterDashboardVM.NearAdvertisementsCount = TotalNearAdvertisements;
        //        #endregion

        //        return detailsForOuterDashboardVM;
        //    }
        //    catch (Exception exc)
        //    {

        //    }

        //    return detailsForOuterDashboardVM;
        //}


        #endregion




        //جزئیات داشبورد ( انحراف ها و تعداد مدارک تایید نشده و آگهی های نزدیک ، لیست مکالمات خوانده نشده و مدارک تایید نشده)
        public async Task<DetailsForOuterDashboardVM> GetDetailsForOuterDashboard(long userId,
            IProjectsApiBusiness projectsApiBusiness,
            ITeniacoApiBusiness teniacoApiBusiness,
            IMelkavanApiBusiness melkavanApiBusiness)
        {
            DetailsForOuterDashboardVM detailsForOuterDashboardVM = new DetailsForOuterDashboardVM();

            Dictionary<string, string> FaTableNames = new()
            {
                {"Attachments","الحاقیه ها" },
                {"InitialPlan" ,"نقشه ها"},
                {"ConfirmationAgreement" ,"تاییدیه ها"},
                {"ContractAgreement" ,"قرارداد های پروژه"},
                {"MeetingBoard" ,"صورت جلسات"},
                {"PartnershipAgreement" ,"درخواست ها"},
                {"PitchDeck" ,"معرفی پروژه"}
            };

            try
            {
                #region ConversationLogs
                string ConversationLogsSp = @"
                         WITH ProjectIds AS (
                         SELECT ConstructionProjectId
                         FROM ConstructionProjectOwnerUsers
                         WHERE OwnerUserId = {0}
                     ),
                     RelevantRecords AS (
                         SELECT MeetingBoardId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'MeetingBoard' AS TableName,MeetingBoardTitle AS ConversationTitle FROM MeetingBoards 
                        	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  MeetingBoards.ConstructionProjectId
                        	WHERE MeetingBoards.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
                         UNION ALL
                     
                         SELECT InitialPlanId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'InitialPlan' AS TableName,InitialPlanTitle AS ConversationTitle FROM InitialPlans
                        	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  InitialPlans.ConstructionProjectId
                        	WHERE InitialPlans.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
                         UNION ALL
                     
                         SELECT ConfirmationAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ConfirmationAgreement' AS TableName,ConfirmationAgreementTitle AS ConversationTitle FROM ConfirmationAgreements
                        	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ConfirmationAgreements.ConstructionProjectId
                        	WHERE ConfirmationAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
                         UNION ALL
                     
                         SELECT PitchDeckId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PitchDeck' AS TableName,PitchDeckTitle AS ConversationTitle FROM PitchDecks
                        	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PitchDecks.ConstructionProjectId
                        	WHERE PitchDecks.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
                         UNION ALL
                     
                         SELECT ContractAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ContractAgreement' AS TableName,ContractAgreementTitle AS ConversationTitle FROM ContractAgreements
                        	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ContractAgreements.ConstructionProjectId
                        	WHERE ContractAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
                         UNION ALL
                     
                         SELECT PartnershipAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PartnershipAgreement' AS TableName,PartnershipAgreementTitle AS ConversationTitle FROM PartnershipAgreements
                        	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PartnershipAgreements.ConstructionProjectId
                        	WHERE PartnershipAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     ),
                     AllRecords AS (
                         SELECT RecordId,ProjectTitle,TableName,ConversationTitle FROM RelevantRecords
                         UNION ALL
                         SELECT AttachementId,ProjectTitle,'Attachments' AS TableName,AttachementTitle AS ConversationTitle
                        	FROM AttachementFiles af
                        	JOIN RelevantRecords rr ON af.AttachementParentId = rr.RecordId AND af.AttachementTableTitle = CONCAT(rr.TableName , 's')
                        	WHERE AttachementParentId IN (SELECT RecordId FROM RelevantRecords)
                     )
                     SELECT cl.*,ar.ProjectTitle,ar.ConversationTitle,CONCAT(up.Name,' ',up.Family) AS 'SenderName',up.Picture
                     FROM ConversationLogs cl
                     JOIN AllRecords ar ON cl.RecordId = ar.RecordId
                     JOIN NewArashCmsDb.dbo.UsersProfile up ON cl.UserIdCreator = up.UserId
                     WHERE IsRead = 0 
                     AND cl.RecordId IN (SELECT RecordId FROM AllRecords) AND (cl.UserIdCreator != {0} OR cl.UserIdCreator IS NULL) AND cl.TableTitle = ar.TableName
                     ORDER BY ConversationLogId DESC;";

                var UnreadConversationsList = projectsApiBusiness.ProjectsApiDb.ConversationLogsForOuterDashboard.FromSqlRaw(ConversationLogsSp, userId).ToList();

                detailsForOuterDashboardVM.Conversations = UnreadConversationsList.Take(4).ToList();

                detailsForOuterDashboardVM.UnreadConversationsCount = UnreadConversationsList.Count();
                #endregion

                #region UnverifiedFileStatesLogs
                string FileStatesLogsSp = @"
                                                WITH ProjectIds AS (
                                                SELECT ConstructionProjectId
                                                FROM ConstructionProjectOwnerUsers
                                                WHERE OwnerUserId = {0}
                                            ),
                                            RelevantRecords AS (
                                                SELECT MeetingBoardId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'MeetingBoard' AS TableName,MeetingBoardTitle AS FileTitle FROM MeetingBoards 
                                            	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  MeetingBoards.ConstructionProjectId
                                            	WHERE MeetingBoards.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
                                                UNION ALL
                                            
                                                SELECT InitialPlanId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'InitialPlan' AS TableName,InitialPlanTitle AS FileTitle FROM InitialPlans
                                            	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  InitialPlans.ConstructionProjectId
                                            	WHERE InitialPlans.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
                                                UNION ALL
                                            
                                                SELECT ConfirmationAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ConfirmationAgreement' AS TableName,ConfirmationAgreementTitle AS FileTitle FROM ConfirmationAgreements
                                            	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ConfirmationAgreements.ConstructionProjectId
                                            	WHERE ConfirmationAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
                                                UNION ALL
                                            
                                                SELECT PitchDeckId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PitchDeck' AS TableName,PitchDeckTitle AS FileTitle FROM PitchDecks
                                            	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PitchDecks.ConstructionProjectId
                                            	WHERE PitchDecks.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
                                                UNION ALL
                                            
                                                SELECT ContractAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ContractAgreement' AS TableName,ContractAgreementTitle AS FileTitle FROM ContractAgreements
                                            	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ContractAgreements.ConstructionProjectId
                                            	WHERE ContractAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
                                                UNION ALL
                                            
                                                SELECT PartnershipAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PartnershipAgreement' AS TableName,PartnershipAgreementTitle AS FileTitle FROM PartnershipAgreements
                                            	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PartnershipAgreements.ConstructionProjectId
                                            	WHERE PartnershipAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            ),
                                            AllRecords AS (
                                                SELECT RecordId,ProjectTitle,TableName,FileTitle FROM RelevantRecords
                                                UNION ALL
                                                SELECT AttachementId,ProjectTitle,'Attachments' AS TableName,AttachementTitle AS FileTitle
                                            	FROM AttachementFiles af
                                            	JOIN RelevantRecords rr ON af.AttachementParentId = rr.RecordId AND af.AttachementTableTitle = CONCAT(rr.TableName , 's')
                                            	WHERE AttachementParentId IN (SELECT RecordId FROM RelevantRecords)
                                            )
                                            SELECT fsl.*,ar.ProjectTitle,ar.FileTitle
                                            FROM FileStatesLogs fsl
                                            JOIN AllRecords ar ON fsl.RecordId = ar.RecordId
                                            WHERE FileStateId = 1 
                                            AND fsl.RecordId IN (SELECT RecordId FROM AllRecords) AND (UserIdCreator != {0} OR UserIdCreator IS NULL) AND fsl.TableTitle = ar.TableName
                                            ORDER BY FileStateLogId DESC;";

                var UnverifiedFilesList = projectsApiBusiness.ProjectsApiDb.FileStatesLogsForOuterDashboard.FromSqlRaw(FileStatesLogsSp, userId).ToList();

                detailsForOuterDashboardVM.Files = UnverifiedFilesList.Take(8).ToList();

                detailsForOuterDashboardVM.UnverifiedFilesCount = UnverifiedFilesList.Count();
                #endregion

                #region MaxDeviation And MinDeviation
                var OwnerProjectsIds = projectsApiBusiness.ProjectsApiDb.ConstructionProjectOwnerUsers.Where(c => c.OwnerUserId == userId).Select(c => c.ConstructionProjectId).ToList();
                IQueryable<ConstructionProjectProgressData> DeviationQuery = projectsApiBusiness.ProjectsApiDb.ConstructionProjectProgressData.Where(c => c.RowIndex == 2 && c.CellIndex == 5 && OwnerProjectsIds.Contains(c.ConstructionProjectId.Value));

                if (DeviationQuery.Any())
                {

                    var MaxDeviation = DeviationQuery.OrderByDescending(d => d.CellData).FirstOrDefault().CellData;
                    var MinDeviation = DeviationQuery.OrderBy(d => d.CellData).FirstOrDefault().CellData;
                    var MaxDeviationProjectName = projectsApiBusiness.ProjectsApiDb.ConstructionProjects.Where(c=>c.ConstructionProjectId == DeviationQuery.OrderByDescending(d => d.CellData).FirstOrDefault().ConstructionProjectId).Select(c=>c.ConstructionProjectTitle).FirstOrDefault();
                    var MinDeviationProjectName = projectsApiBusiness.ProjectsApiDb.ConstructionProjects.Where(c => c.ConstructionProjectId == DeviationQuery.OrderBy(d => d.CellData).FirstOrDefault().ConstructionProjectId).Select(c => c.ConstructionProjectTitle).FirstOrDefault();

                    detailsForOuterDashboardVM.MaxDeviation = MaxDeviation;
                    detailsForOuterDashboardVM.MinDeviation = MinDeviation;
                    detailsForOuterDashboardVM.MaxDeviationProjectName = MaxDeviationProjectName;
                    detailsForOuterDashboardVM.MinDeviationProjectName = MinDeviationProjectName;
                }

                #endregion

                #region NearAdvertisements
                var OwnerProjectIds = projectsApiBusiness.ProjectsApiDb.ConstructionProjectOwnerUsers.Where(o => o.OwnerUserId == userId).Select(o => o.ConstructionProjectId).ToList();
                var ProjectsPropertyIds = projectsApiBusiness.ProjectsApiDb.ConstructionProjects.Where(c => OwnerProjectIds.Contains(c.ConstructionProjectId)).Select(c => c.PropertyId).ToList();
                var Addresses = teniacoApiBusiness.TeniacoApiDb.PropertyAddress.Where(pa => ProjectsPropertyIds.Contains(pa.PropertyId)).ToList();

                int TotalNearAdvertisements = 0;

                foreach (var address in Addresses)
                {
                    double Lon = 0;
                    double Lat = 0;

                    // Get property Lon and Lat based on property id
                    var propertyAddress = Addresses.Where(p => p.PropertyId == address.PropertyId).FirstOrDefault();

                    if (propertyAddress.LocationLon is null || propertyAddress.LocationLat is null)
                        continue;

                    Lon = (double)propertyAddress.LocationLon;
                    Lat = (double)propertyAddress.LocationLat;

                    double radiusInMeters = 1000; // nearby range

                    double latOffset = radiusInMeters / 111000;
                    double lonOffset = radiusInMeters / (111000 * Math.Cos(Lat * Math.PI / 180));

                    // Calculate range
                    double minLat = Lat - latOffset;
                    double maxLat = Lat + latOffset;
                    double minLon = Lon - lonOffset;
                    double maxLon = Lon + lonOffset;

                    int nearMelkavanAdvertisementsCount = melkavanApiBusiness.MelkavanApiDb.AdvertisementAddress
                        .Where(ad => ad.LocationLat >= minLat && ad.LocationLat <= maxLat && ad.LocationLon >= minLon && ad.LocationLon <= maxLon)
                        .Count();

                    int nearTeniacoAdvertisementsCount = teniacoApiBusiness.TeniacoApiDb.PropertyAddress
                        .Join(teniacoApiBusiness.TeniacoApiDb.Properties, pa => pa.PropertyId, p => p.PropertyId, (pa, p) => new { pa, p })
                        .Where(joined => joined.pa.LocationLat >= minLat && joined.pa.LocationLat <= maxLat && joined.pa.LocationLon >= minLon && joined.pa.LocationLon <= maxLon && joined.p.ShowInMelkavan == true && joined.p.PropertyId != address.PropertyId)
                        .Count();

                    TotalNearAdvertisements += (nearMelkavanAdvertisementsCount + nearTeniacoAdvertisementsCount);
                }

                detailsForOuterDashboardVM.NearAdvertisementsCount = TotalNearAdvertisements;
                #endregion

                return detailsForOuterDashboardVM;
            }
            catch (Exception exc)
            {

            }

            return detailsForOuterDashboardVM;
        }




        #region Sina's Code

        //// تعداد مدارک تایید نشده و مکالمات خوانده نشده برای زنگوله
        //public async Task<GetUnreadConversationsAndUnverifiedFilesCountVM> GetUnreadConversationsAndUnverifiedFilesCount(long userId,
        //    IProjectsApiBusiness projectsApiBusiness)
        //{
        //    GetUnreadConversationsAndUnverifiedFilesCountVM getUnreadConversationsAndUnverifiedFilesCountVM = new GetUnreadConversationsAndUnverifiedFilesCountVM();
        //    try
        //    {
        //        string ConversationLogsSp = @"
        //                 WITH ProjectIds AS (
        //                 SELECT ConstructionProjectId
        //                 FROM ConstructionProjectOwnerUsers
        //                 WHERE OwnerUserId = {0}
        //             ),
        //             RelevantRecords AS (
        //                 SELECT MeetingBoardId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'MeetingBoard' AS TableName,MeetingBoardTitle AS ConversationTitle FROM MeetingBoards 
        //                	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  MeetingBoards.ConstructionProjectId
        //                	WHERE MeetingBoards.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
        //                 UNION ALL
                     
        //                 SELECT InitialPlanId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'InitialPlan' AS TableName,InitialPlanTitle AS ConversationTitle FROM InitialPlans
        //                	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  InitialPlans.ConstructionProjectId
        //                	WHERE InitialPlans.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
        //                 UNION ALL
                     
        //                 SELECT ConfirmationAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ConfirmationAgreement' AS TableName,ConfirmationAgreementTitle AS ConversationTitle FROM ConfirmationAgreements
        //                	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ConfirmationAgreements.ConstructionProjectId
        //                	WHERE ConfirmationAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
        //                 UNION ALL
                     
        //                 SELECT PitchDeckId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PitchDeck' AS TableName,PitchDeckTitle AS ConversationTitle FROM PitchDecks
        //                	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PitchDecks.ConstructionProjectId
        //                	WHERE PitchDecks.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
        //                 UNION ALL
                     
        //                 SELECT ContractAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ContractAgreement' AS TableName,ContractAgreementTitle AS ConversationTitle FROM ContractAgreements
        //                	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ContractAgreements.ConstructionProjectId
        //                	WHERE ContractAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
        //                 UNION ALL
                     
        //                 SELECT PartnershipAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PartnershipAgreement' AS TableName,PartnershipAgreementTitle AS ConversationTitle FROM PartnershipAgreements
        //                	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PartnershipAgreements.ConstructionProjectId
        //                	WHERE PartnershipAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
        //             ),
        //             AllRecords AS (
        //                 SELECT RecordId,ProjectTitle,TableName,ConversationTitle FROM RelevantRecords
        //                 UNION ALL
        //                 SELECT AttachementId,ProjectTitle,'Attachments' AS TableName,AttachementTitle AS ConversationTitle
        //                	FROM AttachementFiles af
        //                	JOIN RelevantRecords rr ON af.AttachementParentId = rr.RecordId AND af.AttachementTableTitle = CONCAT(rr.TableName , 's')
        //                	WHERE AttachementParentId IN (SELECT RecordId FROM RelevantRecords)
        //             )
        //             SELECT cl.*,ar.ProjectTitle,ar.ConversationTitle,CONCAT(up.Name,' ',up.Family) AS 'SenderName'
        //             FROM ConversationLogs cl
        //             JOIN AllRecords ar ON cl.RecordId = ar.RecordId
        //             JOIN NewArashCmsDbHaghighi.dbo.UsersProfile up ON cl.UserIdCreator = up.UserId
        //             WHERE IsRead = 0 
        //             AND cl.RecordId IN (SELECT RecordId FROM AllRecords) AND (cl.UserIdCreator != {0} OR cl.UserIdCreator IS NULL) AND cl.TableTitle = ar.TableName";

        //        getUnreadConversationsAndUnverifiedFilesCountVM.UnreadConversationCount = projectsApiBusiness.ProjectsApiDb.ConversationLogsForOuterDashboard.FromSqlRaw(ConversationLogsSp, userId).ToList().Count();

        //        string FileStatesLogsSp = @"
        //                                        WITH ProjectIds AS (
        //                                        SELECT ConstructionProjectId
        //                                        FROM ConstructionProjectOwnerUsers
        //                                        WHERE OwnerUserId = {0}
        //                                    ),
        //                                    RelevantRecords AS (
        //                                        SELECT MeetingBoardId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'MeetingBoard' AS TableName,MeetingBoardTitle AS FileTitle FROM MeetingBoards 
        //                                    	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  MeetingBoards.ConstructionProjectId
        //                                    	WHERE MeetingBoards.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
        //                                        UNION ALL
                                            
        //                                        SELECT InitialPlanId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'InitialPlan' AS TableName,InitialPlanTitle AS FileTitle FROM InitialPlans
        //                                    	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  InitialPlans.ConstructionProjectId
        //                                    	WHERE InitialPlans.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
        //                                        UNION ALL
                                            
        //                                        SELECT ConfirmationAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ConfirmationAgreement' AS TableName,ConfirmationAgreementTitle AS FileTitle FROM ConfirmationAgreements
        //                                    	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ConfirmationAgreements.ConstructionProjectId
        //                                    	WHERE ConfirmationAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
        //                                        UNION ALL
                                            
        //                                        SELECT PitchDeckId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PitchDeck' AS TableName,PitchDeckTitle AS FileTitle FROM PitchDecks
        //                                    	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PitchDecks.ConstructionProjectId
        //                                    	WHERE PitchDecks.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
        //                                        UNION ALL
                                            
        //                                        SELECT ContractAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ContractAgreement' AS TableName,ContractAgreementTitle AS FileTitle FROM ContractAgreements
        //                                    	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ContractAgreements.ConstructionProjectId
        //                                    	WHERE ContractAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
        //                                        UNION ALL
                                            
        //                                        SELECT PartnershipAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PartnershipAgreement' AS TableName,PartnershipAgreementTitle AS FileTitle FROM PartnershipAgreements
        //                                    	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PartnershipAgreements.ConstructionProjectId
        //                                    	WHERE PartnershipAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
        //                                    ),
        //                                    AllRecords AS (
        //                                        SELECT RecordId,ProjectTitle,TableName,FileTitle FROM RelevantRecords
        //                                        UNION ALL
        //                                        SELECT AttachementId,ProjectTitle,'Attachments' AS TableName,AttachementTitle AS FileTitle
        //                                    	FROM AttachementFiles af
        //                                    	JOIN RelevantRecords rr ON af.AttachementParentId = rr.RecordId AND af.AttachementTableTitle = CONCAT(rr.TableName , 's')
        //                                    	WHERE AttachementParentId IN (SELECT RecordId FROM RelevantRecords)
        //                                    )
        //                                    SELECT fsl.*,ar.ProjectTitle,ar.FileTitle
        //                                    FROM FileStatesLogs fsl
        //                                    JOIN AllRecords ar ON fsl.RecordId = ar.RecordId
        //                                    WHERE FileStateId = 1 
        //                                    AND fsl.RecordId IN (SELECT RecordId FROM AllRecords) AND (UserIdCreator != {0} OR UserIdCreator IS NULL) AND fsl.TableTitle = ar.TableName
        //                                    ORDER BY FileStateLogId DESC;";

        //        getUnreadConversationsAndUnverifiedFilesCountVM.UnverifiedFilesCount = projectsApiBusiness.ProjectsApiDb.FileStatesLogsForOuterDashboard.FromSqlRaw(FileStatesLogsSp, userId).ToList().Count();

        //        return getUnreadConversationsAndUnverifiedFilesCountVM;
        //    }
        //    catch
        //    {
        //        return getUnreadConversationsAndUnverifiedFilesCountVM;
        //    }

        //}

        #endregion

        // تعداد مدارک تایید نشده و مکالمات خوانده نشده برای زنگوله
        public async Task<GetUnreadConversationsAndUnverifiedFilesCountVM> GetUnreadConversationsAndUnverifiedFilesCount(long userId,
            IProjectsApiBusiness projectsApiBusiness)
        {
            GetUnreadConversationsAndUnverifiedFilesCountVM getUnreadConversationsAndUnverifiedFilesCountVM = new GetUnreadConversationsAndUnverifiedFilesCountVM();
            try
            {
                string ConversationLogsSp = @"
                         WITH ProjectIds AS (
                         SELECT ConstructionProjectId
                         FROM ConstructionProjectOwnerUsers
                         WHERE OwnerUserId = {0}
                     ),
                     RelevantRecords AS (
                         SELECT MeetingBoardId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'MeetingBoard' AS TableName,MeetingBoardTitle AS ConversationTitle FROM MeetingBoards 
                        	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  MeetingBoards.ConstructionProjectId
                        	WHERE MeetingBoards.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
                         UNION ALL
                     
                         SELECT InitialPlanId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'InitialPlan' AS TableName,InitialPlanTitle AS ConversationTitle FROM InitialPlans
                        	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  InitialPlans.ConstructionProjectId
                        	WHERE InitialPlans.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
                         UNION ALL
                     
                         SELECT ConfirmationAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ConfirmationAgreement' AS TableName,ConfirmationAgreementTitle AS ConversationTitle FROM ConfirmationAgreements
                        	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ConfirmationAgreements.ConstructionProjectId
                        	WHERE ConfirmationAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
                         UNION ALL
                     
                         SELECT PitchDeckId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PitchDeck' AS TableName,PitchDeckTitle AS ConversationTitle FROM PitchDecks
                        	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PitchDecks.ConstructionProjectId
                        	WHERE PitchDecks.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
                         UNION ALL
                     
                         SELECT ContractAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ContractAgreement' AS TableName,ContractAgreementTitle AS ConversationTitle FROM ContractAgreements
                        	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ContractAgreements.ConstructionProjectId
                        	WHERE ContractAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     
                         UNION ALL
                     
                         SELECT PartnershipAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PartnershipAgreement' AS TableName,PartnershipAgreementTitle AS ConversationTitle FROM PartnershipAgreements
                        	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PartnershipAgreements.ConstructionProjectId
                        	WHERE PartnershipAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                     ),
                     AllRecords AS (
                         SELECT RecordId,ProjectTitle,TableName,ConversationTitle FROM RelevantRecords
                         UNION ALL
                         SELECT AttachementId,ProjectTitle,'Attachments' AS TableName,AttachementTitle AS ConversationTitle
                        	FROM AttachementFiles af
                        	JOIN RelevantRecords rr ON af.AttachementParentId = rr.RecordId AND af.AttachementTableTitle = CONCAT(rr.TableName , 's')
                        	WHERE AttachementParentId IN (SELECT RecordId FROM RelevantRecords)
                     )
                     SELECT cl.*,ar.ProjectTitle,ar.ConversationTitle,CONCAT(up.Name,' ',up.Family) AS 'SenderName' , '' as Picture
                     FROM ConversationLogs cl
                     JOIN AllRecords ar ON cl.RecordId = ar.RecordId
                     JOIN NewArashCmsDb.dbo.UsersProfile up ON cl.UserIdCreator = up.UserId
                     WHERE IsRead = 0 
                     AND cl.RecordId IN (SELECT RecordId FROM AllRecords) AND (cl.UserIdCreator != {0} OR cl.UserIdCreator IS NULL) AND cl.TableTitle = ar.TableName";

                getUnreadConversationsAndUnverifiedFilesCountVM.UnreadConversationCount = projectsApiBusiness.ProjectsApiDb.ConversationLogsForOuterDashboard.FromSqlRaw(ConversationLogsSp, userId).ToList().Count();

                string FileStatesLogsSp = @"
                                                WITH ProjectIds AS (
                                                SELECT ConstructionProjectId
                                                FROM ConstructionProjectOwnerUsers
                                                WHERE OwnerUserId = {0}
                                            ),
                                            RelevantRecords AS (
                                                SELECT MeetingBoardId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'MeetingBoard' AS TableName,MeetingBoardTitle AS FileTitle FROM MeetingBoards 
                                            	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  MeetingBoards.ConstructionProjectId
                                            	WHERE MeetingBoards.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
                                                UNION ALL
                                            
                                                SELECT InitialPlanId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'InitialPlan' AS TableName,InitialPlanTitle AS FileTitle FROM InitialPlans
                                            	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  InitialPlans.ConstructionProjectId
                                            	WHERE InitialPlans.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
                                                UNION ALL
                                            
                                                SELECT ConfirmationAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ConfirmationAgreement' AS TableName,ConfirmationAgreementTitle AS FileTitle FROM ConfirmationAgreements
                                            	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ConfirmationAgreements.ConstructionProjectId
                                            	WHERE ConfirmationAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
                                                UNION ALL
                                            
                                                SELECT PitchDeckId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PitchDeck' AS TableName,PitchDeckTitle AS FileTitle FROM PitchDecks
                                            	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PitchDecks.ConstructionProjectId
                                            	WHERE PitchDecks.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
                                                UNION ALL
                                            
                                                SELECT ContractAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'ContractAgreement' AS TableName,ContractAgreementTitle AS FileTitle FROM ContractAgreements
                                            	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  ContractAgreements.ConstructionProjectId
                                            	WHERE ContractAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            
                                                UNION ALL
                                            
                                                SELECT PartnershipAgreementId AS RecordId,ConstructionProjectTitle AS ProjectTitle,'PartnershipAgreement' AS TableName,PartnershipAgreementTitle AS FileTitle FROM PartnershipAgreements
                                            	JOIN ConstructionProjects ON ConstructionProjects.ConstructionProjectId =  PartnershipAgreements.ConstructionProjectId
                                            	WHERE PartnershipAgreements.ConstructionProjectId IN (SELECT ConstructionProjectId FROM ProjectIds)
                                            ),
                                            AllRecords AS (
                                                SELECT RecordId,ProjectTitle,TableName,FileTitle FROM RelevantRecords
                                                UNION ALL
                                                SELECT AttachementId,ProjectTitle,'Attachments' AS TableName,AttachementTitle AS FileTitle
                                            	FROM AttachementFiles af
                                            	JOIN RelevantRecords rr ON af.AttachementParentId = rr.RecordId AND af.AttachementTableTitle = CONCAT(rr.TableName , 's')
                                            	WHERE AttachementParentId IN (SELECT RecordId FROM RelevantRecords)
                                            )
                                            SELECT fsl.*,ar.ProjectTitle,ar.FileTitle
                                            FROM FileStatesLogs fsl
                                            JOIN AllRecords ar ON fsl.RecordId = ar.RecordId
                                            WHERE FileStateId = 1 
                                            AND fsl.RecordId IN (SELECT RecordId FROM AllRecords) AND (UserIdCreator != {0} OR UserIdCreator IS NULL) AND fsl.TableTitle = ar.TableName
                                            ORDER BY FileStateLogId DESC;";

                getUnreadConversationsAndUnverifiedFilesCountVM.UnverifiedFilesCount = projectsApiBusiness.ProjectsApiDb.FileStatesLogsForOuterDashboard.FromSqlRaw(FileStatesLogsSp, userId).ToList().Count();

                return getUnreadConversationsAndUnverifiedFilesCountVM;
            }
            catch
            {
                return getUnreadConversationsAndUnverifiedFilesCountVM;
            }

        }




        #region Methods For Work With MyPropertiesForInvestors

        #region Methods For Work With MyPropertiesForInvestorsManagement
        public List<PropertiesVM> GetAllMyPropertiesForInvestorsList(ref int listCount,
           List<long> childsUsersIds,
           PublicApiContext publicApiDb,
           int? propertyTypeId = null,
           int? typeOfUseId = null,
           int? documentTypeId = null,
           long? ConsultantUserId = null,
           long? OwnerId = null,
           string propertyCodeName = null,
           long? stateId = null,
           long? cityId = null,
           long? zoneId = null,
           long? districtId = null)
        {
            List<PropertiesVM> PropertiesVMList = new List<PropertiesVM>();

            try
            {

                var districts = (from s in publicApiDb.States
                                 join c in publicApiDb.Cities on s.StateId equals c.StateId
                                 join z in publicApiDb.Zones on c.CityId equals z.CityId
                                 join d in publicApiDb.Districts on z.ZoneId equals d.ZoneId
                                 select new DistrictsVM
                                 {
                                     CityId = c.CityId,
                                     StateId = s.StateId,
                                     ZoneId = z.ZoneId,
                                     DistrictId = d.DistrictId,
                                 }).AsEnumerable();

                var list = (from p in teniacoApiDb.Properties
                            join pa in teniacoApiDb.PropertyAddress on p.PropertyId equals pa.PropertyId
                            where childsUsersIds.Contains(p.UserIdCreator.Value) &&
                            p.IsDeleted.Value.Equals(false) &&
                            p.IsActivated.Value.Equals(true)
                            select new PropertiesVM
                            {
                                Area = p.Area,
                                BuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                                BuiltInYearFa = p.BuiltInYearFa.HasValue ? p.BuiltInYearFa.Value : (int?)0,
                                ConsultantUserId = p.ConsultantUserId.HasValue ? p.ConsultantUserId.Value : (long?)null,
                                //PropertyOwnersVM = new List<PropertyOwnersVM>(),
                                //OwnerId = p.OwnerId.HasValue ? p.OwnerId.Value : (long?)null,
                                PropertyCodeName = p.PropertyCodeName,
                                PropertyId = p.PropertyId,
                                PropertyTypeId = p.PropertyTypeId,
                                RebuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                                RebuiltInYearFa = p.RebuiltInYearFa.HasValue ? p.RebuiltInYearFa.Value : (int?)0,
                                TypeOfUseId = p.TypeOfUseId.HasValue ? p.TypeOfUseId.Value : (int?)0,
                                DocumentTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
                                DocumentOwnershipTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
                                DocumentRootTypeId = p.DocumentRootTypeId.HasValue ? p.DocumentRootTypeId.Value : (int?)0,
                                UserIdCreator = p.UserIdCreator.Value,
                                CreateEnDate = p.CreateEnDate,
                                CreateTime = p.CreateTime,
                                EditEnDate = p.EditEnDate,
                                EditTime = p.EditTime,
                                UserIdEditor = p.UserIdEditor.Value,
                                RemoveEnDate = p.RemoveEnDate,
                                RemoveTime = p.EditTime,
                                UserIdRemover = p.UserIdRemover.Value,
                                IsActivated = p.IsActivated,
                                IsDeleted = p.IsDeleted,
                                PropertyAddressVM = new PropertyAddressVM
                                {
                                    StateId = 0,
                                    CityId = 0,
                                    ZoneId = pa.ZoneId,
                                    DistrictId = pa.DistrictId,
                                    //Abbreviation = pa.Address,
                                    Address = pa.Address,
                                    LocationLat = pa.LocationLat,
                                    LocationLon = pa.LocationLon,
                                    PropertyId = pa.PropertyId,
                                    UserIdCreator = p.UserIdCreator.Value,
                                    CreateEnDate = p.CreateEnDate,
                                    CreateTime = p.CreateTime,
                                    EditEnDate = p.EditEnDate,
                                    EditTime = p.EditTime,
                                    UserIdEditor = p.UserIdEditor.Value,
                                    RemoveEnDate = p.RemoveEnDate,
                                    RemoveTime = p.EditTime,
                                    UserIdRemover = p.UserIdRemover.Value,
                                    IsActivated = p.IsActivated,
                                    IsDeleted = p.IsDeleted,
                                }
                            })
                            .AsEnumerable()
                            .Join(districts, pa => pa.PropertyAddressVM.DistrictId, z => z.DistrictId, (a, b) => new { a, b })
                            .Select(p => new PropertiesVM
                            {
                                Area = p.a.Area,
                                BuiltInYear = p.a.BuiltInYear.HasValue ? p.a.BuiltInYear.Value : (int?)0,
                                BuiltInYearFa = p.a.BuiltInYearFa.HasValue ? p.a.BuiltInYearFa.Value : (int?)0,
                                ConsultantUserId = p.a.ConsultantUserId.HasValue ? p.a.ConsultantUserId.Value : (long?)null,
                                PropertyCodeName = p.a.PropertyCodeName,
                                PropertyId = p.a.PropertyId,
                                PropertyTypeId = p.a.PropertyTypeId,
                                RebuiltInYear = p.a.BuiltInYear.HasValue ? p.a.BuiltInYear.Value : (int?)0,
                                RebuiltInYearFa = p.a.RebuiltInYearFa.HasValue ? p.a.RebuiltInYearFa.Value : (int?)0,
                                TypeOfUseId = p.a.TypeOfUseId.HasValue ? p.a.TypeOfUseId.Value : (int?)0,
                                DocumentTypeId = p.a.DocumentTypeId.HasValue ? p.a.DocumentTypeId.Value : (int?)0,
                                DocumentOwnershipTypeId = p.a.DocumentOwnershipTypeId.HasValue ? p.a.DocumentOwnershipTypeId.Value : (int?)0,
                                DocumentRootTypeId = p.a.DocumentRootTypeId.HasValue ? p.a.DocumentRootTypeId.Value : (int?)0,
                                UserIdCreator = p.a.UserIdCreator.Value,
                                CreateEnDate = p.a.CreateEnDate,
                                CreateTime = p.a.CreateTime,
                                EditEnDate = p.a.EditEnDate,
                                EditTime = p.a.EditTime,
                                UserIdEditor = p.a.UserIdEditor.Value,
                                RemoveEnDate = p.a.RemoveEnDate,
                                RemoveTime = p.a.EditTime,
                                UserIdRemover = p.a.UserIdRemover.Value,
                                IsActivated = p.a.IsActivated,
                                IsDeleted = p.a.IsDeleted,
                                PropertyAddressVM = new PropertyAddressVM
                                {
                                    StateId = p.b.StateId.Value,
                                    CityId = p.b.CityId.Value,
                                    ZoneId = p.b.ZoneId,
                                    DistrictId = p.b.DistrictId,
                                    Address = p.a.PropertyAddressVM.Address,
                                    LocationLat = p.a.PropertyAddressVM.LocationLat,
                                    LocationLon = p.a.PropertyAddressVM.LocationLon,
                                    PropertyId = p.a.PropertyAddressVM.PropertyId,
                                    UserIdCreator = p.a.PropertyAddressVM.UserIdCreator.Value,
                                    CreateEnDate = p.a.PropertyAddressVM.CreateEnDate,
                                    CreateTime = p.a.PropertyAddressVM.CreateTime,
                                    EditEnDate = p.a.PropertyAddressVM.EditEnDate,
                                    EditTime = p.a.PropertyAddressVM.EditTime,
                                    UserIdEditor = p.a.PropertyAddressVM.UserIdEditor.Value,
                                    RemoveEnDate = p.a.PropertyAddressVM.RemoveEnDate,
                                    RemoveTime = p.a.PropertyAddressVM.EditTime,
                                    UserIdRemover = p.a.PropertyAddressVM.UserIdRemover.Value,
                                    IsActivated = p.a.PropertyAddressVM.IsActivated,
                                    IsDeleted = p.a.PropertyAddressVM.IsDeleted,
                                }
                            }).AsQueryable();

                if (propertyTypeId.HasValue)
                    if (propertyTypeId.Value > 0)
                        list = list.Where(a => a.PropertyTypeId.Equals(propertyTypeId.Value));

                if (typeOfUseId.HasValue)
                    if (typeOfUseId.Value > 0)
                        list = list.Where(a => a.TypeOfUseId.Equals(typeOfUseId.Value));

                if (documentTypeId.HasValue)
                    if (documentTypeId.Value > 0)
                        list = list.Where(a => a.DocumentTypeId.Equals(documentTypeId.Value));


                if (!string.IsNullOrEmpty(propertyCodeName))
                    list = list.Where(z => z.PropertyCodeName.Contains(propertyCodeName));


                if (stateId.HasValue)
                    if (stateId.Value > 0)
                        list = list.Where(a => a.PropertyAddressVM.StateId.Equals(stateId.Value));

                if (cityId.HasValue)
                    if (cityId.Value > 0)
                        list = list.Where(a => a.PropertyAddressVM.CityId.Equals(cityId.Value));

                if (zoneId.HasValue)
                    if (zoneId.Value > 0)
                        list = list.Where(a => a.PropertyAddressVM.ZoneId.Equals(zoneId.Value));

                if (districtId.HasValue)
                    if (districtId.Value > 0)
                        list = list.Where(a => a.PropertyAddressVM.DistrictId.Equals(districtId.Value));

                if (ConsultantUserId.HasValue)
                    if (ConsultantUserId.Value > 0)
                        list = list.Where(a => a.ConsultantUserId.Value.Equals(ConsultantUserId.Value));


                PropertiesVMList = list.OrderByDescending(f => f.PropertyId).ToList();


            }
            catch (Exception exc)
            { }

            return PropertiesVMList;
        }

        #region Sina's Code


        //public List<MyPropertiesForInvestorsAdvanceSearchVM> GetListOfMyPropertiesForInvestors(int jtStartIndex,
        //   int jtPageSize,
        //   ref int listCount,
        //   List<long> childsUsersIds,
        //   PublicApiContext publicApiDb,
        //   int pageNum,
        //   int pageSize,
        //   int? propertyTypeId = null,
        //   int? typeOfUseId = null,
        //   int? documentTypeId = null,
        //   long? ConsultantUserId = null,
        //   long? OwnerId = null,
        //   string propertyCodeName = null,
        //   long? stateId = null,
        //   long? cityId = null,
        //   long? zoneId = null,
        //   long? districtId = null,
        //   long? userId = null)
        //{


        //    List<MyPropertiesForInvestorsAdvanceSearchVM> myPropertiesForInvestorsAdvanceSearchVMList = new List<MyPropertiesForInvestorsAdvanceSearchVM>();


        //    string sp = @"WITH RankedPrices AS (
        //                      SELECT 
        //                          TeniacoDbHaghighi.dbo.PropertiesPricesHistories.PropertyId,
        //                          TeniacoDbHaghighi.dbo.PropertiesPricesHistories.OfferPrice,
        //                          TeniacoDbHaghighi.dbo.PropertiesPricesHistories.OfferPriceType,
        //                          TeniacoDbHaghighi.dbo.PropertiesPricesHistories.CalculatedOfferPrice,
        //                          TeniacoDbHaghighi.dbo.PropertiesPricesHistories.PropertyPriceHistoryId,
        //                          ROW_NUMBER() OVER (
        //                              PARTITION BY TeniacoDbHaghighi.dbo.PropertiesPricesHistories.PropertyId 
        //                              ORDER BY TeniacoDbHaghighi.dbo.PropertiesPricesHistories.PropertyPriceHistoryId DESC
        //                          ) AS RowNum
        //                      FROM TeniacoDbHaghighi.dbo.PropertiesPricesHistories
        //                  )
        //                  SELECT DISTINCT *
        //                  FROM (
        //                      SELECT 'Properties' AS RecordType,
        //                             TeniacoDbHaghighi.dbo.PropertyOwners.SharePercent,
        //                             TeniacoDbHaghighi.dbo.Properties.PropertyId,
        //                             TeniacoDbHaghighi.dbo.PropertyTypes.PropertyTypeTilte,
        //                             TeniacoDbHaghighi.dbo.Properties.PropertyTypeId,
        //                             TeniacoDbHaghighi.dbo.TypeOfUses.TypeOfUseTitle,
        //                             TeniacoDbHaghighi.dbo.DocumentTypes.DocumentTypeTitle,
        //                             TeniacoDbHaghighi.dbo.DocumentOwnershipTypes.DocumentOwnershipTypeTitle,
        //                             TeniacoDbHaghighi.dbo.DocumentRootTypes.DocumentRootTypeTitle,
        //                             PublicDbHaghighi.dbo.States.StateName,
        //                             PublicDbHaghighi.dbo.Cities.CityName,
        //                             PublicDbHaghighi.dbo.Zones.ZoneName,
        //                             PublicDbHaghighi.dbo.Districts.DistrictName,
        //                             TeniacoDbHaghighi.dbo.Properties.IsActivated,
        //                             TeniacoDbHaghighi.dbo.Properties.IsDeleted,
        //                             TeniacoDbHaghighi.dbo.Properties.EditEnDate,
        //                             TeniacoDbHaghighi.dbo.Properties.RebuiltInYearFa,
        //                             TeniacoDbHaghighi.dbo.Properties.CreateEnDate,
        //                             TeniacoDbHaghighi.dbo.Properties.PropertyCodeName,
        //                             TeniacoDbHaghighi.dbo.Properties.Area,
        //                             TeniacoDbHaghighi.dbo.Properties.PropertyDescriptions,
        //                             TeniacoDbHaghighi.dbo.Properties.UserIdCreator,
        //                             TeniacoDbHaghighi.dbo.PropertyOwners.OwnerId,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.LocationLon,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.LocationLat,
        //                             MelkavanDbHaghighi.dbo.BuildingLifes.BuildingLifeTitle,
        //                             TeniacoDbHaghighi.dbo.PropertiesDetails.Foundation,
        //                             TeniacoDbHaghighi.dbo.PropertiesDetails.Participable AS Participable,
        //                             TeniacoDbHaghighi.dbo.PropertiesDetails.Exchangeable AS Exchangeable,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.StateId,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.CityId,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.ZoneId,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.DistrictId,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.Address,
        //                             CASE 
        //                                 WHEN RankedPrices.OfferPriceType = 1 THEN RankedPrices.OfferPrice
        //                                 ELSE RankedPrices.CalculatedOfferPrice
        //                             END AS TotalPrice,
        //                             CASE 
        //                                 WHEN RankedPrices.OfferPriceType = 1 THEN RankedPrices.CalculatedOfferPrice
        //                                 ELSE RankedPrices.OfferPrice
        //                             END AS PricePerMeter
        //                      FROM TeniacoDbHaghighi.dbo.Properties
        //                      INNER JOIN TeniacoDbHaghighi.dbo.PropertyOwners 
        //                          ON TeniacoDbHaghighi.dbo.Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertyOwners.PropertyId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.PropertyAddress 
        //                          ON TeniacoDbHaghighi.dbo.Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertyAddress.PropertyId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.PropertiesDetails 
        //                          ON TeniacoDbHaghighi.dbo.Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertiesDetails.PropertyId
        //                      LEFT JOIN PublicDbHaghighi.dbo.Cities
        //                          ON TeniacoDbHaghighi.dbo.PropertyAddress.CityId = PublicDbHaghighi.dbo.Cities.CityId
        //                      LEFT JOIN PublicDbHaghighi.dbo.Zones
        //                          ON TeniacoDbHaghighi.dbo.PropertyAddress.ZoneId = PublicDbHaghighi.dbo.Zones.ZoneId
        //                      LEFT JOIN PublicDbHaghighi.dbo.Districts
        //                          ON TeniacoDbHaghighi.dbo.PropertyAddress.DistrictId = PublicDbHaghighi.dbo.Districts.DistrictId
        //                      LEFT JOIN PublicDbHaghighi.dbo.States
        //                          ON TeniacoDbHaghighi.dbo.PropertyAddress.StateId = PublicDbHaghighi.dbo.States.StateId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.DocumentRootTypes
        //                          ON TeniacoDbHaghighi.dbo.Properties.DocumentRootTypeId = TeniacoDbHaghighi.dbo.DocumentRootTypes.DocumentRootTypeId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.DocumentOwnershipTypes
        //                          ON TeniacoDbHaghighi.dbo.Properties.DocumentOwnershipTypeId = TeniacoDbHaghighi.dbo.DocumentOwnershipTypes.DocumentOwnershipTypeId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.DocumentTypes
        //                          ON TeniacoDbHaghighi.dbo.Properties.DocumentTypeId = TeniacoDbHaghighi.dbo.DocumentTypes.DocumentTypeId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.TypeOfUses
        //                          ON TeniacoDbHaghighi.dbo.Properties.TypeOfUseId = TeniacoDbHaghighi.dbo.TypeOfUses.TypeOfUseId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.PropertyTypes
        //                          ON TeniacoDbHaghighi.dbo.Properties.PropertyTypeId = TeniacoDbHaghighi.dbo.PropertyTypes.PropertyTypeId
        //                      LEFT JOIN MelkavanDbHaghighi.dbo.BuildingLifes
        //                          ON TeniacoDbHaghighi.dbo.PropertiesDetails.BuildingLifeId = MelkavanDbHaghighi.dbo.BuildingLifes.BuildingLifeId
        //                      LEFT JOIN RankedPrices
        //                          ON TeniacoDbHaghighi.dbo.Properties.PropertyId = RankedPrices.PropertyId AND RankedPrices.RowNum = 1
        //                      WHERE TeniacoDbHaghighi.dbo.PropertyOwners.OwnerId = {OwnerId} 
        //                            AND TeniacoDbHaghighi.dbo.PropertyOwners.OwnerType = 'users' 
        //                            AND NOT EXISTS (
        //                                SELECT 1 
        //                                FROM ProjectsDbHaghighi.dbo.ConstructionProjects 
        //                                WHERE ProjectsDbHaghighi.dbo.ConstructionProjects.PropertyId = TeniacoDbHaghighi.dbo.Properties.PropertyId
        //                            )
        //                  ) AS tmp 
        //                  ORDER BY CreateEnDate DESC;



        //    ";

        //    sp = sp.Replace("{OwnerId}", userId.ToString());

        //    var list = teniacoApiDb.MyPropertiesForInvestorsAdvanceSearchVM.FromSqlRaw(sp).AsEnumerable().Distinct();


        //    try
        //    {

        //        listCount = list.Count();

        //        int skip = (pageNum - 1) * pageSize;
        //        myPropertiesForInvestorsAdvanceSearchVMList = list.OrderByDescending(s => s.CreateEnDate).Skip(skip).Take(pageSize).ToList();

        //    }
        //    catch (Exception exc)
        //    { }

        //    return myPropertiesForInvestorsAdvanceSearchVMList;
        //}




        #endregion





        public List<MyPropertiesForInvestorsAdvanceSearchVM> GetListOfMyPropertiesForInvestors(int jtStartIndex,
           int jtPageSize,
           ref int listCount,
           List<long> childsUsersIds,
           PublicApiContext publicApiDb,
           int pageNum,
           int pageSize,
           int? propertyTypeId = null,
           int? typeOfUseId = null,
           int? documentTypeId = null,
           long? ConsultantUserId = null,
           long? OwnerId = null,
           string propertyCodeName = null,
           long? stateId = null,
           long? cityId = null,
           long? zoneId = null,
           long? districtId = null,
           long? userId = null)
        {


            List<MyPropertiesForInvestorsAdvanceSearchVM> myPropertiesForInvestorsAdvanceSearchVMList = new List<MyPropertiesForInvestorsAdvanceSearchVM>();


            string sp = @"WITH RankedPrices AS (
                              SELECT 
                                  TeniacoDb.dbo.PropertiesPricesHistories.PropertyId,
                                  TeniacoDb.dbo.PropertiesPricesHistories.OfferPrice,
                                  TeniacoDb.dbo.PropertiesPricesHistories.OfferPriceType,
                                  TeniacoDb.dbo.PropertiesPricesHistories.CalculatedOfferPrice,
                                  TeniacoDb.dbo.PropertiesPricesHistories.PropertyPriceHistoryId,
                                  ROW_NUMBER() OVER (
                                      PARTITION BY TeniacoDb.dbo.PropertiesPricesHistories.PropertyId 
                                      ORDER BY TeniacoDb.dbo.PropertiesPricesHistories.PropertyPriceHistoryId DESC
                                  ) AS RowNum
                              FROM TeniacoDb.dbo.PropertiesPricesHistories
                          )
                          SELECT DISTINCT *
                          FROM (
                              SELECT 'Properties' AS RecordType,
                                     TeniacoDb.dbo.PropertyOwners.SharePercent,
                                     TeniacoDb.dbo.Properties.PropertyId,
                                     TeniacoDb.dbo.PropertyTypes.PropertyTypeTilte,
                                     TeniacoDb.dbo.Properties.PropertyTypeId,
                                     TeniacoDb.dbo.TypeOfUses.TypeOfUseTitle,
                                     TeniacoDb.dbo.DocumentTypes.DocumentTypeTitle,
                                     TeniacoDb.dbo.DocumentOwnershipTypes.DocumentOwnershipTypeTitle,
                                     TeniacoDb.dbo.DocumentRootTypes.DocumentRootTypeTitle,
                                     PublicDb.dbo.States.StateName,
                                     PublicDb.dbo.Cities.CityName,
                                     PublicDb.dbo.Zones.ZoneName,
                                     PublicDb.dbo.Districts.DistrictName,
                                     TeniacoDb.dbo.Properties.IsActivated,
                                     TeniacoDb.dbo.Properties.IsDeleted,
                                     TeniacoDb.dbo.Properties.EditEnDate,
                                     TeniacoDb.dbo.Properties.RebuiltInYearFa,
                                     TeniacoDb.dbo.Properties.CreateEnDate,
                                     TeniacoDb.dbo.Properties.PropertyCodeName,
                                     TeniacoDb.dbo.Properties.Area,
                                     TeniacoDb.dbo.Properties.PropertyDescriptions,
                                     TeniacoDb.dbo.Properties.UserIdCreator,
                                     TeniacoDb.dbo.PropertyOwners.OwnerId,
                                     TeniacoDb.dbo.PropertyAddress.LocationLon,
                                     TeniacoDb.dbo.PropertyAddress.LocationLat,
                                     MelkavanDb.dbo.BuildingLifes.BuildingLifeTitle,
                                     TeniacoDb.dbo.PropertiesDetails.Foundation,
                                     TeniacoDb.dbo.PropertiesDetails.Participable AS Participable,
                                     TeniacoDb.dbo.PropertiesDetails.Exchangeable AS Exchangeable,
                                     TeniacoDb.dbo.PropertyAddress.StateId,
                                     TeniacoDb.dbo.PropertyAddress.CityId,
                                     TeniacoDb.dbo.PropertyAddress.ZoneId,
                                     TeniacoDb.dbo.PropertyAddress.DistrictId,
                                     TeniacoDb.dbo.PropertyAddress.Address,
                                     CASE 
                                         WHEN RankedPrices.OfferPriceType = 1 THEN RankedPrices.OfferPrice
                                         ELSE RankedPrices.CalculatedOfferPrice
                                     END AS TotalPrice,
                                     CASE 
                                         WHEN RankedPrices.OfferPriceType = 1 THEN RankedPrices.CalculatedOfferPrice
                                         ELSE RankedPrices.OfferPrice
                                     END AS PricePerMeter
                              FROM TeniacoDb.dbo.Properties
                              INNER JOIN TeniacoDb.dbo.PropertyOwners 
                                  ON TeniacoDb.dbo.Properties.PropertyId = TeniacoDb.dbo.PropertyOwners.PropertyId
                              LEFT JOIN TeniacoDb.dbo.PropertyAddress 
                                  ON TeniacoDb.dbo.Properties.PropertyId = TeniacoDb.dbo.PropertyAddress.PropertyId
                              LEFT JOIN TeniacoDb.dbo.PropertiesDetails 
                                  ON TeniacoDb.dbo.Properties.PropertyId = TeniacoDb.dbo.PropertiesDetails.PropertyId
                              LEFT JOIN PublicDb.dbo.Cities
                                  ON TeniacoDb.dbo.PropertyAddress.CityId = PublicDb.dbo.Cities.CityId
                              LEFT JOIN PublicDb.dbo.Zones
                                  ON TeniacoDb.dbo.PropertyAddress.ZoneId = PublicDb.dbo.Zones.ZoneId
                              LEFT JOIN PublicDb.dbo.Districts
                                  ON TeniacoDb.dbo.PropertyAddress.DistrictId = PublicDb.dbo.Districts.DistrictId
                              LEFT JOIN PublicDb.dbo.States
                                  ON TeniacoDb.dbo.PropertyAddress.StateId = PublicDb.dbo.States.StateId
                              LEFT JOIN TeniacoDb.dbo.DocumentRootTypes
                                  ON TeniacoDb.dbo.Properties.DocumentRootTypeId = TeniacoDb.dbo.DocumentRootTypes.DocumentRootTypeId
                              LEFT JOIN TeniacoDb.dbo.DocumentOwnershipTypes
                                  ON TeniacoDb.dbo.Properties.DocumentOwnershipTypeId = TeniacoDb.dbo.DocumentOwnershipTypes.DocumentOwnershipTypeId
                              LEFT JOIN TeniacoDb.dbo.DocumentTypes
                                  ON TeniacoDb.dbo.Properties.DocumentTypeId = TeniacoDb.dbo.DocumentTypes.DocumentTypeId
                              LEFT JOIN TeniacoDb.dbo.TypeOfUses
                                  ON TeniacoDb.dbo.Properties.TypeOfUseId = TeniacoDb.dbo.TypeOfUses.TypeOfUseId
                              LEFT JOIN TeniacoDb.dbo.PropertyTypes
                                  ON TeniacoDb.dbo.Properties.PropertyTypeId = TeniacoDb.dbo.PropertyTypes.PropertyTypeId
                              LEFT JOIN MelkavanDb.dbo.BuildingLifes
                                  ON TeniacoDb.dbo.PropertiesDetails.BuildingLifeId = MelkavanDb.dbo.BuildingLifes.BuildingLifeId
                              LEFT JOIN RankedPrices
                                  ON TeniacoDb.dbo.Properties.PropertyId = RankedPrices.PropertyId AND RankedPrices.RowNum = 1
                              WHERE TeniacoDb.dbo.PropertyOwners.OwnerId = {OwnerId} 
                                    AND TeniacoDb.dbo.PropertyOwners.OwnerType = 'users' 
                                    AND NOT EXISTS (
                                        SELECT 1 
                                        FROM ProjectsDb.dbo.ConstructionProjects 
                                        WHERE ProjectsDb.dbo.ConstructionProjects.PropertyId = TeniacoDb.dbo.Properties.PropertyId
                                    )
                          ) AS tmp 
                          ORDER BY CreateEnDate DESC;



            ";

            sp = sp.Replace("{OwnerId}", userId.ToString());

            var list = teniacoApiDb.MyPropertiesForInvestorsAdvanceSearchVM.FromSqlRaw(sp).AsEnumerable().Distinct();

       
            try
            {

                listCount = list.Count();

                int skip = (pageNum - 1) * pageSize;
                myPropertiesForInvestorsAdvanceSearchVMList = list.OrderByDescending(s => s.CreateEnDate).Skip(skip).Take(pageSize).ToList();

            }
            catch (Exception exc)
            { }

            return myPropertiesForInvestorsAdvanceSearchVMList;
        }

        public long AddToMyPropertiesForInvestors(PropertiesVM PropertiesVM,
            IPublicApiBusiness publicApiBusiness)
        {
            using (var transaction = teniacoApiDb.Database.BeginTransaction())
            {
                try
                {
                    Entities.Properties properties = _mapper.Map<PropertiesVM, Entities.Properties>(PropertiesVM);

                    teniacoApiDb.Properties.Add(properties);
                    teniacoApiDb.SaveChanges();

                    if (PropertiesVM.PropertyAddressVM != null)
                    {
                        PropertyAddress propertyAddress = _mapper.Map<PropertyAddressVM, PropertyAddress>(PropertiesVM.PropertyAddressVM);
                        propertyAddress.PropertyId = properties.PropertyId;

                        teniacoApiDb.PropertyAddress.Add(propertyAddress);
                        teniacoApiDb.SaveChanges();
                    }
                    else
                    {
                        PropertyAddress propertyAddress = new PropertyAddress();
                        propertyAddress.PropertyId = properties.PropertyId;
                        propertyAddress.CreateEnDate = properties.CreateEnDate.Value;
                        propertyAddress.CreateTime = properties.CreateTime;
                        propertyAddress.UserIdCreator = properties.UserIdCreator.Value;
                        propertyAddress.IsActivated = true;
                        propertyAddress.IsDeleted = false;

                        teniacoApiDb.PropertyAddress.Add(propertyAddress);
                        teniacoApiDb.SaveChanges();
                    }

                    PropertiesPricesHistories propertiesPricesHistories = new PropertiesPricesHistories();
                    propertiesPricesHistories.OfferPrice = PropertiesVM.OfferPrice.HasValue ? PropertiesVM.OfferPrice.Value : 0;
                    propertiesPricesHistories.OfferPriceType = PropertiesVM.OfferPriceType.HasValue ? PropertiesVM.OfferPriceType.Value : 0;
                    propertiesPricesHistories.CalculatedOfferPrice = PropertiesVM.CalculatedOfferPrice.HasValue ? PropertiesVM.CalculatedOfferPrice.Value : 0;
                    propertiesPricesHistories.PropertyId = properties.PropertyId;

                    propertiesPricesHistories.CreateEnDate = properties.CreateEnDate.Value;
                    propertiesPricesHistories.CreateTime = properties.CreateTime;
                    propertiesPricesHistories.UserIdCreator = properties.UserIdCreator.Value;
                    propertiesPricesHistories.IsActivated = true;
                    propertiesPricesHistories.IsDeleted = false;

                    teniacoApiDb.PropertiesPricesHistories.Add(propertiesPricesHistories);
                    teniacoApiDb.SaveChanges();


                    transaction.Commit();

                    return properties.PropertyId;

                }
                catch (Exception exc)
                {
                    transaction.Rollback();
                }
            }
            return 0;
        }



        public PropertiesVM GetMyPropertyWithMyPropertyIdForInvestors(long propertyId,
            List<long> childsUsersIds,
            PublicApiContext publicApiDb)
        {
            PropertiesVM PropertiesVM = new PropertiesVM();

            try
            {

                PropertiesVM = _mapper.Map<Entities.Properties,
                    PropertiesVM>(teniacoApiDb.Properties
                    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                    .Where(e => e.PropertyId.Equals(propertyId)).FirstOrDefault());

                PropertiesVM.PropertyAddressVM = new PropertyAddressVM();

                PropertiesVM.PropertyAddressVM = _mapper.Map<PropertyAddress,
                    PropertyAddressVM>(teniacoApiDb.PropertyAddress
                    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                    .Where(e => e.PropertyId.Equals(propertyId)).FirstOrDefault());

                //States
                var States = publicApiDb.States.ToList();
                if (States.Where(p => p.StateId.Equals(PropertiesVM.PropertyAddressVM.StateId)).Any())
                {
                    var state = States.Where(p => p.StateId.Equals(PropertiesVM.PropertyAddressVM.StateId)).FirstOrDefault();
                    PropertiesVM.PropertyAddressVM.StateName = state.StateName;
                }

                //Cities
                var cities = publicApiDb.Cities.ToList();
                if (cities.Where(c => c.CityId.Equals(PropertiesVM.PropertyAddressVM.CityId)).Any())
                {
                    var city = cities.Where(c => c.CityId.Equals(PropertiesVM.PropertyAddressVM.CityId)).FirstOrDefault();
                    PropertiesVM.PropertyAddressVM.CityName = city.CityName;
                }

                //Zones
                var zones = publicApiDb.Zones.ToList();

                if (zones.Where(c => c.ZoneId.Equals(PropertiesVM.PropertyAddressVM.ZoneId)).Any())
                {
                    var zone = zones.Where(c => c.ZoneId.Equals(PropertiesVM.PropertyAddressVM.ZoneId)).FirstOrDefault();
                    PropertiesVM.PropertyAddressVM.ZoneName = zone.ZoneName;
                }

                PropertiesVM.PropertiesPricesHistoriesVM = new List<PropertiesPricesHistoriesVM>();

                PropertiesVM.PropertiesPricesHistoriesVM.Add(_mapper.Map<PropertiesPricesHistories,
                    PropertiesPricesHistoriesVM>(teniacoApiDb.PropertiesPricesHistories
                     .Where(h => h.PropertyId.Equals(propertyId)).OrderByDescending(c => c.CreateEnDate)
                    .ThenByDescending(c => c.CreateTime).FirstOrDefault()));

            }
            catch (Exception exc)
            { }

            return PropertiesVM;
        }

        public long UpdateMyPropertiesForInvestors(ref PropertiesVM PropertiesVM,
           List<long> childsUsersIds,
           long? UserId)
        {
            long propertyId = PropertiesVM.PropertyId;

            var propertyOwners = teniacoApiDb.PropertyOwners.Where(c => childsUsersIds.Contains(c.OwnerId) && c.OwnerType.Equals("users") && c.PropertyId.Equals(propertyId)).ToList();

            if (propertyOwners != null && propertyOwners.Count > 0)
            {
                using (var transaction = teniacoApiDb.Database.BeginTransaction())
                {
                    try
                    {
                        #region Property
                        Entities.Properties properties = (from c in teniacoApiDb.Properties
                                                          where c.PropertyId == propertyId
                                                          select c).FirstOrDefault();

                        properties.PropertyTypeId = PropertiesVM.PropertyTypeId;
                        properties.PropertyCodeName = PropertiesVM.PropertyCodeName;
                        properties.TypeOfUseId = PropertiesVM.TypeOfUseId.HasValue ? PropertiesVM.TypeOfUseId.Value : (int?)0;
                        properties.DocumentOwnershipTypeId = PropertiesVM.DocumentOwnershipTypeId.HasValue ? PropertiesVM.DocumentOwnershipTypeId.Value : (int?)0;
                        properties.DocumentRootTypeId = PropertiesVM.DocumentRootTypeId.HasValue ? PropertiesVM.DocumentRootTypeId.Value : (int?)0;
                        properties.DocumentTypeId = PropertiesVM.DocumentTypeId.HasValue ? PropertiesVM.DocumentTypeId.Value : (int?)0;
                        properties.Area = PropertiesVM.Area;
                        properties.RebuiltInYearFa = PropertiesVM.RebuiltInYearFa;


                        properties.EditEnDate = DateTime.Now;
                        properties.EditTime = PersianDate.TimeNow;
                        properties.UserIdEditor = properties.UserIdEditor.Value;
                        properties.IsActivated = properties.IsActivated.HasValue ? properties.IsActivated.Value : (bool?)true;
                        properties.IsDeleted = properties.IsDeleted.HasValue ? properties.IsDeleted.Value : (bool?)false;
                        properties.PropertyDescriptions = PropertiesVM.PropertyDescriptions;


                        teniacoApiDb.Entry<Entities.Properties>(properties).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();
                        #endregion

                        #region PriceHistory

                        #region Update Price
                        //PropertiesPricesHistories propertiesPricesHistories = (from h in teniacoApiDb.PropertiesPricesHistories
                        //                                                           where h.PropertyId == propertyId
                        //                                                           select h).OrderByDescending(c => c.CreateEnDate)
                        //                                                            .ThenByDescending(c => c.CreateTime)
                        //                                                            .FirstOrDefault();

                        //    propertiesPricesHistories.OfferPrice = PropertiesVM.OfferPrice;
                        //    propertiesPricesHistories.OfferPriceType = PropertiesVM.OfferPriceType;
                        //    propertiesPricesHistories.CalculatedOfferPrice = PropertiesVM.CalculatedOfferPrice;
                        //    propertiesPricesHistories.PriceTypeRegister = PropertiesVM.PriceTypeRegister;
                        //    propertiesPricesHistories.EditEnDate = DateTime.Now;
                        //    propertiesPricesHistories.EditTime = PersianDate.TimeNow;
                        //    propertiesPricesHistories.IsActivated = true;
                        //    propertiesPricesHistories.IsDeleted = false;

                        //    teniacoApiDb.Entry<PropertiesPricesHistories>(propertiesPricesHistories).State = EntityState.Modified;
                        #endregion

                        #region New Price
                        PropertiesPricesHistories propertiesPricesHistories = new()
                        {
                            OfferPrice = PropertiesVM.OfferPrice.HasValue ? PropertiesVM.OfferPrice.Value : 0,
                            OfferPriceType = PropertiesVM.OfferPriceType.HasValue ? PropertiesVM.OfferPriceType.Value : 0,
                            CalculatedOfferPrice = PropertiesVM.CalculatedOfferPrice.HasValue ? PropertiesVM.CalculatedOfferPrice.Value : 0,
                            PropertyId = properties.PropertyId,
                            CreateEnDate = DateTime.Now,
                            CreateTime = PersianDate.TimeNow,
                            UserIdCreator = UserId,
                            IsActivated = true,
                            IsDeleted = false,
                        };
                        teniacoApiDb.Entry<PropertiesPricesHistories>(propertiesPricesHistories).State = EntityState.Added;

                        #endregion

                        teniacoApiDb.SaveChanges();
                        #endregion

                        #region PropertyDetails
                        Entities.PropertiesDetails propertyDetails = (from c in teniacoApiDb.PropertiesDetails
                                                                      where c.PropertyId == propertyId
                                                                      select c).FirstOrDefault();

                        propertyDetails.Foundation = PropertiesVM.PropertiesDetailsVM.Foundation;
                        propertyDetails.BuildingLifeId = PropertiesVM.PropertiesDetailsVM.BuildingLifeId;
                        propertyDetails.Exchangeable = PropertiesVM.PropertiesDetailsVM.Exchangeable;
                        propertyDetails.Participable = PropertiesVM.PropertiesDetailsVM.Participable;


                        teniacoApiDb.Entry<Entities.PropertiesDetails>(propertyDetails).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();
                        #endregion

                        transaction.Commit();

                        PropertiesVM.UserIdCreator = properties.UserIdCreator.Value;

                        return properties.PropertyId;
                    }
                    catch (Exception exc)
                    {
                        transaction.Rollback();
                    }



                }
            }

            return 0;
        }

        public bool CompleteDeleteMyPropertiesForInvestors(long propertyId,
            List<long> childsUsersIds)
        {
            try
            {
                var properties = (from c in teniacoApiDb.Properties
                                  where c.PropertyId == propertyId &&
                                  childsUsersIds.Contains(c.UserIdCreator.Value)
                                  select c).FirstOrDefault();

                if (properties != null)
                {
                    using (var transaction = teniacoApiDb.Database.BeginTransaction())
                    {
                        try
                        {
                            var propertyAddress = (from c in teniacoApiDb.PropertyAddress
                                                   where c.PropertyId == propertyId &&
                                                   childsUsersIds.Contains(c.UserIdCreator.Value)
                                                   select c).FirstOrDefault();

                            teniacoApiDb.PropertyAddress.Remove(propertyAddress);
                            teniacoApiDb.SaveChanges();

                            teniacoApiDb.Properties.Remove(properties);
                            teniacoApiDb.SaveChanges();

                            transaction.Commit();

                            return true;
                        }
                        catch (Exception exc)
                        {
                            transaction.Rollback();
                        }
                    }
                }
            }
            catch (Exception exc)
            { }

            return false;
        }

        #endregion

        #region  Methods for Work With MyPropertiesFeaturesForInvestorsManagement
        public PropertyFeaturesValuesVM GetMyPropertyFeaturesValuesForInvestors(long propertyId,
        int propertyTypeId)
        {
            PropertyFeaturesValuesVM myPropertyFeaturesValuesVM = new PropertyFeaturesValuesVM();

            try
            {

                if (teniacoApiDb.Features.Where(f => f.PropertyTypeId.Equals(propertyTypeId)).Any())
                {
                    myPropertyFeaturesValuesVM.FeaturesVMList = _mapper.Map<List<Features>,
                        List<FeaturesVM>>(teniacoApiDb.Features.Where(f => f.PropertyTypeId.Equals(propertyTypeId)).ToList());


                    // codes by sina
                    List<int> featuresCategoriesIds = teniacoApiDb.Features.Where(c => c.PropertyTypeId == propertyTypeId).Select(c => c.FeatureCategoryId).Distinct().ToList();
                    List<int> featureIds = teniacoApiDb.Features.Where(c => featuresCategoriesIds.Contains(c.FeatureCategoryId)).Select(c => c.FeatureId).Distinct().ToList();

                    myPropertyFeaturesValuesVM.FeaturesCategoriesVMList = _mapper.Map<List<FeaturesCategories>, List<FeaturesCategoriesVM>>(teniacoApiDb.FeaturesCategories.Where(f => featuresCategoriesIds.Contains(f.FeatureCategoryId)).ToList());




                    if (teniacoApiDb.FeaturesOptions.Where(fo => featureIds.Contains(fo.FeatureId)).Any())
                    {
                        myPropertyFeaturesValuesVM.FeaturesOptionsVMList = _mapper.Map<List<FeaturesOptions>,
                            List<FeaturesOptionsVM>>(teniacoApiDb.FeaturesOptions.Where(fo => featureIds.Contains(fo.FeatureId)).ToList());
                    }

                    if (teniacoApiDb.FeaturesValues.Where(fv => fv.PropertyId.Equals(propertyId)).Any())
                    {
                        myPropertyFeaturesValuesVM.FeaturesValuesVMList = myPropertyFeaturesValuesVM.FeaturesValuesVMList = _mapper.Map<List<FeaturesValues>,
                            List<FeaturesValuesVM>>(teniacoApiDb.FeaturesValues.Where(fv => fv.PropertyId.Equals(propertyId)).ToList());
                    }
                }
            }
            catch (Exception exc)
            { }

            return myPropertyFeaturesValuesVM;
        }


        public bool UpdateMyPropertyFeaturesForInvestors(long propertyId, List<FeaturesValuesVM> featuresValuesVMList)
        {
            try
            {
                if (teniacoApiDb.FeaturesValues.Where(fv => fv.PropertyId.Equals(propertyId)).Any())
                {
                    var oldFeaturesValues = teniacoApiDb.FeaturesValues.Where(fv => fv.PropertyId.Equals(propertyId)).ToList();
                    teniacoApiDb.FeaturesValues.RemoveRange(oldFeaturesValues);
                    teniacoApiDb.SaveChanges();
                }

                var featuresValuesList = _mapper.Map<List<FeaturesValuesVM>, List<FeaturesValues>>(featuresValuesVMList);

                teniacoApiDb.FeaturesValues.AddRange(featuresValuesList);
                teniacoApiDb.SaveChanges();

                return true;
            }
            catch (Exception exc)
            { }

            return false;
        }
        #endregion

        #region Methods for Work With MyPropertyFilesForInvestorsManagement

        public List<PropertyFilesVM> GetAllMyPropertyFilesForInvestorsList(ref int listCount,
        List<long> childsUsersIds,
        long? propertyId = null,
        string propertyFileTitle = "",
        string propertyFileType = "")
        {
            List<PropertyFilesVM> myPropertyFilesVMList = new List<PropertyFilesVM>();

            try
            {
                var list = (from pf in teniacoApiDb.PropertyFiles
                            where childsUsersIds.Contains(pf.UserIdCreator.Value) &&
                            pf.IsDeleted.Value.Equals(false) &&
                            pf.IsActivated.Value.Equals(true) &&
                            pf.PropertyId.Equals(propertyId)
                            select pf).AsQueryable();

                if (!string.IsNullOrEmpty(propertyFileTitle))
                    list = list.Where(a => a.PropertyFileTitle.Contains(propertyFileTitle));

                if (!string.IsNullOrEmpty(propertyFileType))
                    list = list.Where(a => a.PropertyFileType.Contains(propertyFileType));

                listCount = list.Count();

                myPropertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<PropertyFilesVM>>(list.OrderByDescending(pf => pf.PropertyFileId).ToList());
            }
            catch (Exception exc)
            { }

            return myPropertyFilesVMList;
        }


        public List<PropertyFilesVM> GetListOfMyPropertyFilesForInvestors(int jtStartIndex,
             int jtPageSize,
             ref int listCount,
             List<long> childsUsersIds,
             long? propertyId = null,
             string propertyFileTitle = "",
             string propertyFileType = "")
        {
            List<PropertyFilesVM> myPropertyFilesVMList = new List<PropertyFilesVM>();

            var list = teniacoApiDb.PropertyFiles.Where(pf => pf.PropertyId == propertyId && pf.IsActivated == true && pf.IsDeleted == false && pf.PropertyFileType == propertyFileType).AsQueryable();

            listCount = list.Count();

            try
            {
                if (listCount > jtPageSize)
                {

                    myPropertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<PropertyFilesVM>>(list.OrderBy(s => s.PropertyFileOrder)
                             .Skip(jtStartIndex).Take(jtPageSize).ToList());
                }
                else
                {

                    myPropertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<PropertyFilesVM>>(list.OrderBy(s => s.PropertyFileOrder).ToList());
                }


            }
            catch (Exception exc)
            { }
            return myPropertyFilesVMList;
        }


        public bool AddToMyPropertyFilesForInvestors(List<PropertyFilesVM> myPropertyFilesVMList, long? PropertyId)
        {
            try
            {
                if (myPropertyFilesVMList != null)
                    if (myPropertyFilesVMList.Count > 0)
                    {
                        var myPropertyFilesList = _mapper.Map<List<PropertyFilesVM>, List<PropertyFiles>>(myPropertyFilesVMList);

                        teniacoApiDb.PropertyFiles.AddRange(myPropertyFilesList);
                        teniacoApiDb.SaveChanges();

                        return true;
                    }
            }
            catch (Exception exc)
            {
            }
            return false;
        }



        public bool AddMediaToPropertyFilesForInvestors(List<PropertyFilesVM> propertyFilesVMList,
    List<int>? DeletedPhotosIDs,
    bool? IsMainChanged,
    long? PropertyId)
        {

            bool result = false;
            try
            {

                //for removing files
                if (DeletedPhotosIDs != null && DeletedPhotosIDs.Count > 0)
                {
                    foreach (int id in DeletedPhotosIDs)
                    {
                        var FileToDelete = teniacoApiDb.PropertyFiles
                            .Where(f => f.PropertyFileId == id).FirstOrDefault();

                        teniacoApiDb.PropertyFiles.Remove(FileToDelete);
                        teniacoApiDb.SaveChanges();
                    }

                    var currentPropertyFilesIds = teniacoApiDb.PropertyFiles.Where(f => f.PropertyId == PropertyId && f.PropertyFileType == "media").OrderBy(f => f.PropertyFileOrder).Select(f => f.PropertyFileId).ToList();
                    // Reordering the media files
                    for (int i = 0; i < currentPropertyFilesIds.Count; i++)
                    {
                        var property = teniacoApiDb.PropertyFiles.Where(f => f.PropertyFileId == currentPropertyFilesIds[i]).FirstOrDefault();
                        property.PropertyFileOrder = i + 1;
                        teniacoApiDb.PropertyFiles.Update(property);
                        teniacoApiDb.SaveChanges();
                    }

                    result = true;
                }


                if (propertyFilesVMList != null)
                    if (propertyFilesVMList.Count > 0)
                    {
                        var MainFile = teniacoApiDb.PropertyFiles
                            .Where(a => a.PropertyId == PropertyId && a.PropertyFileOrder == 1).FirstOrDefault();


                        var propertyFilesList = _mapper.Map<List<PropertyFilesVM>, List<PropertyFiles>>(propertyFilesVMList);

                        teniacoApiDb.PropertyFiles.AddRange(propertyFilesList);
                        teniacoApiDb.SaveChanges();



                        if (MainFile != null && IsMainChanged == true)
                        {
                            teniacoApiDb.PropertyFiles.Remove(MainFile);
                            teniacoApiDb.SaveChanges();
                        }


                        var currentPropertyFilesIds = teniacoApiDb.PropertyFiles.Where(f => f.PropertyId == PropertyId && f.PropertyFileType == "media").OrderBy(f => f.PropertyFileOrder).Select(f => f.PropertyFileId).ToList();
                        // Reordering the media files
                        for (int i = 0; i < currentPropertyFilesIds.Count; i++)
                        {
                            var property = teniacoApiDb.PropertyFiles.Where(f => f.PropertyFileId == currentPropertyFilesIds[i]).FirstOrDefault();
                            property.PropertyFileOrder = i + 1;
                            teniacoApiDb.PropertyFiles.Update(property);
                            teniacoApiDb.SaveChanges();
                        }




                        return true;
                    }




            }
            catch (Exception exc)
            {
            }
            return result;
        }


        public bool UpdateMyPropertyFilesForInvestors(ref PropertyFilesVM myPropertyFilesVM,
           List<long> childsUsersIds)
        {
            int propertyFileId = myPropertyFilesVM.PropertyFileId;
            long propertyId = myPropertyFilesVM.PropertyId;
            int propertyFileOrder = myPropertyFilesVM.PropertyFileOrder;
            string propertyFileExt = myPropertyFilesVM.PropertyFileExt;
            string propertyFilePath = myPropertyFilesVM.PropertyFilePath;
            string propertyFileTitle = myPropertyFilesVM.PropertyFileTitle;
            string propertyFileType = myPropertyFilesVM.PropertyFileType;

            try
            {
                PropertyFiles myPropertyFiles = (from c in teniacoApiDb.PropertyFiles
                                                 where c.PropertyFileId == propertyFileId
                                                 select c).FirstOrDefault();

                myPropertyFiles.PropertyId = propertyId;
                myPropertyFiles.PropertyFileExt = propertyFileExt;
                myPropertyFiles.PropertyFileOrder = propertyFileOrder;
                myPropertyFiles.PropertyFilePath = propertyFilePath;
                myPropertyFiles.PropertyFileTitle = propertyFileTitle;
                myPropertyFiles.PropertyFileType = propertyFileType;

                myPropertyFiles.EditEnDate = DateTime.Now;
                myPropertyFiles.EditTime = PersianDate.TimeNow;
                myPropertyFiles.UserIdEditor = myPropertyFilesVM.UserIdEditor;
                myPropertyFiles.IsActivated = myPropertyFilesVM.IsActivated;
                myPropertyFiles.IsDeleted = myPropertyFilesVM.IsDeleted;

                teniacoApiDb.Entry<PropertyFiles>(myPropertyFiles).State = EntityState.Modified;
                teniacoApiDb.SaveChanges();

                return true;
            }
            catch (Exception exc)
            {
            }

            return false;
        }


        public bool CompleteDeleteMyPropertyFilesForInvestors(int propertyFileId,
            List<long> childsUsersIds)
        {
            try
            {
                var propertyFiles = (from c in teniacoApiDb.PropertyFiles
                                     where c.PropertyFileId == propertyFileId &&
                                     childsUsersIds.Contains(c.UserIdCreator.Value)
                                     select c).FirstOrDefault();

                if (propertyFiles != null)
                {
                    teniacoApiDb.PropertyFiles.Remove(propertyFiles);
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;
        }


        #endregion

        #region Methods For Work With MyPropertylocationForInvestorsManagement
        public bool UpdateMyPropertyLocationForInvestors(long? userId,
            long propertyId,
            int? stateId,
            int? cityId,
            int? zoneId,
            int? districtId,
            string? address,
            double? locationLat,
            double? locationLon)
        {
            try
            {
                if (teniacoApiDb.PropertyAddress.Where(pa => pa.PropertyId.Equals(propertyId)).Any())
                {
                    var myPropertyAddress = teniacoApiDb.PropertyAddress.Where(pa => pa.PropertyId.Equals(propertyId)).FirstOrDefault();

                    if (myPropertyAddress != null)
                    {

                        if (locationLat != 0 && locationLat != null) myPropertyAddress.LocationLat = locationLat;
                        if (locationLon != 0 && locationLon != null) myPropertyAddress.LocationLon = locationLon;
                        if (stateId != 0 && stateId != null) myPropertyAddress.StateId = stateId;
                        if (cityId != 0 && cityId != null) myPropertyAddress.CityId = cityId;
                        if (zoneId != 0 && zoneId != null) myPropertyAddress.ZoneId = zoneId;
                        if (districtId != 0 && districtId != null) myPropertyAddress.DistrictId = districtId;
                        if (!string.IsNullOrEmpty(address)) myPropertyAddress.Address = address;

                        myPropertyAddress.EditEnDate = DateTime.Now;
                        myPropertyAddress.EditTime = PersianDate.TimeNow;
                        myPropertyAddress.UserIdEditor = userId;
                        teniacoApiDb.Entry<PropertyAddress>(myPropertyAddress).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();

                        return true;
                    }
                }
            }
            catch (Exception exc)
            { }

            return false;
        }
        #endregion

        #region Methods For Work With MyPropertiesPricesHistoriesForInvestorsManagement
        public List<PropertiesPricesHistoriesVM> GetListOfMyPropertiesPricesHistoriesForInvestors(
             int jtStartIndex,
             int jtPageSize,
             ref int listCount,
             List<long> childsUsersIds,
             long propertyId)
        {
            List<PropertiesPricesHistoriesVM> PricesHistoriesVMList = new List<PropertiesPricesHistoriesVM>();


            var list = teniacoApiDb.PropertiesPricesHistories.Where(h => h.PropertyId == propertyId && h.IsActivated == true && h.IsDeleted == false).AsQueryable();

            try
            {

                listCount = list.Count();

                if (listCount > jtPageSize)
                {

                    PricesHistoriesVMList = _mapper.Map<List<PropertiesPricesHistories>, List<PropertiesPricesHistoriesVM>>(list.OrderByDescending(s => s.PropertyPriceHistoryId)
                             .Skip(jtStartIndex).Take(jtPageSize).ToList());
                }
                else
                    PricesHistoriesVMList = _mapper.Map<List<PropertiesPricesHistories>, List<PropertiesPricesHistoriesVM>>(list.OrderByDescending(s => s.PropertyPriceHistoryId).ToList());


            }
            catch (Exception exc)
            { }
            return PricesHistoriesVMList;
        }
        #endregion

        #endregion

        #region Methods For Work With MelkavanProperties


        #region Sina's Code

        //public List<MyPropertiesForInvestorsAdvanceSearchVM> GetListOfMelkavanProperties(int jtStartIndex,
        //                int jtPageSize,
        //                ref int listCount,
        //                List<long> childsUsersIds,
        //                PublicApiContext publicApiDb,
        //                int pageNum,
        //                int pageSize,
        //                int? propertyTypeId = null,
        //                int? typeOfUseId = null,
        //                int? documentTypeId = null,
        //                long? ConsultantUserId = null,
        //                long? OwnerId = null,
        //                string propertyCodeName = null,
        //                long? stateId = null,
        //                long? cityId = null,
        //                long? zoneId = null,
        //                long? districtId = null,
        //                long? userId = null)
        //{


        //    List<MyPropertiesForInvestorsAdvanceSearchVM> myPropertiesForInvestorsAdvanceSearchVMList = new List<MyPropertiesForInvestorsAdvanceSearchVM>();


        //    string sp = @"WITH RankedPrices AS (
        //                      SELECT 
        //                          TeniacoDbHaghighi.dbo.PropertiesPricesHistories.PropertyId,
        //                          TeniacoDbHaghighi.dbo.PropertiesPricesHistories.OfferPrice,
        //                          TeniacoDbHaghighi.dbo.PropertiesPricesHistories.OfferPriceType,
        //                          TeniacoDbHaghighi.dbo.PropertiesPricesHistories.CalculatedOfferPrice,
        //                          TeniacoDbHaghighi.dbo.PropertiesPricesHistories.PropertyPriceHistoryId,
        //                          ROW_NUMBER() OVER (
        //                              PARTITION BY TeniacoDbHaghighi.dbo.PropertiesPricesHistories.PropertyId 
        //                              ORDER BY TeniacoDbHaghighi.dbo.PropertiesPricesHistories.PropertyPriceHistoryId DESC
        //                          ) AS RowNum
        //                      FROM TeniacoDbHaghighi.dbo.PropertiesPricesHistories
        //                  )
        //                  SELECT DISTINCT *
        //                  FROM (
        //                      SELECT 'Properties' AS RecordType,
        //                             TeniacoDbHaghighi.dbo.PropertyOwners.SharePercent,
        //                             TeniacoDbHaghighi.dbo.Properties.PropertyId,
        //                             TeniacoDbHaghighi.dbo.PropertyTypes.PropertyTypeTilte,
        //                             TeniacoDbHaghighi.dbo.Properties.PropertyTypeId,
        //                             TeniacoDbHaghighi.dbo.TypeOfUses.TypeOfUseTitle,
        //                             TeniacoDbHaghighi.dbo.DocumentTypes.DocumentTypeTitle,
        //                             TeniacoDbHaghighi.dbo.DocumentOwnershipTypes.DocumentOwnershipTypeTitle,
        //                             TeniacoDbHaghighi.dbo.DocumentRootTypes.DocumentRootTypeTitle,
        //                             PublicDbHaghighi.dbo.States.StateName,
        //                             PublicDbHaghighi.dbo.Cities.CityName,
        //                             PublicDbHaghighi.dbo.Zones.ZoneName,
        //                             PublicDbHaghighi.dbo.Districts.DistrictName,
        //                             TeniacoDbHaghighi.dbo.Properties.IsActivated,
        //                             TeniacoDbHaghighi.dbo.Properties.IsDeleted,
        //                             TeniacoDbHaghighi.dbo.Properties.EditEnDate,
        //                             TeniacoDbHaghighi.dbo.Properties.RebuiltInYearFa,
        //                             TeniacoDbHaghighi.dbo.Properties.CreateEnDate,
        //                             TeniacoDbHaghighi.dbo.Properties.PropertyCodeName,
        //                             TeniacoDbHaghighi.dbo.Properties.Area,
        //                             TeniacoDbHaghighi.dbo.Properties.PropertyDescriptions,
        //                             TeniacoDbHaghighi.dbo.Properties.UserIdCreator,
        //                             TeniacoDbHaghighi.dbo.PropertyOwners.OwnerId,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.LocationLon,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.LocationLat,
        //                             MelkavanDbHaghighi.dbo.BuildingLifes.BuildingLifeTitle,
        //                             TeniacoDbHaghighi.dbo.PropertiesDetails.Foundation,
        //                             TeniacoDbHaghighi.dbo.PropertiesDetails.Participable AS Participable,
        //                             TeniacoDbHaghighi.dbo.PropertiesDetails.Exchangeable AS Exchangeable,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.StateId,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.CityId,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.ZoneId,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.DistrictId,
        //                             TeniacoDbHaghighi.dbo.PropertyAddress.Address,
        //                             CASE 
        //                                 WHEN RankedPrices.OfferPriceType = 1 THEN RankedPrices.OfferPrice
        //                                 ELSE RankedPrices.CalculatedOfferPrice
        //                             END AS TotalPrice,
        //                             CASE 
        //                                 WHEN RankedPrices.OfferPriceType = 1 THEN RankedPrices.CalculatedOfferPrice
        //                                 ELSE RankedPrices.OfferPrice
        //                             END AS PricePerMeter
        //                      FROM TeniacoDbHaghighi.dbo.Properties
        //                      INNER JOIN TeniacoDbHaghighi.dbo.PropertyOwners 
        //                          ON TeniacoDbHaghighi.dbo.Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertyOwners.PropertyId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.PropertyAddress 
        //                          ON TeniacoDbHaghighi.dbo.Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertyAddress.PropertyId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.PropertiesDetails 
        //                          ON TeniacoDbHaghighi.dbo.Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertiesDetails.PropertyId
        //                      LEFT JOIN PublicDbHaghighi.dbo.Cities
        //                          ON TeniacoDbHaghighi.dbo.PropertyAddress.CityId = PublicDbHaghighi.dbo.Cities.CityId
        //                      LEFT JOIN PublicDbHaghighi.dbo.Zones
        //                          ON TeniacoDbHaghighi.dbo.PropertyAddress.ZoneId = PublicDbHaghighi.dbo.Zones.ZoneId
        //                      LEFT JOIN PublicDbHaghighi.dbo.Districts
        //                          ON TeniacoDbHaghighi.dbo.PropertyAddress.DistrictId = PublicDbHaghighi.dbo.Districts.DistrictId
        //                      LEFT JOIN PublicDbHaghighi.dbo.States
        //                          ON TeniacoDbHaghighi.dbo.PropertyAddress.StateId = PublicDbHaghighi.dbo.States.StateId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.DocumentRootTypes
        //                          ON TeniacoDbHaghighi.dbo.Properties.DocumentRootTypeId = TeniacoDbHaghighi.dbo.DocumentRootTypes.DocumentRootTypeId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.DocumentOwnershipTypes
        //                          ON TeniacoDbHaghighi.dbo.Properties.DocumentOwnershipTypeId = TeniacoDbHaghighi.dbo.DocumentOwnershipTypes.DocumentOwnershipTypeId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.DocumentTypes
        //                          ON TeniacoDbHaghighi.dbo.Properties.DocumentTypeId = TeniacoDbHaghighi.dbo.DocumentTypes.DocumentTypeId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.TypeOfUses
        //                          ON TeniacoDbHaghighi.dbo.Properties.TypeOfUseId = TeniacoDbHaghighi.dbo.TypeOfUses.TypeOfUseId
        //                      LEFT JOIN TeniacoDbHaghighi.dbo.PropertyTypes
        //                          ON TeniacoDbHaghighi.dbo.Properties.PropertyTypeId = TeniacoDbHaghighi.dbo.PropertyTypes.PropertyTypeId
        //                      LEFT JOIN MelkavanDbHaghighi.dbo.BuildingLifes
        //                          ON TeniacoDbHaghighi.dbo.PropertiesDetails.BuildingLifeId = MelkavanDbHaghighi.dbo.BuildingLifes.BuildingLifeId
        //                      LEFT JOIN RankedPrices
        //                          ON TeniacoDbHaghighi.dbo.Properties.PropertyId = RankedPrices.PropertyId AND RankedPrices.RowNum = 1
        //                      WHERE TeniacoDbHaghighi.dbo.PropertyOwners.OwnerId = {OwnerId} 
        //                            AND TeniacoDbHaghighi.dbo.PropertyOwners.OwnerType = 'users' 
        //                  ) AS tmp 
        //                  ORDER BY CreateEnDate DESC;



        //    ";

        //    sp = sp.Replace("{OwnerId}", userId.ToString());

        //    var list = teniacoApiDb.MyPropertiesForInvestorsAdvanceSearchVM.FromSqlRaw(sp).AsEnumerable().Distinct();


        //    try
        //    {

        //        listCount = list.Count();

        //        int skip = (pageNum - 1) * pageSize;
        //        myPropertiesForInvestorsAdvanceSearchVMList = list.OrderByDescending(s => s.CreateEnDate).Skip(skip).Take(pageSize).ToList();

        //    }
        //    catch (Exception exc)
        //    { }

        //    return myPropertiesForInvestorsAdvanceSearchVMList;
        //}


        #endregion




        public List<MyPropertiesForInvestorsAdvanceSearchVM> GetListOfMelkavanProperties(int jtStartIndex,
                      int jtPageSize,
                      ref int listCount,
                      List<long> childsUsersIds,
                      PublicApiContext publicApiDb,
                      int pageNum,
                      int pageSize,
                      int? propertyTypeId = null,
                      int? typeOfUseId = null,
                      int? documentTypeId = null,
                      long? ConsultantUserId = null,
                      long? OwnerId = null,
                      string propertyCodeName = null,
                      long? stateId = null,
                      long? cityId = null,
                      long? zoneId = null,
                      long? districtId = null,
                      long? userId = null)
        {


            List<MyPropertiesForInvestorsAdvanceSearchVM> myPropertiesForInvestorsAdvanceSearchVMList = new List<MyPropertiesForInvestorsAdvanceSearchVM>();


            string sp = @"WITH RankedPrices AS (
                              SELECT 
                                  TeniacoDb.dbo.PropertiesPricesHistories.PropertyId,
                                  TeniacoDb.dbo.PropertiesPricesHistories.OfferPrice,
                                  TeniacoDb.dbo.PropertiesPricesHistories.OfferPriceType,
                                  TeniacoDb.dbo.PropertiesPricesHistories.CalculatedOfferPrice,
                                  TeniacoDb.dbo.PropertiesPricesHistories.PropertyPriceHistoryId,
                                  ROW_NUMBER() OVER (
                                      PARTITION BY TeniacoDb.dbo.PropertiesPricesHistories.PropertyId 
                                      ORDER BY TeniacoDb.dbo.PropertiesPricesHistories.PropertyPriceHistoryId DESC
                                  ) AS RowNum
                              FROM TeniacoDb.dbo.PropertiesPricesHistories
                          )
                          SELECT DISTINCT *
                          FROM (
                              SELECT 'Properties' AS RecordType,
                                     TeniacoDb.dbo.PropertyOwners.SharePercent,
                                     TeniacoDb.dbo.Properties.PropertyId,
                                     TeniacoDb.dbo.PropertyTypes.PropertyTypeTilte,
                                     TeniacoDb.dbo.Properties.PropertyTypeId,
                                     TeniacoDb.dbo.TypeOfUses.TypeOfUseTitle,
                                     TeniacoDb.dbo.DocumentTypes.DocumentTypeTitle,
                                     TeniacoDb.dbo.DocumentOwnershipTypes.DocumentOwnershipTypeTitle,
                                     TeniacoDb.dbo.DocumentRootTypes.DocumentRootTypeTitle,
                                     PublicDb.dbo.States.StateName,
                                     PublicDb.dbo.Cities.CityName,
                                     PublicDb.dbo.Zones.ZoneName,
                                     PublicDb.dbo.Districts.DistrictName,
                                     TeniacoDb.dbo.Properties.IsActivated,
                                     TeniacoDb.dbo.Properties.IsDeleted,
                                     TeniacoDb.dbo.Properties.EditEnDate,
                                     TeniacoDb.dbo.Properties.RebuiltInYearFa,
                                     TeniacoDb.dbo.Properties.CreateEnDate,
                                     TeniacoDb.dbo.Properties.PropertyCodeName,
                                     TeniacoDb.dbo.Properties.Area,
                                     TeniacoDb.dbo.Properties.PropertyDescriptions,
                                     TeniacoDb.dbo.Properties.UserIdCreator,
                                     TeniacoDb.dbo.PropertyOwners.OwnerId,
                                     TeniacoDb.dbo.PropertyAddress.LocationLon,
                                     TeniacoDb.dbo.PropertyAddress.LocationLat,
                                     MelkavanDb.dbo.BuildingLifes.BuildingLifeTitle,
                                     TeniacoDb.dbo.PropertiesDetails.Foundation,
                                     TeniacoDb.dbo.PropertiesDetails.Participable AS Participable,
                                     TeniacoDb.dbo.PropertiesDetails.Exchangeable AS Exchangeable,
                                     TeniacoDb.dbo.PropertyAddress.StateId,
                                     TeniacoDb.dbo.PropertyAddress.CityId,
                                     TeniacoDb.dbo.PropertyAddress.ZoneId,
                                     TeniacoDb.dbo.PropertyAddress.DistrictId,
                                     TeniacoDb.dbo.PropertyAddress.Address,
                                     CASE 
                                         WHEN RankedPrices.OfferPriceType = 1 THEN RankedPrices.OfferPrice
                                         ELSE RankedPrices.CalculatedOfferPrice
                                     END AS TotalPrice,
                                     CASE 
                                         WHEN RankedPrices.OfferPriceType = 1 THEN RankedPrices.CalculatedOfferPrice
                                         ELSE RankedPrices.OfferPrice
                                     END AS PricePerMeter
                              FROM TeniacoDb.dbo.Properties
                              INNER JOIN TeniacoDb.dbo.PropertyOwners 
                                  ON TeniacoDb.dbo.Properties.PropertyId = TeniacoDb.dbo.PropertyOwners.PropertyId
                              LEFT JOIN TeniacoDb.dbo.PropertyAddress 
                                  ON TeniacoDb.dbo.Properties.PropertyId = TeniacoDb.dbo.PropertyAddress.PropertyId
                              LEFT JOIN TeniacoDb.dbo.PropertiesDetails 
                                  ON TeniacoDb.dbo.Properties.PropertyId = TeniacoDb.dbo.PropertiesDetails.PropertyId
                              LEFT JOIN PublicDb.dbo.Cities
                                  ON TeniacoDb.dbo.PropertyAddress.CityId = PublicDb.dbo.Cities.CityId
                              LEFT JOIN PublicDb.dbo.Zones
                                  ON TeniacoDb.dbo.PropertyAddress.ZoneId = PublicDb.dbo.Zones.ZoneId
                              LEFT JOIN PublicDb.dbo.Districts
                                  ON TeniacoDb.dbo.PropertyAddress.DistrictId = PublicDb.dbo.Districts.DistrictId
                              LEFT JOIN PublicDb.dbo.States
                                  ON TeniacoDb.dbo.PropertyAddress.StateId = PublicDb.dbo.States.StateId
                              LEFT JOIN TeniacoDb.dbo.DocumentRootTypes
                                  ON TeniacoDb.dbo.Properties.DocumentRootTypeId = TeniacoDb.dbo.DocumentRootTypes.DocumentRootTypeId
                              LEFT JOIN TeniacoDb.dbo.DocumentOwnershipTypes
                                  ON TeniacoDb.dbo.Properties.DocumentOwnershipTypeId = TeniacoDb.dbo.DocumentOwnershipTypes.DocumentOwnershipTypeId
                              LEFT JOIN TeniacoDb.dbo.DocumentTypes
                                  ON TeniacoDb.dbo.Properties.DocumentTypeId = TeniacoDb.dbo.DocumentTypes.DocumentTypeId
                              LEFT JOIN TeniacoDb.dbo.TypeOfUses
                                  ON TeniacoDb.dbo.Properties.TypeOfUseId = TeniacoDb.dbo.TypeOfUses.TypeOfUseId
                              LEFT JOIN TeniacoDb.dbo.PropertyTypes
                                  ON TeniacoDb.dbo.Properties.PropertyTypeId = TeniacoDb.dbo.PropertyTypes.PropertyTypeId
                              LEFT JOIN MelkavanDb.dbo.BuildingLifes
                                  ON TeniacoDb.dbo.PropertiesDetails.BuildingLifeId = MelkavanDb.dbo.BuildingLifes.BuildingLifeId
                              LEFT JOIN RankedPrices
                                  ON TeniacoDb.dbo.Properties.PropertyId = RankedPrices.PropertyId AND RankedPrices.RowNum = 1
                              WHERE TeniacoDb.dbo.PropertyOwners.OwnerId = {OwnerId} 
                                    AND TeniacoDb.dbo.PropertyOwners.OwnerType = 'users' 
                          ) AS tmp 
                          ORDER BY CreateEnDate DESC;



            ";

            sp = sp.Replace("{OwnerId}", userId.ToString());

            var list = teniacoApiDb.MyPropertiesForInvestorsAdvanceSearchVM.FromSqlRaw(sp).AsEnumerable().Distinct();


            try
            {

                listCount = list.Count();

                int skip = (pageNum - 1) * pageSize;
                myPropertiesForInvestorsAdvanceSearchVMList = list.OrderByDescending(s => s.CreateEnDate).Skip(skip).Take(pageSize).ToList();

            }
            catch (Exception exc)
            { }

            return myPropertiesForInvestorsAdvanceSearchVMList;
        }




        #region Sina's Code



        //public List<AdvertisementsListForMelkavanPropertiesVM> GetListOfNearAdvertisementsWithPropertyId(
        //           int jtStartIndex,
        //           int jtPageSize,
        //           ref int listCount,
        //           List<long> childsUsersIds,
        //           PublicApiContext publicApiDb,
        //           TeniacoApiContext teniacoApiDb,
        //           MelkavanApiContext melkavanApiDb,
        //           bool HaveCallers,
        //           bool HaveAddress,
        //           bool HaveFeature,
        //           bool HaveViewers,
        //           bool HaveDetails,
        //           bool HaveTags,
        //           bool HaveFiles,
        //           long propertyId,
        //           string recordType,
        //           int? advertisementTypeId = null,
        //           int? propertyTypeId = null,
        //           int? typeOfUseId = null,
        //           int? documentTypeId = null,
        //           string propertyCodeName = null,
        //           long? stateId = null,
        //           long? cityId = null,
        //           long? zoneId = null,
        //           long? districtId = null,
        //           string jtSorting = null,
        //           long? userId = null,
        //           string advertisementTitle = null)
        //{


        //    List<AdvertisementsListForMelkavanPropertiesVM> AdvertisementVMList = new List<AdvertisementsListForMelkavanPropertiesVM>();
        //    var states = publicApiDb.States.ToList();
        //    var cities = publicApiDb.Cities.ToList();
        //    var zones = publicApiDb.Zones.ToList();
        //    var districts = publicApiDb.Districts.ToList();

        //    double Lon = 0;
        //    double Lat = 0;

        //    // Get property Lon and Lat based on property id
        //    if (recordType == "Properties")
        //    {
        //        var propertyAddress = teniacoApiDb.PropertyAddress.Where(p => p.PropertyId == propertyId).FirstOrDefault();

        //        Lon = (double)propertyAddress.LocationLon;
        //        Lat = (double)propertyAddress.LocationLat;
        //    }

        //    else if (recordType == "Advertisement")
        //    {
        //        var advertisementAddress = melkavanApiDb.AdvertisementAddress.Where(a => a.AdvertisementId == propertyId).FirstOrDefault();

        //        Lon = (double)advertisementAddress.LocationLon;
        //        Lat = (double)advertisementAddress.LocationLat;
        //    }


        //    double radiusInMeters = 1000; // nearby range

        //    double latOffset = radiusInMeters / 111000;
        //    double lonOffset = radiusInMeters / (111000 * Math.Cos(Lat * Math.PI / 180));

        //    // Calculate range
        //    double minLat = Lat - latOffset;
        //    double maxLat = Lat + latOffset;
        //    double minLon = Lon - lonOffset;
        //    double maxLon = Lon + lonOffset;


        //    var melkavanList = (from p in melkavanApiDb.Advertisement
        //                        join pe in melkavanApiDb.AdvertisementOwners on p.AdvertisementId equals pe.AdvertisementId
        //                        join addr in melkavanApiDb.AdvertisementAddress on p.AdvertisementId equals addr.AdvertisementId
        //                        where p.IsDeleted.Value.Equals(false) &&
        //                              p.IsActivated.Value.Equals(true) &&
        //                              addr.LocationLat >= minLat && addr.LocationLat <= maxLat &&
        //                              addr.LocationLon >= minLon && addr.LocationLon <= maxLon
        //                        select new AdvertisementsListForMelkavanPropertiesVM
        //                        {
        //                            RecordType = "Advertisement",
        //                            Area = p.Area,
        //                            BuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
        //                            BuiltInYearFa = p.BuiltInYearFa.HasValue ? p.BuiltInYearFa.Value : (int?)0,
        //                            OwnerId = pe.OwnerId != null ? pe.OwnerId : (long?)null,
        //                            AdvertisementTitle = p.AdvertisementTitle,
        //                            AdvertisementId = p.AdvertisementId,
        //                            AdvertiserId = p.AdvertiserId,
        //                            PropertyTypeId = p.PropertyTypeId,
        //                            RebuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
        //                            RebuiltInYearFa = p.RebuiltInYearFa.HasValue ? p.RebuiltInYearFa.Value : (int?)0,
        //                            TypeOfUseId = p.TypeOfUseId.HasValue ? p.TypeOfUseId.Value : (int?)0,
        //                            DocumentTypeId = p.DocumentTypeId.HasValue ? p.DocumentTypeId.Value : (int?)0,
        //                            DocumentOwnershipTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
        //                            DocumentRootTypeId = p.DocumentRootTypeId.HasValue ? p.DocumentRootTypeId.Value : (int?)0,
        //                            AdvertisementDescriptions = !string.IsNullOrEmpty(p.AdvertisementDescriptions) ? p.AdvertisementDescriptions : "",
        //                            CurrentDate = DateTime.Now,
        //                            UserIdCreator = p.UserIdCreator.Value,
        //                            CreateEnDate = p.CreateEnDate,
        //                            CreateTime = p.CreateTime,
        //                            EditEnDate = p.EditEnDate,
        //                            EditTime = p.EditTime,
        //                            UserIdEditor = p.UserIdEditor.Value,
        //                            RemoveEnDate = p.RemoveEnDate,
        //                            RemoveTime = p.EditTime,
        //                            UserIdRemover = p.UserIdRemover.Value,
        //                            IsActivated = p.IsActivated,
        //                            IsDeleted = p.IsDeleted,
        //                        });

        //    var teniacoList = (from p in teniacoApiDb.Properties
        //                       join po in teniacoApiDb.PropertyOwners on p.PropertyId equals po.PropertyId
        //                       join pa in teniacoApiDb.PropertyAddress on p.PropertyId equals pa.PropertyId
        //                       where p.IsDeleted.Equals(false) &&
        //                             p.IsActivated.Equals(true) &&
        //                             pa.LocationLat >= minLat && pa.LocationLat <= maxLat &&
        //                              pa.LocationLon >= minLon && pa.LocationLon <= maxLon &&
        //                              p.PropertyId != propertyId &&
        //                              p.ShowInMelkavan == true
        //                       select new AdvertisementsListForMelkavanPropertiesVM
        //                       {
        //                           RecordType = "Properties",
        //                           Area = p.Area,
        //                           BuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
        //                           BuiltInYearFa = p.BuiltInYearFa.HasValue ? p.BuiltInYearFa.Value : (int?)0,
        //                           OwnerId = po.OwnerId != null ? po.OwnerId : (long?)null,
        //                           AdvertisementTitle = p.PropertyCodeName,
        //                           AdvertisementId = p.PropertyId,
        //                           AdvertiserId = p.AdvertiserId,
        //                           PropertyTypeId = p.PropertyTypeId,
        //                           RebuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
        //                           RebuiltInYearFa = p.RebuiltInYearFa.HasValue ? p.RebuiltInYearFa.Value : (int?)0,
        //                           TypeOfUseId = p.TypeOfUseId.HasValue ? p.TypeOfUseId.Value : (int?)0,
        //                           DocumentTypeId = p.DocumentTypeId.HasValue ? p.DocumentTypeId.Value : (int?)0,
        //                           DocumentOwnershipTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
        //                           DocumentRootTypeId = p.DocumentRootTypeId.HasValue ? p.DocumentRootTypeId.Value : (int?)0,
        //                           AdvertisementDescriptions = !string.IsNullOrEmpty(p.PropertyDescriptions) ? p.PropertyDescriptions : "",
        //                           CurrentDate = DateTime.Now,
        //                           UserIdCreator = p.UserIdCreator,
        //                           CreateEnDate = p.CreateEnDate,
        //                           CreateTime = p.CreateTime,
        //                           EditEnDate = p.EditEnDate,
        //                           EditTime = p.EditTime,
        //                           UserIdEditor = p.UserIdEditor,
        //                           RemoveEnDate = p.RemoveEnDate,
        //                           RemoveTime = p.EditTime,
        //                           UserIdRemover = p.UserIdRemover,
        //                           IsActivated = p.IsActivated,
        //                           IsDeleted = p.IsDeleted,
        //                       });

        //    var list = melkavanList
        //        .AsEnumerable()
        //        .Union(teniacoList.AsEnumerable())
        //        .AsEnumerable();




        //    //if (advertisementTypeId.HasValue)
        //    //    if (advertisementTypeId.Value > 0)
        //    //        list = list.Where(a => a.AdvertisementDetailsVM.AdvertisementTypeId.Equals(advertisementTypeId.Value));


        //    //if (propertyTypeId.HasValue)
        //    //    if (propertyTypeId.Value > 0)
        //    //        list = list.Where(a => a.PropertyTypeId.Equals(propertyTypeId.Value));


        //    //if (typeOfUseId.HasValue)
        //    //    if (typeOfUseId.Value > 0)
        //    //        list = list.Where(a => a.TypeOfUseId.Equals(typeOfUseId.Value));


        //    //if (documentTypeId.HasValue)
        //    //    if (documentTypeId.Value > 0)
        //    //        list = list.Where(a => a.DocumentTypeId.Equals(documentTypeId.Value));


        //    //if (!string.IsNullOrEmpty(propertyCodeName))
        //    //    list = list.Where(z => z.AdvertisementTitle.Contains(propertyCodeName));


        //    //if (stateId.HasValue)
        //    //    if (stateId.Value > 0)
        //    //        list = list.Where(a => a.AdvertisementAddressVM.StateId.Equals(stateId.Value));


        //    //if (cityId.HasValue)
        //    //    if (cityId.Value > 0)
        //    //        list = list.Where(a => a.AdvertisementAddressVM.CityId.Equals(cityId.Value));


        //    //if (zoneId.HasValue)
        //    //    if (zoneId.Value > 0)
        //    //        list = list.Where(a => a.AdvertisementAddressVM.ZoneId.Equals(zoneId.Value));


        //    //if (districtId.HasValue)
        //    //    if (districtId.Value > 0)
        //    //        list = list.Where(a => a.AdvertisementAddressVM.DistrictId.Equals(districtId.Value));


        //    //if (!string.IsNullOrEmpty(advertisementTitle))
        //    //    list = list.Where(a => a.AdvertisementTitle.Contains(advertisementTitle));

        //    try
        //    {
        //        if (string.IsNullOrEmpty(jtSorting))
        //        {
        //            listCount = list.Count();

        //            if (listCount >= jtPageSize)
        //            {
        //                AdvertisementVMList = list.OrderByDescending(s => s.AdvertisementId)
        //                .Skip(jtStartIndex).Take(jtPageSize).ToList();
        //            }
        //            else
        //            {
        //                AdvertisementVMList = list.OrderByDescending(s => s.AdvertisementId).ToList();
        //            }
        //        }
        //        else
        //        {
        //            listCount = list.Count();

        //            if (listCount > jtPageSize)
        //            {
        //                switch (jtSorting)
        //                {
        //                    case "AdvertisementTitle ASC":
        //                        list = list.OrderBy(l => l.AdvertisementTitle);
        //                        break;
        //                    case "AdvertisementTitle DESC":
        //                        list = list.OrderByDescending(l => l.AdvertisementTitle);
        //                        break;
        //                }

        //                if (string.IsNullOrEmpty(jtSorting))
        //                    AdvertisementVMList = list.OrderByDescending(s => s.AdvertisementId)
        //                             .Skip(jtStartIndex).Take(jtPageSize).ToList();
        //                else
        //                    AdvertisementVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
        //            }
        //            else
        //            {
        //                AdvertisementVMList = list.ToList();
        //            }
        //        }

        //        var advertisementIds = AdvertisementVMList.Where(a => a.RecordType == "Advertisement").Select(a => a.AdvertisementId).ToList();
        //        var advertisementPriceHistories = melkavanApiDb.AdvertisementPricesHistories.Where(a => advertisementIds.Contains(a.AdvertisementId)).ToList();

        //        var propertiesIds = AdvertisementVMList.Where(a => a.RecordType == "Properties").Select(a => a.AdvertisementId).ToList();
        //        var propertiesPriceHistories = teniacoApiDb.PropertiesPricesHistories.Where(p => propertiesIds.Contains(p.PropertyId)).ToList();


        //        List<AdvertisementDetailsVM> advertisementDetailsList = new List<AdvertisementDetailsVM>();
        //        List<PropertiesDetailsVM> PropertiesDetailsList = new List<PropertiesDetailsVM>();

        //        if (HaveDetails)
        //        {

        //            advertisementDetailsList = _mapper.Map<List<AdvertisementDetails>, List<AdvertisementDetailsVM>>(
        //                melkavanApiDb.AdvertisementDetails.Where(a => advertisementIds.Contains(a.AdvertisementId)).ToList());


        //            PropertiesDetailsList = _mapper.Map<List<PropertiesDetails>, List<PropertiesDetailsVM>>(
        //                teniacoApiDb.PropertiesDetails.Where(p => propertiesIds.Contains(p.PropertyId)).ToList());

        //        }

        //        List<AdvertisementFiles> advertisementFilesList = new List<AdvertisementFiles>();
        //        List<PropertyFiles> propertiesFilesList = new List<PropertyFiles>();


        //        if (HaveFiles)
        //        {
        //            advertisementFilesList = melkavanApiDb.AdvertisementFiles.Where(a => advertisementIds.Contains(a.AdvertisementId) && a.AdvertisementFileType == "media").ToList();
        //            propertiesFilesList = teniacoApiDb.PropertyFiles.Where(p => propertiesIds.Contains(p.PropertyId) && p.PropertyFileType == "media").ToList();
        //        }
        //        if (HaveCallers)
        //        {
        //            // TODO
        //        }
        //        if (HaveTags)
        //        {
        //            // TODO
        //        }
        //        if (HaveViewers)
        //        {
        //            // TODO
        //        }

        //        //documentTypeIds
        //        var documentTypeIds = AdvertisementVMList.Select(a => a.DocumentTypeId).Distinct().ToList();
        //        var documentTypes = teniacoApiDb.DocumentTypes.Where(d => documentTypeIds.Contains(d.DocumentTypeId)).ToList();
        //        //typeOfUsesIds
        //        var typeOfUsesIds = AdvertisementVMList.Select(a => a.TypeOfUseId).Distinct().ToList();
        //        var typeOfUses = teniacoApiDb.TypeOfUses.Where(d => typeOfUsesIds.Contains(d.TypeOfUseId)).ToList();
        //        //propertyTypes
        //        var propertyTypesIds = AdvertisementVMList.Select(a => a.PropertyTypeId).Distinct().ToList();
        //        var propertyTypes = teniacoApiDb.PropertyTypes.Where(d => propertyTypesIds.Contains(d.PropertyTypeId)).ToList();
        //        //documentRootTypes
        //        var documentRootTypesIds = AdvertisementVMList.Select(a => a.DocumentRootTypeId).Distinct().ToList();
        //        var documentRootTypes = teniacoApiDb.DocumentRootTypes.Where(d => documentRootTypesIds.Contains(d.DocumentRootTypeId)).ToList();
        //        //documentOwnershipTypes
        //        var documentOwnershipTypesIds = AdvertisementVMList.Select(a => a.DocumentOwnershipTypeId).Distinct().ToList();
        //        var documentOwnershipTypes = teniacoApiDb.DocumentOwnershipTypes.Where(d => documentOwnershipTypesIds.Contains(d.DocumentOwnershipTypeId)).ToList();

        //        string sp = @"select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as AdvertisementDataTypeCountId, AdvertisementId, DataType, Count
        //                   from

        //                   (
        //                   SELECT AdvertisementId, AdvertisementFileType as DataType, COUNT(AdvertisementFileType) as Count
        //                     FROM AdvertisementFiles
        //                     group by AdvertisementId, AdvertisementFileType
        //                     union all
        //                     select AdvertisementId, 'price' DataType, count(AdvertisementPriceHistoryId) as Count
        //                     from AdvertisementPricesHistories
        //                       group by AdvertisementId
        //                     union all
        //                     select AdvertisementId, 'view' DataType, count(AdvertisementViewersId) as Count
        //                     from AdvertisementViewers
        //                        WHERE CreateEnDate >= DATEADD(DAY, -60, GETDATE())
        //                       group by AdvertisementId
        //                   ) as Counts";


        //        string propertySp = @"select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as PropertyDataTypeCountId,'Properties' as RecordType,PropertyId, DataType, Count
        //                    from

        //                    (
        //                    SELECT PropertyId, PropertyFileType as DataType, COUNT(PropertyFileType) as Count
        //                      FROM TeniacoDbHaghighi.dbo.PropertyFiles
        //                      group by PropertyId, PropertyFileType
        //                      union all
        //                      select PropertyId, 'price' DataType, count(TeniacoDbHaghighi.dbo.PropertiesPricesHistories.PropertyPriceHistoryId) as Count
        //                      from TeniacoDbHaghighi.dbo.PropertiesPricesHistories
        //                        group by PropertyId
        //                      union all
        //                      select PropertyId, 'view' DataType, count(PropertiesViewersId) as Count
        //                      from TeniacoDbHaghighi.dbo.PropertiesViewers
        //                        WHERE CreateEnDate >= DATEADD(DAY, -60, GETDATE())
        //                        group by PropertyId
        //                    ) as Counts";

        //        var advertisementDataTypeCounts = melkavanApiDb.AdvertisementDataTypeCounts.FromSqlRaw(sp).Where(p => advertisementIds.Contains(p.AdvertisementId)).ToList();
        //        var propertiesDataTypeCounts = teniacoApiDb.PropertyDataTypeCounts.FromSqlRaw(propertySp).Where(p => propertiesIds.Contains(p.PropertyId)).ToList();

        //        foreach (var item in AdvertisementVMList)
        //        {
        //            if (item.RecordType == "Advertisement")
        //            {
        //                if (advertisementDataTypeCounts.Where(p => p.AdvertisementId.Equals(item.AdvertisementId)).Any())
        //                {
        //                    var advertisementDataTypeCount = advertisementDataTypeCounts.Where(p => p.AdvertisementId.Equals(item.AdvertisementId)).ToList();

        //                    //item.CountOfDocs = advertisementDataTypeCount.Where(p => p.DataType.Equals("docs")).FirstOrDefault()?.Count;
        //                    //item.CountOfMaps = advertisementDataTypeCount.Where(p => p.DataType.Equals("maps")).FirstOrDefault()?.Count;
        //                    //item.CountOfMedia = advertisementDataTypeCount.Where(p => p.DataType.Equals("media")).FirstOrDefault()?.Count;
        //                    //item.CountOfPrices = advertisementDataTypeCount.Where(p => p.DataType.Equals("price")).FirstOrDefault()?.Count;
        //                    item.ViewersTotalCount = advertisementDataTypeCount.Where(p => p.DataType.Equals("view")).FirstOrDefault()?.Count;
        //                }

        //                if (HaveAddress)
        //                {
        //                    try
        //                    {
        //                        var AdvertisementAddress = melkavanApiDb.AdvertisementAddress
        //                       .Where(a => a.AdvertisementId == item.AdvertisementId)
        //                       .Select(pa => new AdvertisementAddressVM
        //                       {
        //                           StateId = pa.StateId,
        //                           TempStateId = pa.TempStateId,
        //                           CityId = pa.CityId,
        //                           TempCityId = pa.TempCityId,
        //                           ZoneId = pa.ZoneId,
        //                           TempZoneId = pa.TempZoneId,
        //                           DistrictId = pa.DistrictId,
        //                           StateName = "",
        //                           TempStateName = "",
        //                           CityName = "",
        //                           TempCityName = "",
        //                           ZoneName = "",
        //                           TempZoneName = "",
        //                           DistrictName = "",
        //                           TownName = pa.TownName,
        //                           Address = !string.IsNullOrEmpty(pa.Address) ? pa.Address : "",
        //                           LocationLat = pa.LocationLat,
        //                           LocationLon = pa.LocationLon,
        //                           AdvertisementId = pa.AdvertisementId,
        //                           UserIdCreator = pa.UserIdCreator,
        //                           CreateEnDate = pa.CreateEnDate,
        //                           CreateTime = pa.CreateTime,
        //                           EditEnDate = pa.EditEnDate,
        //                           EditTime = pa.EditTime,
        //                           UserIdEditor = pa.UserIdEditor,
        //                           RemoveEnDate = pa.RemoveEnDate,
        //                           RemoveTime = pa.RemoveTime,
        //                           UserIdRemover = pa.UserIdRemover,
        //                           IsActivated = pa.IsActivated,
        //                           IsDeleted = pa.IsDeleted,
        //                       })
        //                       .FirstOrDefault();

        //                        if (AdvertisementAddress != null)
        //                        {
        //                            var state = states.Where(s => s.StateId.Equals(AdvertisementAddress.StateId)).FirstOrDefault();
        //                            if (state != null)
        //                            {
        //                                AdvertisementAddress.StateId = state.StateId;
        //                                AdvertisementAddress.StateName = state.StateName;
        //                            }

        //                            var city = cities.Where(c => c.CityId.Equals(AdvertisementAddress.CityId)).FirstOrDefault();
        //                            if (city != null)
        //                            {
        //                                AdvertisementAddress.CityId = city.CityId;
        //                                AdvertisementAddress.CityName = city.CityName;
        //                            }

        //                            if (AdvertisementAddress.ZoneId.HasValue)
        //                            {
        //                                var zone = zones.Where(z => z.ZoneId.Equals(AdvertisementAddress.ZoneId.Value)).FirstOrDefault();
        //                                if (zone != null)
        //                                {
        //                                    AdvertisementAddress.ZoneId = zone.ZoneId;
        //                                    AdvertisementAddress.ZoneName = zone.ZoneName;
        //                                }
        //                            }

        //                            if (AdvertisementAddress.DistrictId.HasValue)
        //                            {
        //                                var district = districts.Where(z => z.DistrictId.Equals(AdvertisementAddress.DistrictId.Value)).FirstOrDefault();
        //                                if (district != null)
        //                                {
        //                                    AdvertisementAddress.DistrictId = district.DistrictId;
        //                                    AdvertisementAddress.DistrictName = district.DistrictName;
        //                                    AdvertisementAddress.TownName = district.TownName;
        //                                }
        //                            }

        //                            #region Calculating distance between this advertisement and my property
        //                            const double EarthRadiusKm = 6371; // Radius of the Earth in km


        //                            double latRad1 = (double)(Lat * Math.PI / 180.0);
        //                            double lonRad1 = (double)(Lon * Math.PI / 180.0);
        //                            double latRad2 = (double)(AdvertisementAddress.LocationLat * Math.PI / 180.0);
        //                            double lonRad2 = (double)AdvertisementAddress.LocationLon * Math.PI / 180.0;

        //                            double dLat = latRad2 - latRad1;
        //                            double dLon = lonRad2 - lonRad1;

        //                            double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
        //                                       Math.Cos(latRad1) * Math.Cos(latRad2) *
        //                                       Math.Sin(dLon / 2) * Math.Sin(dLon / 2);

        //                            double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));

        //                            int distance = Convert.ToInt32(EarthRadiusKm * c * 1000); // Distance in meters
        //                            #endregion

        //                            item.DistanceFromMyProperty = distance;
        //                            item.AdvertisementAddressVM = AdvertisementAddress;
        //                        }
        //                    }
        //                    catch (Exception exc)
        //                    { }
        //                }
        //                if (HaveDetails)
        //                {
        //                    if (advertisementDetailsList.Where(ad => ad.AdvertisementId.Equals(item.AdvertisementId)).Any())
        //                    {
        //                        try
        //                        {
        //                            item.AdvertisementDetailsVM = advertisementDetailsList.Where(ad => ad.AdvertisementId.Equals(item.AdvertisementId)).FirstOrDefault();
        //                        }

        //                        catch (Exception exc)
        //                        {
        //                            item.AdvertisementDetailsVM = new AdvertisementDetailsVM();
        //                        }
        //                    }
        //                    else
        //                    {
        //                        item.AdvertisementDetailsVM = new AdvertisementDetailsVM();
        //                    }
        //                }
        //                if (advertisementPriceHistories.Where(ad => ad.AdvertisementId == item.AdvertisementId).Any())
        //                {
        //                    try
        //                    {
        //                        var advertisementPricesHistoriesVM = advertisementPriceHistories.Where(ad => ad.AdvertisementId == item.AdvertisementId).
        //                            OrderByDescending(a => a.CreateEnDate).ThenByDescending(a => a.CreateTime).FirstOrDefault();

        //                        item.AdvertisementPricesHistoriesVM = new AdvertisementPricesHistoriesVM();
        //                        item.AdvertisementPricesHistoriesVM.AdvertisementId = advertisementPricesHistoriesVM.AdvertisementId;
        //                        item.AdvertisementPricesHistoriesVM.OfferPrice = advertisementPricesHistoriesVM.OfferPrice * 10;
        //                        item.AdvertisementPricesHistoriesVM.RentPrice = advertisementPricesHistoriesVM.RentPrice * 10;
        //                        item.AdvertisementPricesHistoriesVM.DepositPrice = advertisementPricesHistoriesVM.DepositPrice * 10;
        //                        item.AdvertisementPricesHistoriesVM.CalculatedOfferPrice = advertisementPricesHistoriesVM.CalculatedOfferPrice * 10;
        //                        item.AdvertisementPricesHistoriesVM.OfferPriceType = advertisementPricesHistoriesVM.OfferPriceType;
        //                        item.AdvertisementPricesHistoriesVM.CreateEnDate = advertisementPricesHistoriesVM.CreateEnDate;
        //                        item.AdvertisementPricesHistoriesVM.CreateTime = advertisementPricesHistoriesVM.CreateTime;
        //                        item.AdvertisementPricesHistoriesVM.IsActivated = advertisementPricesHistoriesVM.IsActivated;
        //                        item.AdvertisementPricesHistoriesVM.IsDeleted = advertisementPricesHistoriesVM.IsDeleted;

        //                    }
        //                    catch (Exception exc)
        //                    { }
        //                }
        //                if (HaveFiles)
        //                {
        //                    if (advertisementFilesList.Where(ad => ad.AdvertisementId == item.AdvertisementId).Any())
        //                    {
        //                        try
        //                        {
        //                            item.AdvertisementFilesVM = advertisementFilesList.Where(ad => ad.AdvertisementId == item.AdvertisementId)
        //                           .Select(p => new AdvertisementFilesVM
        //                           {
        //                               AdvertisementId = p.AdvertisementId,
        //                               AdvertisementFilePath = p.AdvertisementFilePath,
        //                               AdvertisementFileExt = p.AdvertisementFileExt,
        //                               AdvertisementFileTitle = p.AdvertisementFileTitle,
        //                               AdvertisementFileId = p.AdvertisementFileId,
        //                               AdvertisementFileType = p.AdvertisementFileType,
        //                           }).OrderByDescending(f => f.AdvertisementFileId).ToList();
        //                        }
        //                        catch (Exception exc)
        //                        { }
        //                    }
        //                    else
        //                    {
        //                        item.AdvertisementFilesVM = new List<AdvertisementFilesVM>();
        //                    }
        //                }

        //                if (item.DocumentTypeId.HasValue)
        //                {
        //                    if (documentTypes.Where(ad => ad.DocumentTypeId == item.DocumentTypeId).Any())
        //                    {
        //                        try
        //                        {
        //                            item.DocumentTypeTitle = documentTypes
        //                                                   .Where(a => a.DocumentTypeId == item.DocumentTypeId).Select(a => a.DocumentTypeTitle).FirstOrDefault();
        //                        }
        //                        catch (Exception exc)
        //                        { }
        //                    }
        //                    else
        //                    {
        //                        item.DocumentTypeTitle = String.Empty;
        //                    }

        //                }

        //                if (item.DocumentOwnershipTypeId.HasValue)
        //                {
        //                    if (documentOwnershipTypes.Where(ad => ad.DocumentOwnershipTypeId == item.DocumentOwnershipTypeId).Any())
        //                    {
        //                        try
        //                        {
        //                            item.DocumentOwnershipTypeTitle = documentOwnershipTypes
        //                                  .Where(a => a.DocumentOwnershipTypeId == item.DocumentOwnershipTypeId).Select(a => a.DocumentOwnershipTypeTitle).FirstOrDefault();

        //                        }
        //                        catch (Exception exc)
        //                        { }
        //                    }
        //                    else
        //                    {
        //                        item.DocumentOwnershipTypeTitle = String.Empty;
        //                    }
        //                }

        //                if (item.DocumentRootTypeId.HasValue)
        //                {

        //                    if (documentOwnershipTypes.Where(ad => ad.DocumentOwnershipTypeId == item.DocumentOwnershipTypeId).Any())
        //                    {
        //                        try
        //                        {
        //                            item.DocumentRootTypeTitle = documentRootTypes
        //                           .Where(a => a.DocumentRootTypeId == item.DocumentRootTypeId).Select(a => a.DocumentRootTypeTitle).FirstOrDefault();
        //                        }
        //                        catch (Exception exc)
        //                        { }
        //                    }
        //                    else
        //                    {
        //                        item.DocumentRootTypeTitle = String.Empty;
        //                    }
        //                }


        //                if (propertyTypes.Where(ad => ad.PropertyTypeId == item.PropertyTypeId).Any())
        //                {
        //                    try
        //                    {
        //                        var resultOfPropertyTypeTilte = propertyTypes.FirstOrDefault(x => x.PropertyTypeId == item.PropertyTypeId);
        //                        item.PropertyTypeTilte = resultOfPropertyTypeTilte.PropertyTypeTilte;
        //                    }
        //                    catch (Exception exc)
        //                    { }
        //                }
        //                else
        //                {
        //                    item.PropertyTypeTilte = String.Empty;
        //                }

        //                if (item.TypeOfUseId.HasValue)
        //                {
        //                    if (typeOfUses.Where(ad => ad.TypeOfUseId == item.TypeOfUseId).Any())
        //                    {
        //                        try
        //                        {
        //                            var resultOfTypeUseTitle = typeOfUses.FirstOrDefault(x => x.TypeOfUseId == item.TypeOfUseId);
        //                            item.TypeUseTitle = resultOfTypeUseTitle.TypeOfUseTitle;
        //                        }
        //                        catch (Exception exc)
        //                        { }
        //                    }
        //                    else
        //                    {
        //                        item.TypeUseTitle = String.Empty;
        //                    }
        //                }

        //                if (item.AdvertisementDetailsVM.BuildingLifeId.HasValue)
        //                {
        //                    try
        //                    {
        //                        var resultOfBuildingLifeTitle = melkavanApiDb.BuildingLifes.First(x => x.BuildingLifeId == item.AdvertisementDetailsVM.BuildingLifeId);
        //                        item.AdvertisementDetailsVM.BuildingLifesVM = new BuildingLifesVM
        //                        {
        //                            BuildingLifeTitle = resultOfBuildingLifeTitle.BuildingLifeTitle,
        //                        };
        //                    }
        //                    catch (Exception exc)
        //                    { }
        //                }
        //            }


        //            else if (item.RecordType == "Properties")
        //            {
        //                if (propertiesDataTypeCounts.Where(p => p.PropertyId.Equals(item.AdvertisementId)).Any())
        //                {
        //                    var propertiesDataTypeCount = propertiesDataTypeCounts.Where(p => p.PropertyId.Equals(item.AdvertisementId)).ToList();

        //                    //item.CountOfDocs = propertiesDataTypeCount.Where(p => p.DataType.Equals("docs")).FirstOrDefault()?.Count;
        //                    //item.CountOfMaps = propertiesDataTypeCount.Where(p => p.DataType.Equals("maps")).FirstOrDefault()?.Count;
        //                    //item.CountOfMedia = propertiesDataTypeCount.Where(p => p.DataType.Equals("media")).FirstOrDefault()?.Count;
        //                    //item.CountOfPrices = propertiesDataTypeCount.Where(p => p.DataType.Equals("price")).FirstOrDefault()?.Count;
        //                    item.ViewersTotalCount = propertiesDataTypeCount.Where(p => p.DataType.Equals("view")).FirstOrDefault()?.Count;
        //                }

        //                if (HaveAddress)
        //                {
        //                    try
        //                    {
        //                        var PropertyAddress = teniacoApiDb.PropertyAddress
        //                       .Where(a => a.PropertyId == item.AdvertisementId)
        //                       .Select(pa => new AdvertisementAddressVM
        //                       {
        //                           StateId = pa.StateId,
        //                           CityId = pa.CityId,
        //                           ZoneId = pa.ZoneId,
        //                           DistrictId = pa.DistrictId,
        //                           StateName = "",
        //                           TempStateName = "",
        //                           CityName = "",
        //                           TempCityName = "",
        //                           ZoneName = "",
        //                           TempZoneName = "",
        //                           DistrictName = "",
        //                           TownName = pa.TownName,
        //                           Address = !string.IsNullOrEmpty(pa.Address) ? pa.Address : "",
        //                           LocationLat = pa.LocationLat,
        //                           LocationLon = pa.LocationLon,
        //                           AdvertisementId = pa.PropertyId,
        //                           UserIdCreator = pa.UserIdCreator,
        //                           CreateEnDate = pa.CreateEnDate,
        //                           CreateTime = pa.CreateTime,
        //                           EditEnDate = pa.EditEnDate,
        //                           EditTime = pa.EditTime,
        //                           UserIdEditor = pa.UserIdEditor,
        //                           RemoveEnDate = pa.RemoveEnDate,
        //                           RemoveTime = pa.RemoveTime,
        //                           UserIdRemover = pa.UserIdRemover,
        //                           IsActivated = pa.IsActivated,
        //                           IsDeleted = pa.IsDeleted,
        //                       })
        //                       .FirstOrDefault();

        //                        if (PropertyAddress != null)
        //                        {
        //                            var state = states.Where(s => s.StateId.Equals(PropertyAddress.StateId)).FirstOrDefault();
        //                            if (state != null)
        //                            {
        //                                PropertyAddress.StateName = state.StateName;
        //                            }

        //                            var city = cities.Where(c => c.CityId.Equals(PropertyAddress.CityId)).FirstOrDefault();
        //                            if (city != null)
        //                            {
        //                                PropertyAddress.CityName = city.CityName;
        //                            }

        //                            if (PropertyAddress.ZoneId.HasValue)
        //                            {
        //                                var zone = zones.Where(z => z.ZoneId.Equals(PropertyAddress.ZoneId.Value)).FirstOrDefault();
        //                                if (zone != null)
        //                                {
        //                                    PropertyAddress.ZoneName = zone.ZoneName;
        //                                }
        //                            }

        //                            if (PropertyAddress.DistrictId.HasValue)
        //                            {
        //                                var district = districts.Where(z => z.DistrictId.Equals(PropertyAddress.DistrictId.Value)).FirstOrDefault();
        //                                if (district != null)
        //                                {
        //                                    PropertyAddress.DistrictName = district.DistrictName;
        //                                    PropertyAddress.TownName = district.TownName;
        //                                }
        //                            }

        //                            #region Calculating distance between this advertisement and my property
        //                            const double EarthRadiusKm = 6371; // Radius of the Earth in km


        //                            double latRad1 = (double)(Lat * Math.PI / 180.0);
        //                            double lonRad1 = (double)(Lon * Math.PI / 180.0);
        //                            double latRad2 = (double)(PropertyAddress.LocationLat * Math.PI / 180.0);
        //                            double lonRad2 = (double)PropertyAddress.LocationLon * Math.PI / 180.0;

        //                            double dLat = latRad2 - latRad1;
        //                            double dLon = lonRad2 - lonRad1;

        //                            double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
        //                                       Math.Cos(latRad1) * Math.Cos(latRad2) *
        //                                       Math.Sin(dLon / 2) * Math.Sin(dLon / 2);

        //                            double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));

        //                            int distance = Convert.ToInt32(EarthRadiusKm * c * 1000); // Distance in meters
        //                            #endregion

        //                            item.DistanceFromMyProperty = distance;
        //                            item.AdvertisementAddressVM = PropertyAddress;
        //                        }
        //                    }
        //                    catch (Exception exc)
        //                    { }
        //                }
        //                if (HaveDetails)
        //                {
        //                    if (PropertiesDetailsList.Where(p => p.PropertyId.Equals(item.AdvertisementId)).Any())
        //                    {
        //                        try
        //                        {
        //                            PropertiesDetailsVM propertyDetail = PropertiesDetailsList.Where(p => p.PropertyId.Equals(item.AdvertisementId)).FirstOrDefault();
        //                            item.AdvertisementDetailsVM = new AdvertisementDetailsVM()
        //                            {
        //                                AdvertisementId = propertyDetail.PropertyId,
        //                                AdvertisementTypeId = propertyDetail.AdvertisementTypeId,
        //                                BuildingLifeId = propertyDetail.BuildingLifeId,
        //                                Convertable = propertyDetail.Convertable,
        //                                Exchangeable = propertyDetail.Exchangeable,
        //                                Foundation = propertyDetail.Foundation,
        //                                Participable = propertyDetail.Participable,
        //                                MaritalStatusId = propertyDetail.MaritalStatusId
        //                            };
        //                        }

        //                        catch (Exception exc)
        //                        {
        //                            item.AdvertisementDetailsVM = new AdvertisementDetailsVM();
        //                        }
        //                    }
        //                    else
        //                    {
        //                        item.AdvertisementDetailsVM = new AdvertisementDetailsVM();
        //                    }
        //                }
        //                if (propertiesPriceHistories.Where(p => p.PropertyId == item.AdvertisementId).Any())
        //                {
        //                    try
        //                    {
        //                        var propertyPricesHistoriesVM = propertiesPriceHistories.Where(p => p.PropertyId == item.AdvertisementId).
        //                            OrderByDescending(a => a.CreateEnDate).ThenByDescending(a => a.CreateTime).FirstOrDefault();

        //                        item.AdvertisementPricesHistoriesVM = new AdvertisementPricesHistoriesVM();
        //                        item.AdvertisementPricesHistoriesVM.AdvertisementId = propertyPricesHistoriesVM.PropertyId;
        //                        item.AdvertisementPricesHistoriesVM.OfferPrice = propertyPricesHistoriesVM.OfferPrice;
        //                        item.AdvertisementPricesHistoriesVM.RentPrice = propertyPricesHistoriesVM.RentPrice * 10;
        //                        item.AdvertisementPricesHistoriesVM.DepositPrice = propertyPricesHistoriesVM.DepositPrice * 10;
        //                        item.AdvertisementPricesHistoriesVM.CalculatedOfferPrice = propertyPricesHistoriesVM.CalculatedOfferPrice;
        //                        item.AdvertisementPricesHistoriesVM.OfferPriceType = propertyPricesHistoriesVM.OfferPriceType;
        //                        item.AdvertisementPricesHistoriesVM.CreateEnDate = propertyPricesHistoriesVM.CreateEnDate;
        //                        item.AdvertisementPricesHistoriesVM.CreateTime = propertyPricesHistoriesVM.CreateTime;
        //                        item.AdvertisementPricesHistoriesVM.IsActivated = propertyPricesHistoriesVM.IsActivated;
        //                        item.AdvertisementPricesHistoriesVM.IsDeleted = propertyPricesHistoriesVM.IsDeleted;

        //                    }
        //                    catch (Exception exc)
        //                    { }
        //                }
        //                if (HaveFiles)
        //                {
        //                    if (propertiesFilesList.Where(p => p.PropertyId == item.AdvertisementId).Any())
        //                    {
        //                        try
        //                        {
        //                            item.AdvertisementFilesVM = propertiesFilesList.Where(p => p.PropertyId == item.AdvertisementId)
        //                           .Select(p => new AdvertisementFilesVM
        //                           {
        //                               AdvertisementId = p.PropertyId,
        //                               AdvertisementFilePath = p.PropertyFilePath,
        //                               AdvertisementFileExt = p.PropertyFileExt,
        //                               AdvertisementFileTitle = p.PropertyFileTitle,
        //                               AdvertisementFileId = p.PropertyFileId,
        //                               AdvertisementFileType = p.PropertyFileType,
        //                               AdvertisementFileOrder = p.PropertyFileOrder,
        //                           }).OrderByDescending(f => f.AdvertisementFileId).ToList();
        //                        }
        //                        catch (Exception exc)
        //                        { }
        //                    }
        //                    else
        //                    {
        //                        item.AdvertisementFilesVM = new List<AdvertisementFilesVM>();
        //                    }
        //                }

        //                if (item.DocumentTypeId.HasValue)
        //                {
        //                    if (documentTypes.Where(ad => ad.DocumentTypeId == item.DocumentTypeId).Any())
        //                    {
        //                        try
        //                        {
        //                            item.DocumentTypeTitle = documentTypes
        //                                                   .Where(a => a.DocumentTypeId == item.DocumentTypeId).Select(a => a.DocumentTypeTitle).FirstOrDefault();
        //                        }
        //                        catch (Exception exc)
        //                        { }
        //                    }
        //                    else
        //                    {
        //                        item.DocumentTypeTitle = String.Empty;
        //                    }

        //                }

        //                if (item.DocumentOwnershipTypeId.HasValue)
        //                {
        //                    if (documentOwnershipTypes.Where(ad => ad.DocumentOwnershipTypeId == item.DocumentOwnershipTypeId).Any())
        //                    {
        //                        try
        //                        {
        //                            item.DocumentOwnershipTypeTitle = documentOwnershipTypes
        //                                  .Where(a => a.DocumentOwnershipTypeId == item.DocumentOwnershipTypeId).Select(a => a.DocumentOwnershipTypeTitle).FirstOrDefault();

        //                        }
        //                        catch (Exception exc)
        //                        { }
        //                    }
        //                    else
        //                    {
        //                        item.DocumentOwnershipTypeTitle = String.Empty;
        //                    }
        //                }

        //                if (item.DocumentRootTypeId.HasValue)
        //                {

        //                    if (documentOwnershipTypes.Where(ad => ad.DocumentOwnershipTypeId == item.DocumentOwnershipTypeId).Any())
        //                    {
        //                        try
        //                        {
        //                            item.DocumentRootTypeTitle = documentRootTypes
        //                           .Where(a => a.DocumentRootTypeId == item.DocumentRootTypeId).Select(a => a.DocumentRootTypeTitle).FirstOrDefault();
        //                        }
        //                        catch (Exception exc)
        //                        { }
        //                    }
        //                    else
        //                    {
        //                        item.DocumentRootTypeTitle = String.Empty;
        //                    }
        //                }


        //                if (propertyTypes.Where(ad => ad.PropertyTypeId == item.PropertyTypeId).Any())
        //                {
        //                    try
        //                    {
        //                        var resultOfPropertyTypeTilte = propertyTypes.FirstOrDefault(x => x.PropertyTypeId == item.PropertyTypeId);
        //                        item.PropertyTypeTilte = resultOfPropertyTypeTilte.PropertyTypeTilte;
        //                    }
        //                    catch (Exception exc)
        //                    { }
        //                }
        //                else
        //                {
        //                    item.PropertyTypeTilte = String.Empty;
        //                }

        //                if (item.TypeOfUseId.HasValue)
        //                {
        //                    if (typeOfUses.Where(ad => ad.TypeOfUseId == item.TypeOfUseId).Any())
        //                    {
        //                        try
        //                        {
        //                            var resultOfTypeUseTitle = typeOfUses.FirstOrDefault(x => x.TypeOfUseId == item.TypeOfUseId);
        //                            item.TypeUseTitle = resultOfTypeUseTitle.TypeOfUseTitle;
        //                        }
        //                        catch (Exception exc)
        //                        { }
        //                    }
        //                    else
        //                    {
        //                        item.TypeUseTitle = String.Empty;
        //                    }
        //                }

        //                if (item.AdvertisementDetailsVM.BuildingLifeId.HasValue)
        //                {
        //                    try
        //                    {
        //                        var resultOfBuildingLifeTitle = melkavanApiDb.BuildingLifes.First(x => x.BuildingLifeId == item.AdvertisementDetailsVM.BuildingLifeId);
        //                        item.AdvertisementDetailsVM.BuildingLifesVM = new BuildingLifesVM
        //                        {
        //                            BuildingLifeTitle = resultOfBuildingLifeTitle.BuildingLifeTitle,
        //                        };
        //                    }
        //                    catch (Exception exc)
        //                    { }
        //                }
        //            }



        //        }
        //    }
        //    catch (Exception exc)
        //    { }

        //    return AdvertisementVMList.Take(5).ToList();
        //}

        #endregion



        public List<AdvertisementsListForMelkavanPropertiesVM> GetListOfNearAdvertisementsWithPropertyId(
                   int jtStartIndex,
                   int jtPageSize,
                   ref int listCount,
                   List<long> childsUsersIds,
                   PublicApiContext publicApiDb,
                   TeniacoApiContext teniacoApiDb,
                   MelkavanApiContext melkavanApiDb,
                   bool HaveCallers,
                   bool HaveAddress,
                   bool HaveFeature,
                   bool HaveViewers,
                   bool HaveDetails,
                   bool HaveTags,
                   bool HaveFiles,
                   long propertyId,
                   string recordType,
                   int? advertisementTypeId = null,
                   int? propertyTypeId = null,
                   int? typeOfUseId = null,
                   int? documentTypeId = null,
                   string propertyCodeName = null,
                   long? stateId = null,
                   long? cityId = null,
                   long? zoneId = null,
                   long? districtId = null,
                   string jtSorting = null,
                   long? userId = null,
                   string advertisementTitle = null)
        {


            List<AdvertisementsListForMelkavanPropertiesVM> AdvertisementVMList = new List<AdvertisementsListForMelkavanPropertiesVM>();
            var states = publicApiDb.States.ToList();
            var cities = publicApiDb.Cities.ToList();
            var zones = publicApiDb.Zones.ToList();
            var districts = publicApiDb.Districts.ToList();

            double Lon = 0;
            double Lat = 0;

            // Get property Lon and Lat based on property id
            if (recordType == "Properties")
            {
                var propertyAddress = teniacoApiDb.PropertyAddress.Where(p => p.PropertyId == propertyId).FirstOrDefault();

                Lon = (double)propertyAddress.LocationLon;
                Lat = (double)propertyAddress.LocationLat;
            }

            else if (recordType == "Advertisement")
            {
                var advertisementAddress = melkavanApiDb.AdvertisementAddress.Where(a => a.AdvertisementId == propertyId).FirstOrDefault();

                Lon = (double)advertisementAddress.LocationLon;
                Lat = (double)advertisementAddress.LocationLat;
            }


            double radiusInMeters = 1000; // nearby range

            double latOffset = radiusInMeters / 111000;
            double lonOffset = radiusInMeters / (111000 * Math.Cos(Lat * Math.PI / 180));

            // Calculate range
            double minLat = Lat - latOffset;
            double maxLat = Lat + latOffset;
            double minLon = Lon - lonOffset;
            double maxLon = Lon + lonOffset;


            var melkavanList = (from p in melkavanApiDb.Advertisement
                                join pe in melkavanApiDb.AdvertisementOwners on p.AdvertisementId equals pe.AdvertisementId
                                join addr in melkavanApiDb.AdvertisementAddress on p.AdvertisementId equals addr.AdvertisementId
                                where p.IsDeleted.Value.Equals(false) &&
                                      p.IsActivated.Value.Equals(true) &&
                                      addr.LocationLat >= minLat && addr.LocationLat <= maxLat &&
                                      addr.LocationLon >= minLon && addr.LocationLon <= maxLon
                                select new AdvertisementsListForMelkavanPropertiesVM
                                {
                                    RecordType = "Advertisement",
                                    Area = p.Area,
                                    BuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                                    BuiltInYearFa = p.BuiltInYearFa.HasValue ? p.BuiltInYearFa.Value : (int?)0,
                                    OwnerId = pe.OwnerId != null ? pe.OwnerId : (long?)null,
                                    AdvertisementTitle = p.AdvertisementTitle,
                                    AdvertisementId = p.AdvertisementId,
                                    AdvertiserId = p.AdvertiserId,
                                    PropertyTypeId = p.PropertyTypeId,
                                    RebuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                                    RebuiltInYearFa = p.RebuiltInYearFa.HasValue ? p.RebuiltInYearFa.Value : (int?)0,
                                    TypeOfUseId = p.TypeOfUseId.HasValue ? p.TypeOfUseId.Value : (int?)0,
                                    DocumentTypeId = p.DocumentTypeId.HasValue ? p.DocumentTypeId.Value : (int?)0,
                                    DocumentOwnershipTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
                                    DocumentRootTypeId = p.DocumentRootTypeId.HasValue ? p.DocumentRootTypeId.Value : (int?)0,
                                    AdvertisementDescriptions = !string.IsNullOrEmpty(p.AdvertisementDescriptions) ? p.AdvertisementDescriptions : "",
                                    CurrentDate = DateTime.Now,
                                    UserIdCreator = p.UserIdCreator.Value,
                                    CreateEnDate = p.CreateEnDate,
                                    CreateTime = p.CreateTime,
                                    EditEnDate = p.EditEnDate,
                                    EditTime = p.EditTime,
                                    UserIdEditor = p.UserIdEditor.Value,
                                    RemoveEnDate = p.RemoveEnDate,
                                    RemoveTime = p.EditTime,
                                    UserIdRemover = p.UserIdRemover.Value,
                                    IsActivated = p.IsActivated,
                                    IsDeleted = p.IsDeleted,
                                });

            var teniacoList = (from p in teniacoApiDb.Properties
                               join po in teniacoApiDb.PropertyOwners on p.PropertyId equals po.PropertyId
                               join pa in teniacoApiDb.PropertyAddress on p.PropertyId equals pa.PropertyId
                               where p.IsDeleted.Equals(false) &&
                                     p.IsActivated.Equals(true) &&
                                     pa.LocationLat >= minLat && pa.LocationLat <= maxLat &&
                                      pa.LocationLon >= minLon && pa.LocationLon <= maxLon &&
                                      p.PropertyId != propertyId &&
                                      p.ShowInMelkavan == true
                               select new AdvertisementsListForMelkavanPropertiesVM
                               {
                                   RecordType = "Properties",
                                   Area = p.Area,
                                   BuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                                   BuiltInYearFa = p.BuiltInYearFa.HasValue ? p.BuiltInYearFa.Value : (int?)0,
                                   OwnerId = po.OwnerId != null ? po.OwnerId : (long?)null,
                                   AdvertisementTitle = p.PropertyCodeName,
                                   AdvertisementId = p.PropertyId,
                                   AdvertiserId = p.AdvertiserId,
                                   PropertyTypeId = p.PropertyTypeId,
                                   RebuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                                   RebuiltInYearFa = p.RebuiltInYearFa.HasValue ? p.RebuiltInYearFa.Value : (int?)0,
                                   TypeOfUseId = p.TypeOfUseId.HasValue ? p.TypeOfUseId.Value : (int?)0,
                                   DocumentTypeId = p.DocumentTypeId.HasValue ? p.DocumentTypeId.Value : (int?)0,
                                   DocumentOwnershipTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
                                   DocumentRootTypeId = p.DocumentRootTypeId.HasValue ? p.DocumentRootTypeId.Value : (int?)0,
                                   AdvertisementDescriptions = !string.IsNullOrEmpty(p.PropertyDescriptions) ? p.PropertyDescriptions : "",
                                   CurrentDate = DateTime.Now,
                                   UserIdCreator = p.UserIdCreator,
                                   CreateEnDate = p.CreateEnDate,
                                   CreateTime = p.CreateTime,
                                   EditEnDate = p.EditEnDate,
                                   EditTime = p.EditTime,
                                   UserIdEditor = p.UserIdEditor,
                                   RemoveEnDate = p.RemoveEnDate,
                                   RemoveTime = p.EditTime,
                                   UserIdRemover = p.UserIdRemover,
                                   IsActivated = p.IsActivated,
                                   IsDeleted = p.IsDeleted,
                               });

            var list = melkavanList
                .AsEnumerable()
                .Union(teniacoList.AsEnumerable())
                .AsEnumerable();




            //if (advertisementTypeId.HasValue)
            //    if (advertisementTypeId.Value > 0)
            //        list = list.Where(a => a.AdvertisementDetailsVM.AdvertisementTypeId.Equals(advertisementTypeId.Value));


            //if (propertyTypeId.HasValue)
            //    if (propertyTypeId.Value > 0)
            //        list = list.Where(a => a.PropertyTypeId.Equals(propertyTypeId.Value));


            //if (typeOfUseId.HasValue)
            //    if (typeOfUseId.Value > 0)
            //        list = list.Where(a => a.TypeOfUseId.Equals(typeOfUseId.Value));


            //if (documentTypeId.HasValue)
            //    if (documentTypeId.Value > 0)
            //        list = list.Where(a => a.DocumentTypeId.Equals(documentTypeId.Value));


            //if (!string.IsNullOrEmpty(propertyCodeName))
            //    list = list.Where(z => z.AdvertisementTitle.Contains(propertyCodeName));


            //if (stateId.HasValue)
            //    if (stateId.Value > 0)
            //        list = list.Where(a => a.AdvertisementAddressVM.StateId.Equals(stateId.Value));


            //if (cityId.HasValue)
            //    if (cityId.Value > 0)
            //        list = list.Where(a => a.AdvertisementAddressVM.CityId.Equals(cityId.Value));


            //if (zoneId.HasValue)
            //    if (zoneId.Value > 0)
            //        list = list.Where(a => a.AdvertisementAddressVM.ZoneId.Equals(zoneId.Value));


            //if (districtId.HasValue)
            //    if (districtId.Value > 0)
            //        list = list.Where(a => a.AdvertisementAddressVM.DistrictId.Equals(districtId.Value));


            //if (!string.IsNullOrEmpty(advertisementTitle))
            //    list = list.Where(a => a.AdvertisementTitle.Contains(advertisementTitle));

            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount >= jtPageSize)
                    {
                        AdvertisementVMList = list.OrderByDescending(s => s.AdvertisementId)
                        .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {
                        AdvertisementVMList = list.OrderByDescending(s => s.AdvertisementId).ToList();
                    }
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {
                        switch (jtSorting)
                        {
                            case "AdvertisementTitle ASC":
                                list = list.OrderBy(l => l.AdvertisementTitle);
                                break;
                            case "AdvertisementTitle DESC":
                                list = list.OrderByDescending(l => l.AdvertisementTitle);
                                break;
                        }

                        if (string.IsNullOrEmpty(jtSorting))
                            AdvertisementVMList = list.OrderByDescending(s => s.AdvertisementId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            AdvertisementVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {
                        AdvertisementVMList = list.ToList();
                    }
                }

                var advertisementIds = AdvertisementVMList.Where(a => a.RecordType == "Advertisement").Select(a => a.AdvertisementId).ToList();
                var advertisementPriceHistories = melkavanApiDb.AdvertisementPricesHistories.Where(a => advertisementIds.Contains(a.AdvertisementId)).ToList();

                var propertiesIds = AdvertisementVMList.Where(a => a.RecordType == "Properties").Select(a => a.AdvertisementId).ToList();
                var propertiesPriceHistories = teniacoApiDb.PropertiesPricesHistories.Where(p => propertiesIds.Contains(p.PropertyId)).ToList();


                List<AdvertisementDetailsVM> advertisementDetailsList = new List<AdvertisementDetailsVM>();
                List<PropertiesDetailsVM> PropertiesDetailsList = new List<PropertiesDetailsVM>();

                if (HaveDetails)
                {

                    advertisementDetailsList = _mapper.Map<List<AdvertisementDetails>, List<AdvertisementDetailsVM>>(
                        melkavanApiDb.AdvertisementDetails.Where(a => advertisementIds.Contains(a.AdvertisementId)).ToList());


                    PropertiesDetailsList = _mapper.Map<List<PropertiesDetails>, List<PropertiesDetailsVM>>(
                        teniacoApiDb.PropertiesDetails.Where(p => propertiesIds.Contains(p.PropertyId)).ToList());

                }

                List<AdvertisementFiles> advertisementFilesList = new List<AdvertisementFiles>();
                List<PropertyFiles> propertiesFilesList = new List<PropertyFiles>();


                if (HaveFiles)
                {
                    advertisementFilesList = melkavanApiDb.AdvertisementFiles.Where(a => advertisementIds.Contains(a.AdvertisementId) && a.AdvertisementFileType == "media").ToList();
                    propertiesFilesList = teniacoApiDb.PropertyFiles.Where(p => propertiesIds.Contains(p.PropertyId) && p.PropertyFileType == "media").ToList();
                }
                if (HaveCallers)
                {
                    // TODO
                }
                if (HaveTags)
                {
                    // TODO
                }
                if (HaveViewers)
                {
                    // TODO
                }

                //documentTypeIds
                var documentTypeIds = AdvertisementVMList.Select(a => a.DocumentTypeId).Distinct().ToList();
                var documentTypes = teniacoApiDb.DocumentTypes.Where(d => documentTypeIds.Contains(d.DocumentTypeId)).ToList();
                //typeOfUsesIds
                var typeOfUsesIds = AdvertisementVMList.Select(a => a.TypeOfUseId).Distinct().ToList();
                var typeOfUses = teniacoApiDb.TypeOfUses.Where(d => typeOfUsesIds.Contains(d.TypeOfUseId)).ToList();
                //propertyTypes
                var propertyTypesIds = AdvertisementVMList.Select(a => a.PropertyTypeId).Distinct().ToList();
                var propertyTypes = teniacoApiDb.PropertyTypes.Where(d => propertyTypesIds.Contains(d.PropertyTypeId)).ToList();
                //documentRootTypes
                var documentRootTypesIds = AdvertisementVMList.Select(a => a.DocumentRootTypeId).Distinct().ToList();
                var documentRootTypes = teniacoApiDb.DocumentRootTypes.Where(d => documentRootTypesIds.Contains(d.DocumentRootTypeId)).ToList();
                //documentOwnershipTypes
                var documentOwnershipTypesIds = AdvertisementVMList.Select(a => a.DocumentOwnershipTypeId).Distinct().ToList();
                var documentOwnershipTypes = teniacoApiDb.DocumentOwnershipTypes.Where(d => documentOwnershipTypesIds.Contains(d.DocumentOwnershipTypeId)).ToList();

                string sp = @"select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as AdvertisementDataTypeCountId, AdvertisementId, DataType, Count
                           from

                           (
                           SELECT AdvertisementId, AdvertisementFileType as DataType, COUNT(AdvertisementFileType) as Count
                             FROM AdvertisementFiles
                             group by AdvertisementId, AdvertisementFileType
                             union all
                             select AdvertisementId, 'price' DataType, count(AdvertisementPriceHistoryId) as Count
                             from AdvertisementPricesHistories
                               group by AdvertisementId
                             union all
                             select AdvertisementId, 'view' DataType, count(AdvertisementViewersId) as Count
                             from AdvertisementViewers
                                WHERE CreateEnDate >= DATEADD(DAY, -60, GETDATE())
                               group by AdvertisementId
                           ) as Counts";


                string propertySp = @"select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as PropertyDataTypeCountId,'Properties' as RecordType,PropertyId, DataType, Count
                            from

                            (
                            SELECT PropertyId, PropertyFileType as DataType, COUNT(PropertyFileType) as Count
                              FROM TeniacoDb.dbo.PropertyFiles
                              group by PropertyId, PropertyFileType
                              union all
                              select PropertyId, 'price' DataType, count(TeniacoDb.dbo.PropertiesPricesHistories.PropertyPriceHistoryId) as Count
                              from TeniacoDb.dbo.PropertiesPricesHistories
                                group by PropertyId
                              union all
                              select PropertyId, 'view' DataType, count(PropertiesViewersId) as Count
                              from TeniacoDb.dbo.PropertiesViewers
                                WHERE CreateEnDate >= DATEADD(DAY, -60, GETDATE())
                                group by PropertyId
                            ) as Counts";

                var advertisementDataTypeCounts = melkavanApiDb.AdvertisementDataTypeCounts.FromSqlRaw(sp).Where(p => advertisementIds.Contains(p.AdvertisementId)).ToList();
                var propertiesDataTypeCounts = teniacoApiDb.PropertyDataTypeCounts.FromSqlRaw(propertySp).Where(p => propertiesIds.Contains(p.PropertyId)).ToList();

                foreach (var item in AdvertisementVMList)
                {
                    if (item.RecordType == "Advertisement")
                    {
                        if (advertisementDataTypeCounts.Where(p => p.AdvertisementId.Equals(item.AdvertisementId)).Any())
                        {
                            var advertisementDataTypeCount = advertisementDataTypeCounts.Where(p => p.AdvertisementId.Equals(item.AdvertisementId)).ToList();

                            //item.CountOfDocs = advertisementDataTypeCount.Where(p => p.DataType.Equals("docs")).FirstOrDefault()?.Count;
                            //item.CountOfMaps = advertisementDataTypeCount.Where(p => p.DataType.Equals("maps")).FirstOrDefault()?.Count;
                            //item.CountOfMedia = advertisementDataTypeCount.Where(p => p.DataType.Equals("media")).FirstOrDefault()?.Count;
                            //item.CountOfPrices = advertisementDataTypeCount.Where(p => p.DataType.Equals("price")).FirstOrDefault()?.Count;
                            item.ViewersTotalCount = advertisementDataTypeCount.Where(p => p.DataType.Equals("view")).FirstOrDefault()?.Count;
                        }

                        if (HaveAddress)
                        {
                            try
                            {
                                var AdvertisementAddress = melkavanApiDb.AdvertisementAddress
                               .Where(a => a.AdvertisementId == item.AdvertisementId)
                               .Select(pa => new AdvertisementAddressVM
                               {
                                   StateId = pa.StateId,
                                   TempStateId = pa.TempStateId,
                                   CityId = pa.CityId,
                                   TempCityId = pa.TempCityId,
                                   ZoneId = pa.ZoneId,
                                   TempZoneId = pa.TempZoneId,
                                   DistrictId = pa.DistrictId,
                                   StateName = "",
                                   TempStateName = "",
                                   CityName = "",
                                   TempCityName = "",
                                   ZoneName = "",
                                   TempZoneName = "",
                                   DistrictName = "",
                                   TownName = pa.TownName,
                                   Address = !string.IsNullOrEmpty(pa.Address) ? pa.Address : "",
                                   LocationLat = pa.LocationLat,
                                   LocationLon = pa.LocationLon,
                                   AdvertisementId = pa.AdvertisementId,
                                   UserIdCreator = pa.UserIdCreator,
                                   CreateEnDate = pa.CreateEnDate,
                                   CreateTime = pa.CreateTime,
                                   EditEnDate = pa.EditEnDate,
                                   EditTime = pa.EditTime,
                                   UserIdEditor = pa.UserIdEditor,
                                   RemoveEnDate = pa.RemoveEnDate,
                                   RemoveTime = pa.RemoveTime,
                                   UserIdRemover = pa.UserIdRemover,
                                   IsActivated = pa.IsActivated,
                                   IsDeleted = pa.IsDeleted,
                               })
                               .FirstOrDefault();

                                if (AdvertisementAddress != null)
                                {
                                    var state = states.Where(s => s.StateId.Equals(AdvertisementAddress.StateId)).FirstOrDefault();
                                    if (state != null)
                                    {
                                        AdvertisementAddress.StateId = state.StateId;
                                        AdvertisementAddress.StateName = state.StateName;
                                    }

                                    var city = cities.Where(c => c.CityId.Equals(AdvertisementAddress.CityId)).FirstOrDefault();
                                    if (city != null)
                                    {
                                        AdvertisementAddress.CityId = city.CityId;
                                        AdvertisementAddress.CityName = city.CityName;
                                    }

                                    if (AdvertisementAddress.ZoneId.HasValue)
                                    {
                                        var zone = zones.Where(z => z.ZoneId.Equals(AdvertisementAddress.ZoneId.Value)).FirstOrDefault();
                                        if (zone != null)
                                        {
                                            AdvertisementAddress.ZoneId = zone.ZoneId;
                                            AdvertisementAddress.ZoneName = zone.ZoneName;
                                        }
                                    }

                                    if (AdvertisementAddress.DistrictId.HasValue)
                                    {
                                        var district = districts.Where(z => z.DistrictId.Equals(AdvertisementAddress.DistrictId.Value)).FirstOrDefault();
                                        if (district != null)
                                        {
                                            AdvertisementAddress.DistrictId = district.DistrictId;
                                            AdvertisementAddress.DistrictName = district.DistrictName;
                                            AdvertisementAddress.TownName = district.TownName;
                                        }
                                    }

                                    #region Calculating distance between this advertisement and my property
                                    const double EarthRadiusKm = 6371; // Radius of the Earth in km


                                    double latRad1 = (double)(Lat * Math.PI / 180.0);
                                    double lonRad1 = (double)(Lon * Math.PI / 180.0);
                                    double latRad2 = (double)(AdvertisementAddress.LocationLat * Math.PI / 180.0);
                                    double lonRad2 = (double)AdvertisementAddress.LocationLon * Math.PI / 180.0;

                                    double dLat = latRad2 - latRad1;
                                    double dLon = lonRad2 - lonRad1;

                                    double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                                               Math.Cos(latRad1) * Math.Cos(latRad2) *
                                               Math.Sin(dLon / 2) * Math.Sin(dLon / 2);

                                    double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));

                                    int distance = Convert.ToInt32(EarthRadiusKm * c * 1000); // Distance in meters
                                    #endregion

                                    item.DistanceFromMyProperty = distance;
                                    item.AdvertisementAddressVM = AdvertisementAddress;
                                }
                            }
                            catch (Exception exc)
                            { }
                        }
                        if (HaveDetails)
                        {
                            if (advertisementDetailsList.Where(ad => ad.AdvertisementId.Equals(item.AdvertisementId)).Any())
                            {
                                try
                                {
                                    item.AdvertisementDetailsVM = advertisementDetailsList.Where(ad => ad.AdvertisementId.Equals(item.AdvertisementId)).FirstOrDefault();
                                }

                                catch (Exception exc)
                                {
                                    item.AdvertisementDetailsVM = new AdvertisementDetailsVM();
                                }
                            }
                            else
                            {
                                item.AdvertisementDetailsVM = new AdvertisementDetailsVM();
                            }
                        }
                        if (advertisementPriceHistories.Where(ad => ad.AdvertisementId == item.AdvertisementId).Any())
                        {
                            try
                            {
                                var advertisementPricesHistoriesVM = advertisementPriceHistories.Where(ad => ad.AdvertisementId == item.AdvertisementId).
                                    OrderByDescending(a => a.CreateEnDate).ThenByDescending(a => a.CreateTime).FirstOrDefault();

                                item.AdvertisementPricesHistoriesVM = new AdvertisementPricesHistoriesVM();
                                item.AdvertisementPricesHistoriesVM.AdvertisementId = advertisementPricesHistoriesVM.AdvertisementId;
                                item.AdvertisementPricesHistoriesVM.OfferPrice = advertisementPricesHistoriesVM.OfferPrice * 10;
                                item.AdvertisementPricesHistoriesVM.RentPrice = advertisementPricesHistoriesVM.RentPrice * 10;
                                item.AdvertisementPricesHistoriesVM.DepositPrice = advertisementPricesHistoriesVM.DepositPrice * 10;
                                item.AdvertisementPricesHistoriesVM.CalculatedOfferPrice = advertisementPricesHistoriesVM.CalculatedOfferPrice * 10;
                                item.AdvertisementPricesHistoriesVM.OfferPriceType = advertisementPricesHistoriesVM.OfferPriceType;
                                item.AdvertisementPricesHistoriesVM.CreateEnDate = advertisementPricesHistoriesVM.CreateEnDate;
                                item.AdvertisementPricesHistoriesVM.CreateTime = advertisementPricesHistoriesVM.CreateTime;
                                item.AdvertisementPricesHistoriesVM.IsActivated = advertisementPricesHistoriesVM.IsActivated;
                                item.AdvertisementPricesHistoriesVM.IsDeleted = advertisementPricesHistoriesVM.IsDeleted;

                            }
                            catch (Exception exc)
                            { }
                        }
                        if (HaveFiles)
                        {
                            if (advertisementFilesList.Where(ad => ad.AdvertisementId == item.AdvertisementId).Any())
                            {
                                try
                                {
                                    item.AdvertisementFilesVM = advertisementFilesList.Where(ad => ad.AdvertisementId == item.AdvertisementId)
                                   .Select(p => new AdvertisementFilesVM
                                   {
                                       AdvertisementId = p.AdvertisementId,
                                       AdvertisementFilePath = p.AdvertisementFilePath,
                                       AdvertisementFileExt = p.AdvertisementFileExt,
                                       AdvertisementFileTitle = p.AdvertisementFileTitle,
                                       AdvertisementFileId = p.AdvertisementFileId,
                                       AdvertisementFileType = p.AdvertisementFileType,
                                   }).OrderByDescending(f => f.AdvertisementFileId).ToList();
                                }
                                catch (Exception exc)
                                { }
                            }
                            else
                            {
                                item.AdvertisementFilesVM = new List<AdvertisementFilesVM>();
                            }
                        }

                        if (item.DocumentTypeId.HasValue)
                        {
                            if (documentTypes.Where(ad => ad.DocumentTypeId == item.DocumentTypeId).Any())
                            {
                                try
                                {
                                    item.DocumentTypeTitle = documentTypes
                                                           .Where(a => a.DocumentTypeId == item.DocumentTypeId).Select(a => a.DocumentTypeTitle).FirstOrDefault();
                                }
                                catch (Exception exc)
                                { }
                            }
                            else
                            {
                                item.DocumentTypeTitle = String.Empty;
                            }

                        }

                        if (item.DocumentOwnershipTypeId.HasValue)
                        {
                            if (documentOwnershipTypes.Where(ad => ad.DocumentOwnershipTypeId == item.DocumentOwnershipTypeId).Any())
                            {
                                try
                                {
                                    item.DocumentOwnershipTypeTitle = documentOwnershipTypes
                                          .Where(a => a.DocumentOwnershipTypeId == item.DocumentOwnershipTypeId).Select(a => a.DocumentOwnershipTypeTitle).FirstOrDefault();

                                }
                                catch (Exception exc)
                                { }
                            }
                            else
                            {
                                item.DocumentOwnershipTypeTitle = String.Empty;
                            }
                        }

                        if (item.DocumentRootTypeId.HasValue)
                        {

                            if (documentOwnershipTypes.Where(ad => ad.DocumentOwnershipTypeId == item.DocumentOwnershipTypeId).Any())
                            {
                                try
                                {
                                    item.DocumentRootTypeTitle = documentRootTypes
                                   .Where(a => a.DocumentRootTypeId == item.DocumentRootTypeId).Select(a => a.DocumentRootTypeTitle).FirstOrDefault();
                                }
                                catch (Exception exc)
                                { }
                            }
                            else
                            {
                                item.DocumentRootTypeTitle = String.Empty;
                            }
                        }


                        if (propertyTypes.Where(ad => ad.PropertyTypeId == item.PropertyTypeId).Any())
                        {
                            try
                            {
                                var resultOfPropertyTypeTilte = propertyTypes.FirstOrDefault(x => x.PropertyTypeId == item.PropertyTypeId);
                                item.PropertyTypeTilte = resultOfPropertyTypeTilte.PropertyTypeTilte;
                            }
                            catch (Exception exc)
                            { }
                        }
                        else
                        {
                            item.PropertyTypeTilte = String.Empty;
                        }

                        if (item.TypeOfUseId.HasValue)
                        {
                            if (typeOfUses.Where(ad => ad.TypeOfUseId == item.TypeOfUseId).Any())
                            {
                                try
                                {
                                    var resultOfTypeUseTitle = typeOfUses.FirstOrDefault(x => x.TypeOfUseId == item.TypeOfUseId);
                                    item.TypeUseTitle = resultOfTypeUseTitle.TypeOfUseTitle;
                                }
                                catch (Exception exc)
                                { }
                            }
                            else
                            {
                                item.TypeUseTitle = String.Empty;
                            }
                        }

                        if (item.AdvertisementDetailsVM.BuildingLifeId.HasValue)
                        {
                            try
                            {
                                var resultOfBuildingLifeTitle = melkavanApiDb.BuildingLifes.First(x => x.BuildingLifeId == item.AdvertisementDetailsVM.BuildingLifeId);
                                item.AdvertisementDetailsVM.BuildingLifesVM = new BuildingLifesVM
                                {
                                    BuildingLifeTitle = resultOfBuildingLifeTitle.BuildingLifeTitle,
                                };
                            }
                            catch (Exception exc)
                            { }
                        }
                    }


                    else if (item.RecordType == "Properties")
                    {
                        if (propertiesDataTypeCounts.Where(p => p.PropertyId.Equals(item.AdvertisementId)).Any())
                        {
                            var propertiesDataTypeCount = propertiesDataTypeCounts.Where(p => p.PropertyId.Equals(item.AdvertisementId)).ToList();

                            //item.CountOfDocs = propertiesDataTypeCount.Where(p => p.DataType.Equals("docs")).FirstOrDefault()?.Count;
                            //item.CountOfMaps = propertiesDataTypeCount.Where(p => p.DataType.Equals("maps")).FirstOrDefault()?.Count;
                            //item.CountOfMedia = propertiesDataTypeCount.Where(p => p.DataType.Equals("media")).FirstOrDefault()?.Count;
                            //item.CountOfPrices = propertiesDataTypeCount.Where(p => p.DataType.Equals("price")).FirstOrDefault()?.Count;
                            item.ViewersTotalCount = propertiesDataTypeCount.Where(p => p.DataType.Equals("view")).FirstOrDefault()?.Count;
                        }

                        if (HaveAddress)
                        {
                            try
                            {
                                var PropertyAddress = teniacoApiDb.PropertyAddress
                               .Where(a => a.PropertyId == item.AdvertisementId)
                               .Select(pa => new AdvertisementAddressVM
                               {
                                   StateId = pa.StateId,
                                   CityId = pa.CityId,
                                   ZoneId = pa.ZoneId,
                                   DistrictId = pa.DistrictId,
                                   StateName = "",
                                   TempStateName = "",
                                   CityName = "",
                                   TempCityName = "",
                                   ZoneName = "",
                                   TempZoneName = "",
                                   DistrictName = "",
                                   TownName = pa.TownName,
                                   Address = !string.IsNullOrEmpty(pa.Address) ? pa.Address : "",
                                   LocationLat = pa.LocationLat,
                                   LocationLon = pa.LocationLon,
                                   AdvertisementId = pa.PropertyId,
                                   UserIdCreator = pa.UserIdCreator,
                                   CreateEnDate = pa.CreateEnDate,
                                   CreateTime = pa.CreateTime,
                                   EditEnDate = pa.EditEnDate,
                                   EditTime = pa.EditTime,
                                   UserIdEditor = pa.UserIdEditor,
                                   RemoveEnDate = pa.RemoveEnDate,
                                   RemoveTime = pa.RemoveTime,
                                   UserIdRemover = pa.UserIdRemover,
                                   IsActivated = pa.IsActivated,
                                   IsDeleted = pa.IsDeleted,
                               })
                               .FirstOrDefault();

                                if (PropertyAddress != null)
                                {
                                    var state = states.Where(s => s.StateId.Equals(PropertyAddress.StateId)).FirstOrDefault();
                                    if (state != null)
                                    {
                                        PropertyAddress.StateName = state.StateName;
                                    }

                                    var city = cities.Where(c => c.CityId.Equals(PropertyAddress.CityId)).FirstOrDefault();
                                    if (city != null)
                                    {
                                        PropertyAddress.CityName = city.CityName;
                                    }

                                    if (PropertyAddress.ZoneId.HasValue)
                                    {
                                        var zone = zones.Where(z => z.ZoneId.Equals(PropertyAddress.ZoneId.Value)).FirstOrDefault();
                                        if (zone != null)
                                        {
                                            PropertyAddress.ZoneName = zone.ZoneName;
                                        }
                                    }

                                    if (PropertyAddress.DistrictId.HasValue)
                                    {
                                        var district = districts.Where(z => z.DistrictId.Equals(PropertyAddress.DistrictId.Value)).FirstOrDefault();
                                        if (district != null)
                                        {
                                            PropertyAddress.DistrictName = district.DistrictName;
                                            PropertyAddress.TownName = district.TownName;
                                        }
                                    }

                                    #region Calculating distance between this advertisement and my property
                                    const double EarthRadiusKm = 6371; // Radius of the Earth in km


                                    double latRad1 = (double)(Lat * Math.PI / 180.0);
                                    double lonRad1 = (double)(Lon * Math.PI / 180.0);
                                    double latRad2 = (double)(PropertyAddress.LocationLat * Math.PI / 180.0);
                                    double lonRad2 = (double)PropertyAddress.LocationLon * Math.PI / 180.0;

                                    double dLat = latRad2 - latRad1;
                                    double dLon = lonRad2 - lonRad1;

                                    double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                                               Math.Cos(latRad1) * Math.Cos(latRad2) *
                                               Math.Sin(dLon / 2) * Math.Sin(dLon / 2);

                                    double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));

                                    int distance = Convert.ToInt32(EarthRadiusKm * c * 1000); // Distance in meters
                                    #endregion

                                    item.DistanceFromMyProperty = distance;
                                    item.AdvertisementAddressVM = PropertyAddress;
                                }
                            }
                            catch (Exception exc)
                            { }
                        }
                        if (HaveDetails)
                        {
                            if (PropertiesDetailsList.Where(p => p.PropertyId.Equals(item.AdvertisementId)).Any())
                            {
                                try
                                {
                                    PropertiesDetailsVM propertyDetail = PropertiesDetailsList.Where(p => p.PropertyId.Equals(item.AdvertisementId)).FirstOrDefault();
                                    item.AdvertisementDetailsVM = new AdvertisementDetailsVM()
                                    {
                                        AdvertisementId = propertyDetail.PropertyId,
                                        AdvertisementTypeId = propertyDetail.AdvertisementTypeId,
                                        BuildingLifeId = propertyDetail.BuildingLifeId,
                                        Convertable = propertyDetail.Convertable,
                                        Exchangeable = propertyDetail.Exchangeable,
                                        Foundation = propertyDetail.Foundation,
                                        Participable = propertyDetail.Participable,
                                        MaritalStatusId = propertyDetail.MaritalStatusId
                                    };
                                }

                                catch (Exception exc)
                                {
                                    item.AdvertisementDetailsVM = new AdvertisementDetailsVM();
                                }
                            }
                            else
                            {
                                item.AdvertisementDetailsVM = new AdvertisementDetailsVM();
                            }
                        }
                        if (propertiesPriceHistories.Where(p => p.PropertyId == item.AdvertisementId).Any())
                        {
                            try
                            {
                                var propertyPricesHistoriesVM = propertiesPriceHistories.Where(p => p.PropertyId == item.AdvertisementId).
                                    OrderByDescending(a => a.CreateEnDate).ThenByDescending(a => a.CreateTime).FirstOrDefault();

                                item.AdvertisementPricesHistoriesVM = new AdvertisementPricesHistoriesVM();
                                item.AdvertisementPricesHistoriesVM.AdvertisementId = propertyPricesHistoriesVM.PropertyId;
                                item.AdvertisementPricesHistoriesVM.OfferPrice = propertyPricesHistoriesVM.OfferPrice;
                                item.AdvertisementPricesHistoriesVM.RentPrice = propertyPricesHistoriesVM.RentPrice * 10;
                                item.AdvertisementPricesHistoriesVM.DepositPrice = propertyPricesHistoriesVM.DepositPrice * 10;
                                item.AdvertisementPricesHistoriesVM.CalculatedOfferPrice = propertyPricesHistoriesVM.CalculatedOfferPrice;
                                item.AdvertisementPricesHistoriesVM.OfferPriceType = propertyPricesHistoriesVM.OfferPriceType;
                                item.AdvertisementPricesHistoriesVM.CreateEnDate = propertyPricesHistoriesVM.CreateEnDate;
                                item.AdvertisementPricesHistoriesVM.CreateTime = propertyPricesHistoriesVM.CreateTime;
                                item.AdvertisementPricesHistoriesVM.IsActivated = propertyPricesHistoriesVM.IsActivated;
                                item.AdvertisementPricesHistoriesVM.IsDeleted = propertyPricesHistoriesVM.IsDeleted;

                            }
                            catch (Exception exc)
                            { }
                        }
                        if (HaveFiles)
                        {
                            if (propertiesFilesList.Where(p => p.PropertyId == item.AdvertisementId).Any())
                            {
                                try
                                {
                                    item.AdvertisementFilesVM = propertiesFilesList.Where(p => p.PropertyId == item.AdvertisementId)
                                   .Select(p => new AdvertisementFilesVM
                                   {
                                       AdvertisementId = p.PropertyId,
                                       AdvertisementFilePath = p.PropertyFilePath,
                                       AdvertisementFileExt = p.PropertyFileExt,
                                       AdvertisementFileTitle = p.PropertyFileTitle,
                                       AdvertisementFileId = p.PropertyFileId,
                                       AdvertisementFileType = p.PropertyFileType,
                                       AdvertisementFileOrder = p.PropertyFileOrder,
                                   }).OrderByDescending(f => f.AdvertisementFileId).ToList();
                                }
                                catch (Exception exc)
                                { }
                            }
                            else
                            {
                                item.AdvertisementFilesVM = new List<AdvertisementFilesVM>();
                            }
                        }

                        if (item.DocumentTypeId.HasValue)
                        {
                            if (documentTypes.Where(ad => ad.DocumentTypeId == item.DocumentTypeId).Any())
                            {
                                try
                                {
                                    item.DocumentTypeTitle = documentTypes
                                                           .Where(a => a.DocumentTypeId == item.DocumentTypeId).Select(a => a.DocumentTypeTitle).FirstOrDefault();
                                }
                                catch (Exception exc)
                                { }
                            }
                            else
                            {
                                item.DocumentTypeTitle = String.Empty;
                            }

                        }

                        if (item.DocumentOwnershipTypeId.HasValue)
                        {
                            if (documentOwnershipTypes.Where(ad => ad.DocumentOwnershipTypeId == item.DocumentOwnershipTypeId).Any())
                            {
                                try
                                {
                                    item.DocumentOwnershipTypeTitle = documentOwnershipTypes
                                          .Where(a => a.DocumentOwnershipTypeId == item.DocumentOwnershipTypeId).Select(a => a.DocumentOwnershipTypeTitle).FirstOrDefault();

                                }
                                catch (Exception exc)
                                { }
                            }
                            else
                            {
                                item.DocumentOwnershipTypeTitle = String.Empty;
                            }
                        }

                        if (item.DocumentRootTypeId.HasValue)
                        {

                            if (documentOwnershipTypes.Where(ad => ad.DocumentOwnershipTypeId == item.DocumentOwnershipTypeId).Any())
                            {
                                try
                                {
                                    item.DocumentRootTypeTitle = documentRootTypes
                                   .Where(a => a.DocumentRootTypeId == item.DocumentRootTypeId).Select(a => a.DocumentRootTypeTitle).FirstOrDefault();
                                }
                                catch (Exception exc)
                                { }
                            }
                            else
                            {
                                item.DocumentRootTypeTitle = String.Empty;
                            }
                        }


                        if (propertyTypes.Where(ad => ad.PropertyTypeId == item.PropertyTypeId).Any())
                        {
                            try
                            {
                                var resultOfPropertyTypeTilte = propertyTypes.FirstOrDefault(x => x.PropertyTypeId == item.PropertyTypeId);
                                item.PropertyTypeTilte = resultOfPropertyTypeTilte.PropertyTypeTilte;
                            }
                            catch (Exception exc)
                            { }
                        }
                        else
                        {
                            item.PropertyTypeTilte = String.Empty;
                        }

                        if (item.TypeOfUseId.HasValue)
                        {
                            if (typeOfUses.Where(ad => ad.TypeOfUseId == item.TypeOfUseId).Any())
                            {
                                try
                                {
                                    var resultOfTypeUseTitle = typeOfUses.FirstOrDefault(x => x.TypeOfUseId == item.TypeOfUseId);
                                    item.TypeUseTitle = resultOfTypeUseTitle.TypeOfUseTitle;
                                }
                                catch (Exception exc)
                                { }
                            }
                            else
                            {
                                item.TypeUseTitle = String.Empty;
                            }
                        }

                        if (item.AdvertisementDetailsVM.BuildingLifeId.HasValue)
                        {
                            try
                            {
                                var resultOfBuildingLifeTitle = melkavanApiDb.BuildingLifes.First(x => x.BuildingLifeId == item.AdvertisementDetailsVM.BuildingLifeId);
                                item.AdvertisementDetailsVM.BuildingLifesVM = new BuildingLifesVM
                                {
                                    BuildingLifeTitle = resultOfBuildingLifeTitle.BuildingLifeTitle,
                                };
                            }
                            catch (Exception exc)
                            { }
                        }
                    }



                }
            }
            catch (Exception exc)
            { }

            return AdvertisementVMList.Take(5).ToList();
        }


        #endregion

        #endregion

        #region Methods For Work With Properties

        public List<PropertiesVM> GetAllPropertiesList(ref int listCount,
            List<long> childsUsersIds,
            PublicApiContext publicApiDb,
            int? propertyTypeId = null,
            int? typeOfUseId = null,
            int? documentTypeId = null,
            long? consultantUserId = null,
            long? OwnerId = null,
            //int? documentOwnershipTypeId = null,
            //int? documentRootTypeId = null,
            string propertyCodeName = null,
            long? stateId = null,
            long? cityId = null,
            long? zoneId = null,
            long? districtId = null,
            bool? getFiles = null,
            bool? getAddress = null,
            bool? getPrices = null,
            bool? getPrice = null,
            bool? getFeatures = null,
            //string intermediary = null,
            //bool? isPrivate = null,
            string jtSorting = null)
        {
            List<PropertiesVM> propertiesVMList = new List<PropertiesVM>();

            try
            {
                //var list = 

                //old
                //var districts = (from s in publicApiDb.States
                //                 join c in publicApiDb.Cities on s.StateId equals c.StateId
                //                 join z in publicApiDb.Zones on c.CityId equals z.CityId
                //                 join d in publicApiDb.Districts on z.ZoneId equals d.ZoneId
                //                 select new DistrictsVM
                //                 {
                //                     CityId = c.CityId,
                //                     StateId = s.StateId,
                //                     ZoneId = z.ZoneId,
                //                     DistrictId = d.DistrictId
                //                 }).AsEnumerable();

                //var list = (from p in teniacoApiDb.Properties
                //            join pa in teniacoApiDb.PropertyAddress on p.PropertyId equals pa.PropertyId
                //            where childsUsersIds.Contains(p.UserIdCreator.Value) &&
                //            p.IsActivated.Value.Equals(true) &&
                //            p.IsDeleted.Value.Equals(false)
                //            select new PropertiesVM
                //            {
                //                Area = p.Area,
                //                BuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                //                BuiltInYearFa = p.BuiltInYearFa.HasValue ? p.BuiltInYearFa.Value : (int?)0,
                //                ConsultantUserId = p.ConsultantUserId.HasValue ? p.ConsultantUserId.Value : (long?)null,
                //                PropertyOwnersVM = new List<PropertyOwnersVM>(),
                //                //OwnerId = p.OwnerId.HasValue ? p.OwnerId.Value : (long?)null,
                //                //Intermediary = p.Intermediary,
                //                //IntermediaryPhone = p.IntermediaryPhone,
                //                //IsPrivate = p.IsPrivate,
                //                PropertyCodeName = p.PropertyCodeName,
                //                PropertyId = p.PropertyId,
                //                PropertyTypeId = p.PropertyTypeId,
                //                RebuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                //                RebuiltInYearFa = p.RebuiltInYearFa.HasValue ? p.RebuiltInYearFa.Value : (int?)0,
                //                TypeOfUseId = p.TypeOfUseId.HasValue ? p.TypeOfUseId.Value : (int?)0,
                //                DocumentTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
                //                DocumentOwnershipTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
                //                DocumentRootTypeId = p.DocumentRootTypeId.HasValue ? p.DocumentRootTypeId.Value : (int?)0,
                //                UserIdCreator = p.UserIdCreator.Value,
                //                CreateEnDate = p.CreateEnDate,
                //                CreateTime = p.CreateTime,
                //                EditEnDate = p.EditEnDate,
                //                EditTime = p.EditTime,
                //                UserIdEditor = p.UserIdEditor.Value,
                //                RemoveEnDate = p.RemoveEnDate,
                //                RemoveTime = p.EditTime,
                //                UserIdRemover = p.UserIdRemover.Value,
                //                IsActivated = p.IsActivated,
                //                IsDeleted = p.IsDeleted,
                //                PropertyAddressVM = new PropertyAddressVM
                //                {
                //                    StateId = 0,
                //                    CityId = 0,
                //                    ZoneId = pa.ZoneId,
                //                    DistrictId = pa.DistrictId,
                //                    //Abbreviation = pa.Address,
                //                    Address = pa.Address,
                //                    LocationLat = pa.LocationLat,
                //                    LocationLon = pa.LocationLon,
                //                    PropertyId = pa.PropertyId,
                //                    UserIdCreator = p.UserIdCreator.Value,
                //                    CreateEnDate = p.CreateEnDate,
                //                    CreateTime = p.CreateTime,
                //                    EditEnDate = p.EditEnDate,
                //                    EditTime = p.EditTime,
                //                    UserIdEditor = p.UserIdEditor.Value,
                //                    RemoveEnDate = p.RemoveEnDate,
                //                    RemoveTime = p.EditTime,
                //                    UserIdRemover = p.UserIdRemover.Value,
                //                    IsActivated = p.IsActivated,
                //                    IsDeleted = p.IsDeleted,
                //                }
                //            })
                //            .AsEnumerable()
                //            .Join(districts, pa => pa.PropertyAddressVM.DistrictId, z => z.DistrictId, (a, b) => new { a, b })
                //            .Select(p => new PropertiesVM
                //            {
                //                Area = p.a.Area,
                //                BuiltInYear = p.a.BuiltInYear.HasValue ? p.a.BuiltInYear.Value : (int?)0,
                //                BuiltInYearFa = p.a.BuiltInYearFa.HasValue ? p.a.BuiltInYearFa.Value : (int?)0,
                //                ConsultantUserId = p.a.ConsultantUserId.HasValue ? p.a.ConsultantUserId.Value : (long?)null,
                //                PropertyOwnersVM = new List<PropertyOwnersVM>(),
                //                //OwnerId = p.a.OwnerId.HasValue ? p.a.OwnerId.Value : (long?)null,
                //                //Intermediary = p.a.Intermediary,
                //                //IntermediaryPhone = p.a.IntermediaryPhone,
                //                //IsPrivate = p.a.IsPrivate,
                //                PropertyCodeName = p.a.PropertyCodeName,
                //                PropertyId = p.a.PropertyId,
                //                PropertyTypeId = p.a.PropertyTypeId,
                //                RebuiltInYear = p.a.BuiltInYear.HasValue ? p.a.BuiltInYear.Value : (int?)0,
                //                RebuiltInYearFa = p.a.RebuiltInYearFa.HasValue ? p.a.RebuiltInYearFa.Value : (int?)0,
                //                TypeOfUseId = p.a.TypeOfUseId.HasValue ? p.a.TypeOfUseId.Value : (int?)0,
                //                DocumentTypeId = p.a.DocumentTypeId.HasValue ? p.a.DocumentTypeId.Value : (int?)0,
                //                DocumentOwnershipTypeId = p.a.DocumentOwnershipTypeId.HasValue ? p.a.DocumentOwnershipTypeId.Value : (int?)0,
                //                DocumentRootTypeId = p.a.DocumentRootTypeId.HasValue ? p.a.DocumentRootTypeId.Value : (int?)0,
                //                UserIdCreator = p.a.UserIdCreator.Value,
                //                CreateEnDate = p.a.CreateEnDate,
                //                CreateTime = p.a.CreateTime,
                //                EditEnDate = p.a.EditEnDate,
                //                EditTime = p.a.EditTime,
                //                UserIdEditor = p.a.UserIdEditor.Value,
                //                RemoveEnDate = p.a.RemoveEnDate,
                //                RemoveTime = p.a.EditTime,
                //                UserIdRemover = p.a.UserIdRemover.Value,
                //                IsActivated = p.a.IsActivated,
                //                IsDeleted = p.a.IsDeleted,
                //                PropertyAddressVM = new PropertyAddressVM
                //                {
                //                    StateId = p.b.StateId.Value,
                //                    CityId = p.b.CityId.Value,
                //                    ZoneId = p.b.ZoneId,
                //                    DistrictId = p.b.DistrictId,
                //                    //Abbreviation = p.a.PropertyAddressVM.Address,
                //                    Address = p.a.PropertyAddressVM.Address,
                //                    LocationLat = p.a.PropertyAddressVM.LocationLat,
                //                    LocationLon = p.a.PropertyAddressVM.LocationLon,
                //                    PropertyId = p.a.PropertyAddressVM.PropertyId,
                //                    UserIdCreator = p.a.PropertyAddressVM.UserIdCreator.Value,
                //                    CreateEnDate = p.a.PropertyAddressVM.CreateEnDate,
                //                    CreateTime = p.a.PropertyAddressVM.CreateTime,
                //                    EditEnDate = p.a.PropertyAddressVM.EditEnDate,
                //                    EditTime = p.a.PropertyAddressVM.EditTime,
                //                    UserIdEditor = p.a.PropertyAddressVM.UserIdEditor.Value,
                //                    RemoveEnDate = p.a.PropertyAddressVM.RemoveEnDate,
                //                    RemoveTime = p.a.PropertyAddressVM.EditTime,
                //                    UserIdRemover = p.a.PropertyAddressVM.UserIdRemover.Value,
                //                    IsActivated = p.a.PropertyAddressVM.IsActivated,
                //                    IsDeleted = p.a.PropertyAddressVM.IsDeleted,
                //                }
                //            }).AsQueryable();



                List<States> states = new List<States>();
                List<Cities> cities = new List<Cities>();
                List<Zones> zones = new List<Zones>();
                List<Districts> districts = new List<Districts>();

                if (getAddress.HasValue)
                    if (getAddress.Value)
                    {
                        states = publicApiDb.States.ToList();
                        cities = publicApiDb.Cities.ToList();
                        zones = publicApiDb.Zones.ToList();
                        districts = publicApiDb.Districts.ToList();
                    }



                var list = (from p in teniacoApiDb.Properties
                            join pa in teniacoApiDb.PropertyAddress on p.PropertyId equals pa.PropertyId

                            where //childsUsersIds.Contains(p.UserIdCreator.Value) &&
                            p.IsActivated.Value.Equals(true) &&
                            p.IsDeleted.Value.Equals(false)
                            select new PropertiesVM
                            {
                                Area = p.Area,
                                BuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                                BuiltInYearFa = p.BuiltInYearFa.HasValue ? p.BuiltInYearFa.Value : (int?)0,
                                ConsultantUserId = p.ConsultantUserId.HasValue ? p.ConsultantUserId.Value : (long?)null,
                                //OwnerId = p.OwnerId.HasValue ? p.OwnerId.Value : (long?)null,
                                PropertyOwnersVM = new List<PropertyOwnersVM>(),
                                PropertyCodeName = p.PropertyCodeName,
                                PropertyId = p.PropertyId,
                                PropertyTypeId = p.PropertyTypeId,
                                RebuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                                RebuiltInYearFa = p.RebuiltInYearFa.HasValue ? p.RebuiltInYearFa.Value : (int?)0,
                                TypeOfUseId = p.TypeOfUseId.HasValue ? p.TypeOfUseId.Value : (int?)0,
                                DocumentTypeId = p.DocumentTypeId.HasValue ? p.DocumentTypeId.Value : (int?)0,
                                DocumentOwnershipTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
                                DocumentRootTypeId = p.DocumentRootTypeId.HasValue ? p.DocumentRootTypeId.Value : (int?)0,
                                PropertyDescriptions = !string.IsNullOrEmpty(p.PropertyDescriptions) ? p.PropertyDescriptions : "",
                                ShowInMelkavan = p.ShowInMelkavan,
                                UserIdCreator = p.UserIdCreator.Value,
                                CreateEnDate = p.CreateEnDate,
                                CreateTime = p.CreateTime,
                                EditEnDate = p.EditEnDate,
                                EditTime = p.EditTime,
                                UserIdEditor = p.UserIdEditor.Value,
                                RemoveEnDate = p.RemoveEnDate,
                                RemoveTime = p.EditTime,
                                UserIdRemover = p.UserIdRemover.Value,
                                IsActivated = p.IsActivated,
                                IsDeleted = p.IsDeleted,
                                PropertyAddressVM = new PropertyAddressVM
                                {
                                    StateId = pa.StateId.Value,
                                    CityId = pa.CityId.Value,
                                    ZoneId = pa.ZoneId,
                                    DistrictId = pa.DistrictId,
                                    CityName = "",//x.CityName,
                                    StateName = "",//x.StateName,
                                    TownName = "",//x.TownName,
                                    VillageName = "",//x.VillageName,
                                    ZoneName = "",//x.ZoneName,
                                    DistrictName = "",
                                    //Abbreviation = "",//x.Abbreviation,
                                    Address = !string.IsNullOrEmpty(pa.Address) ? pa.Address : "",
                                    //Address = pa.Address,
                                    LocationLat = pa.LocationLat,
                                    LocationLon = pa.LocationLon,
                                    PropertyId = pa.PropertyId,
                                    UserIdCreator = pa.UserIdCreator,
                                    CreateEnDate = pa.CreateEnDate,
                                    CreateTime = pa.CreateTime,
                                    EditEnDate = pa.EditEnDate,
                                    EditTime = pa.EditTime,
                                    UserIdEditor = pa.UserIdEditor,
                                    RemoveEnDate = pa.RemoveEnDate,
                                    RemoveTime = pa.EditTime,
                                    UserIdRemover = pa.UserIdRemover,
                                    IsActivated = pa.IsActivated,
                                    IsDeleted = pa.IsDeleted,
                                },

                            })
                            .AsEnumerable();


                if (childsUsersIds != null)
                {
                    if (childsUsersIds.Count > 1)
                    {
                        list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                    }
                    else
                    {
                        if (childsUsersIds.Count == 1)
                        {
                            if (childsUsersIds.FirstOrDefault() > 0)
                            {
                                list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                            }
                        }
                    }
                }

                if (propertyTypeId.HasValue)
                    if (propertyTypeId.Value > 0)
                        list = list.Where(a => a.PropertyTypeId.Equals(propertyTypeId.Value));

                if (typeOfUseId.HasValue)
                    if (typeOfUseId.Value > 0)
                        list = list.Where(a => a.TypeOfUseId.Equals(typeOfUseId.Value));

                if (documentTypeId.HasValue)
                    if (documentTypeId.Value > 0)
                        list = list.Where(a => a.DocumentTypeId.Equals(documentTypeId.Value));

                //if (documentOwnershipTypeId.HasValue)
                //    if (documentOwnershipTypeId.Value > 0)
                //        list = list.Where(a => a.DocumentOwnershipTypeId.Equals(documentOwnershipTypeId.Value));

                //if (documentRootTypeId.HasValue)
                //    if (documentRootTypeId.Value > 0)
                //        list = list.Where(a => a.DocumentRootTypeId.Equals(documentRootTypeId.Value));

                if (!string.IsNullOrEmpty(propertyCodeName))
                    list = list.Where(z => z.PropertyCodeName.Contains(propertyCodeName));

                //if (!string.IsNullOrEmpty(intermediary))
                //    list = list.Where(z => z.Intermediary.Contains(intermediary) ||
                //            z.IntermediaryPhone.Contains(intermediary));

                if (stateId.HasValue)
                    if (stateId.Value > 0)
                        list = list.Where(a => a.PropertyAddressVM.StateId.Equals(stateId.Value));

                if (cityId.HasValue)
                    if (cityId.Value > 0)
                        list = list.Where(a => a.PropertyAddressVM.CityId.Equals(cityId.Value));

                if (zoneId.HasValue)
                    if (zoneId.Value > 0)
                        list = list.Where(a => a.PropertyAddressVM.ZoneId.Equals(zoneId.Value));

                if (districtId.HasValue)
                    if (districtId.Value > 0)
                        list = list.Where(a => a.PropertyAddressVM.DistrictId.Equals(districtId.Value));

                if (consultantUserId.HasValue)
                    if (consultantUserId.Value > 0)
                        list = list.Where(a => a.ConsultantUserId.Value.Equals(consultantUserId.Value));

                if (OwnerId.HasValue)
                    if (OwnerId.Value > 0)
                        list = list.Where(a => a.PropertyOwnersVM != null).
                            Where(a => a.PropertyOwnersVM.Count > 0).
                            Where(a => a.PropertyOwnersVM.Select(o => o.OwnerId).Contains(OwnerId.Value));
                //list = list.Where(a => a.OwnerId.Value.Equals(OwnerId.Value));


                //if (isPrivate.HasValue)
                //    list = list.Where(a => a.IsPrivate.Equals(isPrivate.Value));

                //zonesVM = _mapper.Map<List<Zones>,
                //    List<ZonesVM>>(list.OrderByDescending(f => f.ZoneId).ToList());

                propertiesVMList = list.OrderByDescending(f => f.PropertyId).ToList();

                if (getFiles.HasValue || getAddress.HasValue || getPrices.HasValue || getPrice.HasValue || getFeatures.HasValue)
                {
                    var propertyIds = propertiesVMList.Select(p => p.PropertyId).ToList();

                    List<PropertyFiles> propertyFiles = new List<PropertyFiles>();

                    if (getFiles.HasValue)
                        if (getFiles.Value)
                            propertyFiles = teniacoApiDb.PropertyFiles.Where(pf => propertyIds.Contains(pf.PropertyId)).ToList();

                    List<PropertiesPricesHistories> propertiesPricesHistories = new List<PropertiesPricesHistories>();

                    if (getPrices.HasValue)
                        if (getPrices.Value)
                            propertiesPricesHistories = teniacoApiDb.PropertiesPricesHistories.Where(pf => propertyIds.Contains(pf.PropertyId)).OrderByDescending(p => p.CreateEnDate.Value).ToList();

                    if (getPrice.HasValue)
                        if (getPrice.Value)
                            propertiesPricesHistories = teniacoApiDb.PropertiesPricesHistories.Where(pf => propertyIds.Contains(pf.PropertyId)).GroupBy(p => p.PropertyId).
                                OrderByDescending(p => p.FirstOrDefault().CreateEnDate.Value).Select(p => p.FirstOrDefault()).ToList();

                    List<FeaturesValues> featuresValues = new List<FeaturesValues>();

                    if (getFeatures.HasValue)
                        if (getFeatures.Value)
                        {
                            featuresValues = teniacoApiDb.FeaturesValues.Where(f => propertyIds.Contains(f.PropertyId)).ToList();
                        }

                    foreach (var item in propertiesVMList)
                    {
                        if (getAddress.HasValue)
                            if (getAddress.Value)
                            {
                                try
                                {
                                    if (item.PropertyAddressVM.StateId.HasValue)
                                    {
                                        var state = states.Where(s => s.StateId.Equals(item.PropertyAddressVM.StateId)).FirstOrDefault();
                                        if (state != null)
                                        {
                                            item.PropertyAddressVM.StateId = state.StateId;
                                            item.PropertyAddressVM.StateName = state.StateName;
                                        }
                                    }

                                    if (item.PropertyAddressVM.CityId.HasValue)
                                    {
                                        var city = cities.Where(c => c.CityId.Equals(item.PropertyAddressVM.CityId)).FirstOrDefault();
                                        if (city != null)
                                        {
                                            item.PropertyAddressVM.CityId = city.CityId;
                                            item.PropertyAddressVM.CityName = city.CityName;
                                        }
                                    }

                                    if (item.PropertyAddressVM.ZoneId.HasValue)
                                    {
                                        var zone = zones.Where(z => z.ZoneId.Equals(item.PropertyAddressVM.ZoneId.Value)).FirstOrDefault();
                                        if (zone != null)
                                        {
                                            item.PropertyAddressVM.ZoneId = zone.ZoneId;
                                            item.PropertyAddressVM.ZoneName = zone.ZoneName;
                                        }
                                    }

                                    if (item.PropertyAddressVM.DistrictId.HasValue)
                                    {
                                        var district = districts.Where(z => z.DistrictId.Equals(item.PropertyAddressVM.DistrictId.Value)).FirstOrDefault();
                                        if (district != null)
                                        {
                                            item.PropertyAddressVM.DistrictId = district.DistrictId;
                                            item.PropertyAddressVM.DistrictName = district.DistrictName;
                                            item.PropertyAddressVM.VillageName = district.VillageName;
                                            item.PropertyAddressVM.TownName = district.TownName;
                                        }
                                    }
                                }
                                catch (Exception exc)
                                { }
                            }

                        if (getFiles.HasValue)
                            if (getFiles.Value)
                            {
                                try
                                {
                                    if (propertyFiles.Where(pf => pf.PropertyId.Equals(item.PropertyId)).Any())
                                    {
                                        item.PropertyFilesVM = _mapper.Map<List<PropertyFiles>, List<PropertyFilesVM>>(propertyFiles.Where(pf => pf.PropertyId.Equals(item.PropertyId)).ToList());
                                    }
                                }
                                catch (Exception exc)
                                { }
                            }

                        if (getPrices.HasValue)
                            if (getPrices.Value)
                            {
                                try
                                {
                                    if (propertiesPricesHistories.Where(pf => pf.PropertyId.Equals(item.PropertyId)).Any())
                                    {
                                        item.PropertiesPricesHistoriesVM = _mapper.Map<List<PropertiesPricesHistories>,
                                            List<PropertiesPricesHistoriesVM>>(propertiesPricesHistories.Where(pf => pf.PropertyId.Equals(item.PropertyId)).OrderByDescending(p => p.PropertyId).ToList());
                                    }
                                }
                                catch (Exception exc)
                                { }
                            }

                        //if (getPrice.HasValue)
                        //    if (getPrice.Value)
                        //    {
                        //        try
                        //        {
                        //            if (propertiesPricesHistories.Where(pf => pf.PropertyId.Equals(item.PropertyId)).Any())
                        //            {
                        //                item.PropertiesPricesHistoriesVM = _mapper.Map<List<PropertiesPricesHistories>,
                        //                    List<PropertiesPricesHistoriesVM>>(propertiesPricesHistories.Where(pf => pf.PropertyId.Equals(item.PropertyId)).OrderByDescending(p => p.PropertyId).ToList());
                        //            }
                        //        }
                        //        catch (Exception exc)
                        //        { }
                        //    }

                        if (getFeatures.HasValue)
                            if (getFeatures.Value)
                            {
                                try
                                {
                                    if (featuresValues.Where(f => f.PropertyId.Equals(item.PropertyId)).Any())
                                    {
                                        item.FeaturesValuesVM = _mapper.Map<List<FeaturesValues>,
                                            List<FeaturesValuesVM>>(featuresValues.Where(pf => pf.PropertyId.Equals(item.PropertyId)).ToList());

                                        var featureIds = item.FeaturesValuesVM.Select(f => f.FeatureId).ToList();
                                        var features = teniacoApiDb.Features.Where(f => featureIds.Contains(f.FeatureId)).ToList();

                                        foreach (var featuresValuesVM in item.FeaturesValuesVM)
                                        {
                                            if (features.Where(f => f.FeatureId.Equals(featuresValuesVM.FeatureId)).Any())
                                            {
                                                var feature = features.Where(f => f.FeatureId.Equals(featuresValuesVM.FeatureId)).FirstOrDefault();
                                                featuresValuesVM.FeatureTitle = feature.FeatureTitle;
                                                switch (feature.ElementTypeId)
                                                {
                                                    case 1://متنی
                                                        featuresValuesVM.FeatureValueTitle = featuresValuesVM.FeatureValue;
                                                        break;
                                                    case 2://تک انتخابی
                                                        var singleFeaturesOptions = teniacoApiDb.FeaturesOptions.Where(fo => fo.FeatureId.Equals(featuresValuesVM.FeatureId)).FirstOrDefault();
                                                        featuresValuesVM.FeatureValueTitle = singleFeaturesOptions.FeatureOptionText;
                                                        break;
                                                    case 3://چند انتخابی

                                                        if (!string.IsNullOrEmpty(featuresValuesVM.FeatureValue))
                                                        {
                                                            var featureValues = featuresValuesVM.FeatureValue.Split(',').Select(int.Parse).ToList();

                                                            var multiFeaturesOptions = teniacoApiDb.FeaturesOptions.Where(fo => fo.FeatureId.Equals(featuresValuesVM.FeatureId) &&
                                                                featureValues.Contains(fo.FeatureOptionValue)).ToList();

                                                            featuresValuesVM.FeatureValueTitle = String.Join(", ", multiFeaturesOptions.Select(o => o.FeatureOptionText).ToArray());
                                                        }
                                                        break;
                                                    //case 4://توضیحات
                                                    //    break;
                                                    case 5://چک باکس
                                                        break;
                                                        //case 6://تاریخ
                                                        //    break;
                                                        //case 7://ساعت
                                                        //    break;
                                                        //case 8://ویرایشگر متن
                                                        //    break;
                                                        //case 9://عددی
                                                        //    break;
                                                        //case 10://فایل
                                                        //    break;
                                                }
                                            }
                                        }
                                    }
                                }
                                catch (Exception exc)
                                { }
                            }
                    }
                }

                //try
                //{
                //    var cityIds = zonesVM.Select(f => f.CityId).ToList();
                //    if (cityIds != null)
                //        if (cityIds.Count > 0)
                //        {
                //            var cities = teniacoApiDb.Cities.Where(c => cityIds.Contains(c.CityId)).ToList();

                //            foreach (var zone in zonesVM)
                //            {
                //                if (zone.CityId > 0)
                //                {
                //                    zone.CityName = cities.
                //                        Where(fc => fc.CityId.Equals(zone.CityId)).
                //                        FirstOrDefault().
                //                        CityName;
                //                }
                //            }
                //        }
                //}
                //catch (Exception exc)
                //{ }
            }
            catch (Exception exc)
            { }

            return propertiesVMList;
        }

        public List<PropertiesVM> GetListOfProperties(int jtStartIndex,
            int jtPageSize,
            ref int listCount,
            List<long> childsUsersIds,
            PublicApiContext publicApiDb,
            int? propertyTypeId = null,
            int? typeOfUseId = null,
            int? documentTypeId = null,
            long? consultantUserId = null,
            long? OwnerId = null,
            //int? documentOwnershipTypeId = null,
            //int? documentRootTypeId = null,
            string propertyCodeName = null,
            long? stateId = null,
            long? cityId = null,
            long? zoneId = null,
            long? districtId = null,
            //string intermediary = null,
            //bool? isPrivate = null,
            string jtSorting = null,
            long? priceFrom = null,
            long? priceTo = null)
        {


            List<PropertiesVM> propertiesVMList = new List<PropertiesVM>();


            //var states = publicApiDb.States.ToList();
            //var cities = publicApiDb.Cities.ToList();
            //var zones = publicApiDb.Zones.ToList();
            //var districts = publicApiDb.Districts.ToList();



            var list = (from p in teniacoApiDb.Properties
                        join pa in teniacoApiDb.PropertyAddress on p.PropertyId equals pa.PropertyId
                        where //childsUsersIds.Contains(p.UserIdCreator.Value) &&
                        p.IsActivated.Value.Equals(true) &&
                        p.IsDeleted.Value.Equals(false)
                        select new PropertiesVM
                        {
                            Area = p.Area,
                            BuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                            BuiltInYearFa = p.BuiltInYearFa.HasValue ? p.BuiltInYearFa.Value : (int?)0,
                            ConsultantUserId = p.ConsultantUserId.HasValue ? p.ConsultantUserId.Value : (long?)null,
                            //OwnerId = p.OwnerId.HasValue ? p.OwnerId.Value : (long?)null,
                            PropertyOwnersVM = new List<PropertyOwnersVM>(),
                            PropertyCodeName = p.PropertyCodeName,
                            PropertyId = p.PropertyId,
                            PropertyTypeId = p.PropertyTypeId,
                            RebuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                            RebuiltInYearFa = p.RebuiltInYearFa.HasValue ? p.RebuiltInYearFa.Value : (int?)0,
                            TypeOfUseId = p.TypeOfUseId.HasValue ? p.TypeOfUseId.Value : (int?)0,
                            DocumentTypeId = p.DocumentTypeId.HasValue ? p.DocumentTypeId.Value : (int?)0,
                            DocumentOwnershipTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
                            DocumentRootTypeId = p.DocumentRootTypeId.HasValue ? p.DocumentRootTypeId.Value : (int?)0,
                            PropertyDescriptions = !string.IsNullOrEmpty(p.PropertyDescriptions) ? p.PropertyDescriptions : "",
                            ShowInMelkavan = p.ShowInMelkavan,
                            UserIdCreator = p.UserIdCreator.Value,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor.Value,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover.Value,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted,
                            PropertyAddressVM = new PropertyAddressVM
                            {
                                StateId = pa.StateId.Value,
                                CityId = pa.CityId.Value,
                                ZoneId = pa.ZoneId,
                                DistrictId = pa.DistrictId,
                                CityName = "",//x.CityName,
                                StateName = "",//x.StateName,
                                TownName = "",//x.TownName,
                                VillageName = "",//x.VillageName,
                                ZoneName = "",//x.ZoneName,
                                DistrictName = "",
                                //Abbreviation = "",//x.Abbreviation,
                                Address = !string.IsNullOrEmpty(pa.Address) ? pa.Address : "",
                                //Address = pa.Address,
                                LocationLat = pa.LocationLat,
                                LocationLon = pa.LocationLon,
                                PropertyId = pa.PropertyId,
                                UserIdCreator = pa.UserIdCreator,
                                CreateEnDate = pa.CreateEnDate,
                                CreateTime = pa.CreateTime,
                                EditEnDate = pa.EditEnDate,
                                EditTime = pa.EditTime,
                                UserIdEditor = pa.UserIdEditor,
                                RemoveEnDate = pa.RemoveEnDate,
                                RemoveTime = pa.EditTime,
                                UserIdRemover = pa.UserIdRemover,
                                IsActivated = pa.IsActivated,
                                IsDeleted = pa.IsDeleted,
                            },
                        })
                        .AsQueryable();

            if (childsUsersIds != null)
            {
                if (childsUsersIds.Count > 1)
                {
                    list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                }
                else
                {
                    if (childsUsersIds.Count == 1)
                    {
                        if (childsUsersIds.FirstOrDefault() > 0)
                        {
                            list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                        }
                    }
                }
            }

            //if (childsUsersIds.Count > 1)
            //    list = list.Where(l => childsUsersIds.Contains(l.UserIdCreator.Value));
            //else
            //{
            //    if (childsUsersIds.Count == 1)
            //        if (!childsUsersIds.FirstOrDefault().Equals(0))
            //            list = list.Where(l => childsUsersIds.Contains(l.UserIdCreator.Value));
            //}

            if (propertyTypeId.HasValue)
                if (propertyTypeId.Value > 0)
                    list = list.Where(a => a.PropertyTypeId.Equals(propertyTypeId.Value));

            if (typeOfUseId.HasValue)
                if (typeOfUseId.Value > 0)
                    list = list.Where(a => a.TypeOfUseId.Equals(typeOfUseId.Value));

            if (documentTypeId.HasValue)
                if (documentTypeId.Value > 0)
                    list = list.Where(a => a.DocumentTypeId.Equals(documentTypeId.Value));

            if (!string.IsNullOrEmpty(propertyCodeName))
                list = list.Where(z => z.PropertyCodeName.Contains(propertyCodeName));

            if (stateId.HasValue)
                if (stateId.Value > 0)
                    list = list.Where(a => a.PropertyAddressVM.StateId.Equals(stateId.Value));

            if (cityId.HasValue)
                if (cityId.Value > 0)
                    list = list.Where(a => a.PropertyAddressVM.CityId.Equals(cityId.Value));

            if (zoneId.HasValue)
                if (zoneId.Value > 0)
                    list = list.Where(a => a.PropertyAddressVM.ZoneId.Equals(zoneId.Value));

            if (districtId.HasValue)
                if (districtId.Value > 0)
                    list = list.Where(a => a.PropertyAddressVM.DistrictId.Equals(districtId.Value));

            if (consultantUserId.HasValue)
                if (consultantUserId.Value > 0)
                    list = list.Where(a => a.ConsultantUserId.Equals(consultantUserId));

            if (OwnerId.HasValue)
                if (OwnerId.Value > 0)
                    list = list.Where(a => a.PropertyOwnersVM != null).
                        Where(a => a.PropertyOwnersVM.Count > 0).
                        Where(a => a.PropertyOwnersVM.Select(o => o.OwnerId).Contains(OwnerId.Value));

            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {
                        propertiesVMList = list.OrderByDescending(s => s.PropertyId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {


                        propertiesVMList = list.OrderByDescending(s => s.PropertyId).ToList();
                    }
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {
                        switch (jtSorting)
                        {
                            case "PropertyCodeName ASC":
                                list = list.OrderBy(l => l.PropertyCodeName);
                                break;
                            case "PropertyCodeName DESC":
                                list = list.OrderByDescending(l => l.PropertyCodeName);
                                break;
                        }

                        if (string.IsNullOrEmpty(jtSorting))
                            propertiesVMList = list.OrderByDescending(s => s.PropertyId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            propertiesVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {

                        propertiesVMList = list.ToList();
                    }
                }

                var stateIds = propertiesVMList.Where(p => p.PropertyAddressVM.StateId.HasValue).Select(p => p.PropertyAddressVM.StateId.Value).ToList();
                var states = publicApiDb.States.Where(s => stateIds.Contains(s.StateId)).ToList();

                var cityIds = propertiesVMList.Where(p => p.PropertyAddressVM.CityId.HasValue).Select(p => p.PropertyAddressVM.CityId.Value).ToList();
                var cities = publicApiDb.Cities.Where(s => cityIds.Contains(s.CityId)).ToList();

                var zoneIds = propertiesVMList.Where(p => p.PropertyAddressVM.ZoneId.HasValue).Select(p => p.PropertyAddressVM.ZoneId.Value).ToList();
                var zones = publicApiDb.Zones.Where(s => zoneIds.Contains(s.ZoneId)).ToList();

                var districtIds = propertiesVMList.Where(p => p.PropertyAddressVM.DistrictId.HasValue).Select(p => p.PropertyAddressVM.DistrictId.Value).ToList();
                var districts = publicApiDb.Districts.Where(s => districtIds.Contains(s.DistrictId)).ToList();

                var propertyIds = propertiesVMList.Select(p => p.PropertyId).ToList();

                string sp = @"select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as PropertyDataTypeCountId, PropertyId, DataType, Count
from

(
SELECT PropertyId, PropertyFileType as DataType, COUNT(PropertyFileType) as Count
  FROM PropertyFiles
  group by PropertyId, PropertyFileType
  union all
  select PropertyId, 'price' DataType, count(PropertyPriceHistoryId) as Count
  from PropertiesPricesHistories
    group by PropertyId
) as Counts";

                var propertyDataTypeCounts = teniacoApiDb.PropertyDataTypeCounts.FromSqlRaw(sp).Where(p => propertyIds.Contains(p.PropertyId)).ToList();

                foreach (var item in propertiesVMList)
                {
                    if (propertyDataTypeCounts.Where(p => p.PropertyId.Equals(item.PropertyId)).Any())
                    {
                        var propertyDataTypeCount = propertyDataTypeCounts.Where(p => p.PropertyId.Equals(item.PropertyId)).ToList();

                        item.CountOfDocs = propertyDataTypeCount.Where(p => p.DataType.Equals("docs")).FirstOrDefault()?.Count;
                        item.CountOfMaps = propertyDataTypeCount.Where(p => p.DataType.Equals("maps")).FirstOrDefault()?.Count;
                        item.CountOfMedia = propertyDataTypeCount.Where(p => p.DataType.Equals("media")).FirstOrDefault()?.Count;
                        item.CountOfPrices = propertyDataTypeCount.Where(p => p.DataType.Equals("price")).FirstOrDefault()?.Count;
                    }


                    var state = states.Where(s => s.StateId.Equals(item.PropertyAddressVM.StateId)).FirstOrDefault();
                    if (state != null)
                    {
                        //item.PropertyAddressVM.StateId = state.StateId;
                        item.PropertyAddressVM.StateName = state.StateName;
                    }

                    var city = cities.Where(c => c.CityId.Equals(item.PropertyAddressVM.CityId)).FirstOrDefault();
                    if (city != null)
                    {
                        //item.PropertyAddressVM.CityId = city.CityId;
                        item.PropertyAddressVM.CityName = city.CityName;
                    }

                    if (item.PropertyAddressVM.ZoneId.HasValue)
                    {
                        var zone = zones.Where(z => z.ZoneId.Equals(item.PropertyAddressVM.ZoneId.Value)).FirstOrDefault();
                        if (zone != null)
                        {
                            //item.PropertyAddressVM.ZoneId = zone.ZoneId;
                            item.PropertyAddressVM.ZoneName = zone.ZoneName;
                        }
                    }

                    if (item.PropertyAddressVM.DistrictId.HasValue)
                    {
                        var district = districts.Where(z => z.DistrictId.Equals(item.PropertyAddressVM.DistrictId.Value)).FirstOrDefault();
                        if (district != null)
                        {
                            //item.PropertyAddressVM.DistrictId = district.DistrictId;
                            item.PropertyAddressVM.DistrictName = district.DistrictName;
                            item.PropertyAddressVM.VillageName = district.VillageName;
                            item.PropertyAddressVM.TownName = district.TownName;
                        }
                    }

                }


            }
            catch (Exception exc)
            { }

            return propertiesVMList;
        }

        #region Sina's Code

        //public List<PropertiesAdvanceSearchVM> GetListOfPropertiesAdvanceSearch(int jtStartIndex,
        //        int jtPageSize,
        //        ref int listCount,
        //        List<long> childsUsersIds,
        //        PublicApiContext publicApiDb,
        //        MelkavanApiContext melkavanApiDb,
        //        IConsoleBusiness consoleBusiness,
        //        List<int>? platform,
        //        int? propertyTypeId,
        //        int? slcPrice,
        //        double? priceFrom,
        //        double? priceTo,
        //        int? slcArea,
        //        double? areaFrom,
        //        double? areaTo,
        //        string? address,
        //        string? featuresAndDesc,
        //        int? typeOfUseId,
        //        int? documentTypeId,
        //        int? documentRootTypeId,
        //        int? documentOwnershipTypeId,
        //        string? propertyCodeName,
        //        long? consultantUserId,
        //        long? OwnerId,
        //        long? InvestorId,
        //        long? AdvertiserId,
        //        //List<string>?features,
        //        Dictionary<string, string>? features,
        //        long? stateId,
        //        long? cityId,
        //        long? zoneId,
        //        long? districtId,
        //        long? ThisUserId = null,
        //        bool? Participable = false,
        //        bool? Exchangeable = false,
        //        string jtSorting = null)
        //{
        //    List<PropertiesAdvanceSearchVM> propertiesAdvanceSearchVMList = new List<PropertiesAdvanceSearchVM>();

        //    try
        //    {
        //        string sp = @"";
        //        string countsp = @"";

        //        if (platform != null)
        //        {
        //            if (platform.Count.Equals(1))
        //            {
        //                if (platform.FirstOrDefault().Equals(1))//داخلی
        //                {
        //                    sp = @"


        //                        select distinct * from (select 'Properties' RecordType,
        //                        		TeniacoDbHaghighi.dbo.Properties.PropertyId as AdvertisementId,
        //                                0 CountOfMaps,
        //                                0 CountOfDocs,
        //                                0 CountOfMedia ,
        //                                0 CountOfPrices ,
        //                                '' PropertyTypeTilte,
        //                                '' TypeUseTitle,
        //                                '' DocumentTypeTitle ,
        //                                '' DocumentOwnershipTypeTitle ,
        //                                '' DocumentRootTypeTitle ,
        //                                '' StateName,
        //                                '' CityName,
        //                                '' ZoneName,
        //                                '' DistrictName ,
        //                                '' UserCreatorName,
        //                                '' ConsultantName,
        //                                ''AdvertiserName,
        //                                TeniacoDbHaghighi.dbo.Properties.IsActivated,
        //                                TeniacoDbHaghighi.dbo.Properties.IsDeleted,
        //                                TeniacoDbHaghighi.dbo.Properties.ConsultantUserId,
        //                                TeniacoDbHaghighi.dbo.Properties.AdvertiserId,
        //                                TeniacoDbHaghighi.dbo.Properties.EditEnDate,
        //                                TeniacoDbHaghighi.dbo.Properties.RebuiltInYearFa,
        //	                            TeniacoDbHaghighi.dbo.Properties.CreateEnDate, 
        //                        		TeniacoDbHaghighi.dbo.Properties.PropertyTypeId, 
        //                        		TeniacoDbHaghighi.dbo.Properties.TypeOfUseId, 
        //                        		TeniacoDbHaghighi.dbo.Properties.DocumentOwnershipTypeId, 
        //                        		TeniacoDbHaghighi.dbo.Properties.DocumentTypeId, 
        //                        		TeniacoDbHaghighi.dbo.Properties.DocumentRootTypeId, 
        //                        		TeniacoDbHaghighi.dbo.Properties.PropertyCodeName as AdvertisementTitle, 
        //                        		TeniacoDbHaghighi.dbo.Properties.Area, 
        //                        		TeniacoDbHaghighi.dbo.Properties.PropertyDescriptions as AdvertisementDescriptions, 
        //                        		TeniacoDbHaghighi.dbo.Properties.UserIdCreator,
        //                        		TeniacoDbHaghighi.dbo.Properties.ShowInMelkavan,
        //                        		TeniacoDbHaghighi.dbo.PropertyOwners.OwnerId,
        //                        		TeniacoDbHaghighi.dbo.PropertyAddress.CountryId,
        //                        		TeniacoDbHaghighi.dbo.PropertyAddress.StateId,
        //                        		TeniacoDbHaghighi.dbo.PropertyAddress.CityId,
        //                        		TeniacoDbHaghighi.dbo.PropertyAddress.ZoneId,
        //                        		TeniacoDbHaghighi.dbo.PropertyAddress.DistrictId, 
        //                                TeniacoDbHaghighi.dbo.PropertiesDetails.BuildingLifeId,
        //	                            TeniacoDbHaghighi.dbo.PropertiesDetails.Foundation,
        //                                TeniacoDbHaghighi.dbo.PropertiesDetails.Participable as  Participable,
        //                                TeniacoDbHaghighi.dbo.PropertiesDetails.Exchangeable as  Exchangeable,
        //                                TeniacoDbHaghighi.dbo.PropertiesDetails.SecondPropertyDescriptions

        //                        	from {1} 

        //                        	left join TeniacoDbHaghighi.dbo.PropertyOwners on Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertyOwners.PropertyId 
        //                        	inner join TeniacoDbHaghighi.dbo.PropertyAddress on Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertyAddress.PropertyId 
        //                        	inner join TeniacoDbHaghighi.dbo.PropertiesDetails on Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertiesDetails.PropertyId

        //                             {joinTeniacoFeatureValues}
        //                             {0} {strTeniacoFeatureWhereClause} {strTeniacoDescriptionWhereClause} {strTeniacoLocationWhereClause} 

        //                        			) as tmp 
        //                        	order by CreateEnDate desc  ";
        //                }
        //                else
        //                    if (platform.FirstOrDefault().Equals(0))//ملکاوان
        //                {
        //                    sp = @"

        //                        select distinct * from (select 'Advertisement' RecordType,
        //                        		MelkavanDbHaghighi.dbo.Advertisement.AdvertisementId, 
        //                                0 CountOfMaps,
        //                                0 CountOfDocs,
        //                                0 CountOfMedia ,
        //                                0 CountOfPrices ,
        //                                '' PropertyTypeTilte,
        //                                '' TypeUseTitle,
        //                                '' DocumentTypeTitle ,
        //                                '' DocumentOwnershipTypeTitle ,
        //                                '' DocumentRootTypeTitle ,
        //                                '' StateName,
        //                                '' CityName,
        //                                '' ZoneName,
        //                                '' DistrictName ,
        //                                '' UserCreatorName,
        //                                '' ConsultantName,
        //                                ''AdvertiserName,
        //                                MelkavanDbHaghighi.dbo.Advertisement.IsActivated,
        //	                            MelkavanDbHaghighi.dbo.Advertisement.IsDeleted,
        //                                MelkavanDbHaghighi.dbo.Advertisement.ConsultantUserId,
        //                                MelkavanDbHaghighi.dbo.Advertisement.AdvertiserId,
        //                                MelkavanDbHaghighi.dbo.Advertisement.EditEnDate,
        //                                MelkavanDbHaghighi.dbo.Advertisement.RebuiltInYearFa,
        //                                MelkavanDbHaghighi.dbo.Advertisement.CreateEnDate, 
        //                        		MelkavanDbHaghighi.dbo.Advertisement.PropertyTypeId, 
        //                        		MelkavanDbHaghighi.dbo.Advertisement.TypeOfUseId, 
        //                        		MelkavanDbHaghighi.dbo.Advertisement.DocumentOwnershipTypeId, 
        //                        		MelkavanDbHaghighi.dbo.Advertisement.DocumentTypeId, 
        //                        		MelkavanDbHaghighi.dbo.Advertisement.DocumentRootTypeId, 
        //                        		MelkavanDbHaghighi.dbo.Advertisement.AdvertisementTitle, 
        //                        		MelkavanDbHaghighi.dbo.Advertisement.Area, 
        //                        		MelkavanDbHaghighi.dbo.Advertisement.AdvertisementDescriptions, 
        //                        		MelkavanDbHaghighi.dbo.Advertisement.UserIdCreator,
        //                        		CAST('1' as bit) ShowInMelkavan,
        //                        		MelkavanDbHaghighi.dbo.AdvertisementOwners.OwnerId as OwnerId,
        //                        		MelkavanDbHaghighi.dbo.AdvertisementAddress.CountryId,
        //                        		MelkavanDbHaghighi.dbo.AdvertisementAddress.StateId,
        //                        		MelkavanDbHaghighi.dbo.AdvertisementAddress.CityId,
        //                        		MelkavanDbHaghighi.dbo.AdvertisementAddress.ZoneId,
        //                        		MelkavanDbHaghighi.dbo.AdvertisementAddress.DistrictId, 
        //                                MelkavanDbHaghighi.dbo.AdvertisementDetails.BuildingLifeId,
        //	                            MelkavanDbHaghighi.dbo.AdvertisementDetails.Foundation,
        //                                MelkavanDbHaghighi.dbo.AdvertisementDetails.Participable as Participable,
        //                                MelkavanDbHaghighi.dbo.AdvertisementDetails.Exchangeable as Exchangeable

        //                        	from {1} 

        //                        	left join MelkavanDbHaghighi.dbo.AdvertisementOwners on Advertisement.AdvertisementId = MelkavanDbHaghighi.dbo.AdvertisementOwners.AdvertisementId 
        //                        	inner join MelkavanDbHaghighi.dbo.AdvertisementAddress on Advertisement.AdvertisementId = MelkavanDbHaghighi.dbo.AdvertisementAddress.AdvertisementId 
        //                            inner join MelkavanDbHaghighi.dbo.AdvertisementDetails on Advertisement.AdvertisementId = MelkavanDbHaghighi.dbo.AdvertisementDetails.AdvertisementId                                	    
        //                                    {joinMelkavanFeatureValues}
        //                                    {0} {strMelkavanFeatureWhereClause} {strMelkavanDescriptionWhereClause} {strMelkavanLocationWhereClause}

        //                        			) as tmp 
        //                        	order by CreateEnDate desc  ";
        //                }
        //            }
        //            else
        //            if ((platform.Count > 1) || (platform.Count.Equals(0))) // هردو هم داخلی هم ملکاوان
        //            {
        //                sp = @"


        //                    select distinct * from (select 'Advertisement' RecordType,
        //                    		MelkavanDbHaghighi.dbo.Advertisement.AdvertisementId, 
        //                            0 CountOfMaps,
        //                            0 CountOfDocs,
        //                            0 CountOfMedia ,
        //                            0 CountOfPrices ,
        //                            '' PropertyTypeTilte,
        //                            '' TypeUseTitle,
        //                            '' DocumentTypeTitle ,
        //                            '' DocumentOwnershipTypeTitle ,
        //                            '' DocumentRootTypeTitle ,
        //                            '' StateName,
        //                            '' CityName,
        //                            '' ZoneName,
        //                            '' DistrictName ,
        //                            '' UserCreatorName, 
        //                            '' ConsultantName,
        //                            ''AdvertiserName,
        //                            MelkavanDbHaghighi.dbo.Advertisement.IsActivated,
        //	                        MelkavanDbHaghighi.dbo.Advertisement.IsDeleted,
        //                            MelkavanDbHaghighi.dbo.Advertisement.ConsultantUserId,
        //                            MelkavanDbHaghighi.dbo.Advertisement.AdvertiserId,
        //                            MelkavanDbHaghighi.dbo.Advertisement.EditEnDate,
        //                            MelkavanDbHaghighi.dbo.Advertisement.RebuiltInYearFa,
        //                            MelkavanDbHaghighi.dbo.Advertisement.CreateEnDate, 
        //                    		MelkavanDbHaghighi.dbo.Advertisement.PropertyTypeId, 
        //                    		MelkavanDbHaghighi.dbo.Advertisement.TypeOfUseId, 
        //                    		MelkavanDbHaghighi.dbo.Advertisement.DocumentOwnershipTypeId, 
        //                    		MelkavanDbHaghighi.dbo.Advertisement.DocumentTypeId, 
        //                    		MelkavanDbHaghighi.dbo.Advertisement.DocumentRootTypeId, 
        //                    		MelkavanDbHaghighi.dbo.Advertisement.AdvertisementTitle, 
        //                    		MelkavanDbHaghighi.dbo.Advertisement.Area, 
        //                    		MelkavanDbHaghighi.dbo.Advertisement.AdvertisementDescriptions, 
        //                    		MelkavanDbHaghighi.dbo.Advertisement.UserIdCreator,
        //                    		'1' ShowInMelkavan,
        //                    		MelkavanDbHaghighi.dbo.AdvertisementOwners.OwnerId as OwnerId,
        //                    		MelkavanDbHaghighi.dbo.AdvertisementAddress.CountryId,
        //                    		MelkavanDbHaghighi.dbo.AdvertisementAddress.StateId,
        //                    		MelkavanDbHaghighi.dbo.AdvertisementAddress.CityId,
        //                    		MelkavanDbHaghighi.dbo.AdvertisementAddress.ZoneId,
        //                    		MelkavanDbHaghighi.dbo.AdvertisementAddress.DistrictId, 
        //                            MelkavanDbHaghighi.dbo.AdvertisementDetails.BuildingLifeId,
        //	                        MelkavanDbHaghighi.dbo.AdvertisementDetails.Foundation,
        //                            MelkavanDbHaghighi.dbo.AdvertisementDetails.Participable as  Participable,
        //                            MelkavanDbHaghighi.dbo.AdvertisementDetails.Exchangeable as Exchangeable,
        //                            MelkavanDbHaghighi.dbo.AdvertisementDetails.SecondAdvertisementDescriptions

        //                    	from {1} 
        //                    	left join MelkavanDbHaghighi.dbo.AdvertisementOwners on Advertisement.AdvertisementId = MelkavanDbHaghighi.dbo.AdvertisementOwners.AdvertisementId 
        //                    	inner join MelkavanDbHaghighi.dbo.AdvertisementAddress on Advertisement.AdvertisementId = MelkavanDbHaghighi.dbo.AdvertisementAddress.AdvertisementId 
        //                        inner join MelkavanDbHaghighi.dbo.AdvertisementDetails on Advertisement.AdvertisementId = MelkavanDbHaghighi.dbo.AdvertisementDetails.AdvertisementId

        //                         {joinMelkavanFeatureValues}

        //                         {0} {strMelkavanFeatureWhereClause} {strMelkavanDescriptionWhereClause} {strMelkavanLocationWhereClause} 

        //                    	union all 
        //                    	select 'Properties' RecordType,
        //                    		TeniacoDbHaghighi.dbo.Properties.PropertyId as AdvertisementId, 
        //                            0 CountOfMaps,
        //                            0 CountOfDocs,
        //                            0 CountOfMedia ,
        //                            0 CountOfPrices ,
        //                            '' PropertyTypeTilte,
        //                            '' TypeUseTitle,
        //                            '' DocumentTypeTitle ,
        //                            '' DocumentOwnershipTypeTitle ,
        //                            '' DocumentRootTypeTitle ,
        //                            '' StateName,
        //                            '' CityName,
        //                            '' ZoneName,
        //                            '' DistrictName,
        //                            '' UserCreatorName,
        //                            '' ConsultantName,
        //                            ''AdvertiserName,
        //                            TeniacoDbHaghighi.dbo.Properties.IsActivated,
        //                            TeniacoDbHaghighi.dbo.Properties.IsDeleted,
        //                            TeniacoDbHaghighi.dbo.Properties.ConsultantUserId,
        //                            TeniacoDbHaghighi.dbo.Properties.AdvertiserId,
        //                            TeniacoDbHaghighi.dbo.Properties.EditEnDate,
        //                            TeniacoDbHaghighi.dbo.Properties.RebuiltInYearFa,
        //	                        TeniacoDbHaghighi.dbo.Properties.CreateEnDate, 
        //                    		TeniacoDbHaghighi.dbo.Properties.PropertyTypeId, 
        //                    		TeniacoDbHaghighi.dbo.Properties.TypeOfUseId, 
        //                    		TeniacoDbHaghighi.dbo.Properties.DocumentOwnershipTypeId, 
        //                    		TeniacoDbHaghighi.dbo.Properties.DocumentTypeId, 
        //                    		TeniacoDbHaghighi.dbo.Properties.DocumentRootTypeId, 
        //                    		TeniacoDbHaghighi.dbo.Properties.PropertyCodeName as AdvertisementTitle, 
        //                    		TeniacoDbHaghighi.dbo.Properties.Area, 
        //                    		TeniacoDbHaghighi.dbo.Properties.PropertyDescriptions as AdvertisementDescriptions, 
        //                    		TeniacoDbHaghighi.dbo.Properties.UserIdCreator,
        //                    		TeniacoDbHaghighi.dbo.Properties.ShowInMelkavan,
        //                    		TeniacoDbHaghighi.dbo.PropertyOwners.OwnerId,
        //                    		TeniacoDbHaghighi.dbo.PropertyAddress.CountryId,
        //                    		TeniacoDbHaghighi.dbo.PropertyAddress.StateId,
        //                    		TeniacoDbHaghighi.dbo.PropertyAddress.CityId,
        //                    		TeniacoDbHaghighi.dbo.PropertyAddress.ZoneId,
        //                    		TeniacoDbHaghighi.dbo.PropertyAddress.DistrictId, 
        //                            TeniacoDbHaghighi.dbo.PropertiesDetails.BuildingLifeId,
        //	                        TeniacoDbHaghighi.dbo.PropertiesDetails.Foundation,
        //                            TeniacoDbHaghighi.dbo.PropertiesDetails.Participable as  Participable,
        //                            TeniacoDbHaghighi.dbo.PropertiesDetails.Exchangeable as  Exchangeable,
        //                            TeniacoDbHaghighi.dbo.PropertiesDetails.SecondPropertyDescriptions

        //                    	from {2} 
        //                    	left join TeniacoDbHaghighi.dbo.PropertyOwners on Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertyOwners.PropertyId 
        //                    	inner join TeniacoDbHaghighi.dbo.PropertyAddress on Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertyAddress.PropertyId 
        //                        inner join TeniacoDbHaghighi.dbo.PropertiesDetails on Properties.PropertyId = TeniacoDbHaghighi.dbo.PropertiesDetails.PropertyId                                

        //                        {joinTeniacoFeatureValues}

        //                        {3} {strTeniacoFeatureWhereClause} {strTeniacoDescriptionWhereClause} {strTeniacoLocationWhereClause} 

        //                    			) as tmp 
        //                    	order by CreateEnDate desc  ";
        //            }
        //        }



        //        #region where clause

        //        string priceWhereClause = " where ";
        //        string strMelkavanPrice = " MelkavanDbHaghighi.dbo.Advertisement ";
        //        string strTeniacoPrice = " TeniacoDbHaghighi.dbo.Properties ";


        //        #region Price
        //        if (slcPrice.HasValue)
        //        {
        //            if (slcPrice.Value > 0)
        //            {
        //                strMelkavanPrice = @" (
        //            		select AdvertisementId,  MAX(AdvertisementPriceHistoryId) as AdvertisementPriceHistoryId from MelkavanDbHaghighi.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories 
        //            			{0} 
        //            		    group by AdvertisementId ) tmpAdvertisementPricesHistories 
        //            	        inner join MelkavanDbHaghighi.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId 
        //            	        inner join MelkavanDbHaghighi.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.AdvertisementPriceHistoryId = MelkavanDbHaghighi.dbo.AdvertisementPricesHistories.AdvertisementPriceHistoryId ";

        //                strTeniacoPrice = @" (
        //            		select PropertyId,  MAX(PropertyPriceHistoryId) as AdvertisementPriceHistoryId from TeniacoDbHaghighi.dbo.PropertiesPricesHistories tmpAdvertisementPricesHistories 
        //            			{0} 
        //            		group by PropertyId) tmpAdvertisementPricesHistories 
        //            	    inner join TeniacoDbHaghighi.dbo.Properties on Properties.PropertyId = tmpAdvertisementPricesHistories.PropertyId 
        //            	    inner join TeniacoDbHaghighi.dbo.PropertiesPricesHistories on tmpAdvertisementPricesHistories.AdvertisementPriceHistoryId = TeniacoDbHaghighi.dbo.PropertiesPricesHistories.PropertyPriceHistoryId ";
        //            }

        //            if (priceFrom.HasValue && priceTo.HasValue)
        //                priceWhereClause += @" ((OfferPriceType = 0 and CAST(CalculatedOfferPrice AS bigint) >= " + priceFrom.Value.ToString() +
        //                                    @") and (OfferPriceType = 0 and CAST(CalculatedOfferPrice AS bigint)  <= " + priceTo.Value.ToString() + @")) or 
        //                           ((OfferPriceType = 1 and CAST(OfferPrice AS bigint) >= " + priceFrom + ") and (OfferPriceType = 1 and CAST(OfferPrice AS bigint) <= " + priceTo.Value.ToString() + ")) ";
        //            else
        //            if (priceFrom.HasValue && !priceTo.HasValue)
        //            {
        //                priceWhereClause += @" (OfferPriceType = 0 and CAST(CalculatedOfferPrice AS bigint) >= " + priceFrom.Value.ToString() + @") or
        //               (OfferPriceType = 1 and CAST(OfferPrice AS bigint) >= " + priceFrom + ") ";
        //            }
        //            else
        //            if (!priceFrom.HasValue && priceTo.HasValue)
        //            {
        //                priceWhereClause += @" (OfferPriceType = 0 and CAST(CalculatedOfferPrice AS bigint) <= " + priceTo.Value.ToString() +
        //                    @") or
        //               (OfferPriceType = 1 and CAST(OfferPrice AS bigint) <= " + priceTo + ") ";
        //            }

        //            strMelkavanPrice = string.Format(strMelkavanPrice, priceWhereClause);
        //            strTeniacoPrice = string.Format(strTeniacoPrice, priceWhereClause);
        //        }
        //        #endregion

        //        #region Area

        //        string whereClause = " where ";
        //        if (slcArea.HasValue)
        //        {
        //            if (areaFrom.HasValue)
        //                if (areaFrom.Value > 0)
        //                {
        //                    whereClause += " CAST(Area AS float) >= " + areaFrom.Value.ToString() + " ";
        //                }


        //            if (areaTo.HasValue)
        //            {
        //                if (areaTo.Value > 0)
        //                {
        //                    if (!string.IsNullOrEmpty(whereClause))
        //                        whereClause += " and CAST(Area AS float) <= " + areaTo.Value.ToString() + " ";
        //                    else
        //                        whereClause += " CAST(Area AS float) <= " + areaTo.Value.ToString() + " ";
        //                }

        //            }
        //        }
        //        #endregion

        //        #region PropertyType
        //        //نوع ملک

        //        if (propertyTypeId.HasValue)
        //        {

        //            if (propertyTypeId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " PropertyTypeId = " + propertyTypeId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and PropertyTypeId = " + propertyTypeId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " PropertyTypeId = " + propertyTypeId.Value.ToString();
        //                }

        //            }

        //        }
        //        #endregion

        //        #region TypeOfUse
        //        //نوع کاربری

        //        if (typeOfUseId.HasValue)
        //        {
        //            if (typeOfUseId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " TypeOfUseId = " + typeOfUseId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and TypeOfUseId = " + typeOfUseId.Value.ToString();
        //                    }

        //                }
        //                else
        //                {
        //                    whereClause += " TypeOfUseId = " + typeOfUseId.Value.ToString();
        //                }

        //            }
        //        }

        //        #endregion

        //        #region DocumentOwnerShip
        //        //نوع مالکیت سند
        //        if (documentOwnershipTypeId.HasValue)
        //        {
        //            if (documentOwnershipTypeId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " DocumentOwnershipTypeId = " + documentOwnershipTypeId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and DocumentOwnershipTypeId = " + documentOwnershipTypeId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " DocumentOwnershipTypeId = " + documentOwnershipTypeId.Value.ToString();
        //                }

        //            }
        //        }

        //        #endregion

        //        #region DocumentType
        //        //نوع سند
        //        if (documentTypeId.HasValue)
        //        {
        //            if (documentTypeId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " DocumentTypeId = " + documentTypeId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and DocumentTypeId = " + documentTypeId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " DocumentTypeId = " + documentTypeId.Value.ToString();
        //                }

        //            }
        //        }

        //        #endregion

        //        #region DocumentRootType
        //        //نوع ریشه سند

        //        if (documentRootTypeId.HasValue)
        //        {
        //            if (documentRootTypeId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " DocumentRootTypeId = " + documentRootTypeId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and DocumentRootTypeId = " + documentRootTypeId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " DocumentRootTypeId = " + documentRootTypeId.Value.ToString();
        //                }

        //            }
        //        }
        //        #endregion

        //        #region PropertyCodeName
        //        //کد اختصاصی
        //        //if (!string.IsNullOrEmpty(propertyCodeName))
        //        //{
        //        //    if (!string.IsNullOrEmpty(propertyCodeName))
        //        //        whereClause += " and AdvertisementTitle like N'%" + propertyCodeName + "%' ";
        //        //    else
        //        //        whereClause += " AdvertisementTitle like N'%" + propertyCodeName + "%' ";
        //        //}
        //        #endregion


        //        #region PropertyCodeName
        //        //کد اختصاصی
        //        if (!string.IsNullOrEmpty(propertyCodeName))
        //        {

        //            if (!string.IsNullOrEmpty(whereClause))
        //            {
        //                if (whereClause.Equals(" where "))
        //                {
        //                    whereClause += " AdvertisementTitle like N'%" + propertyCodeName + "%' ";
        //                }
        //                else
        //                {
        //                    whereClause += " and AdvertisementTitle like N'%" + propertyCodeName + "%' ";
        //                }
        //            }
        //            else
        //            {
        //                whereClause += " AdvertisementTitle like N'%" + propertyCodeName + "%' ";
        //            }


        //        }
        //        #endregion

        //        #region OwnerId
        //        //مالک (اشخاص(
        //        if (OwnerId.HasValue)
        //        {
        //            if (OwnerId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " OwnerId = " + OwnerId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and OwnerId = " + OwnerId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " OwnerId = " + OwnerId.Value.ToString();
        //                }

        //            }
        //        }
        //        #endregion

        //        #region InvestorId
        //        //مالک (سرمایه گذار)
        //        if (InvestorId.HasValue)
        //        {
        //            if (InvestorId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " OwnerId = " + InvestorId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and OwnerId = " + InvestorId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " OwnerId = " + InvestorId.Value.ToString();
        //                }

        //            }
        //        }
        //        #endregion

        //        #region AdvertiserId
        //        //آگهی دهنده
        //        if (AdvertiserId.HasValue)
        //        {
        //            if (AdvertiserId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " AdvertiserId = " + AdvertiserId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and AdvertiserId = " + AdvertiserId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " AdvertiserId = " + AdvertiserId.Value.ToString();
        //                }

        //            }
        //        }
        //        #endregion

        //        #region ConsultantUserId
        //        //مشاور

        //        if (consultantUserId.HasValue)
        //        {
        //            if (consultantUserId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " ConsultantUserId = " + consultantUserId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and ConsultantUserId = " + consultantUserId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " ConsultantUserId = " + consultantUserId.Value.ToString();
        //                }

        //            }
        //        }
        //        #endregion

        //        #region Features and Description
        //        //امکانات و توضیحات


        //        int counter = 0;

        //        string strMelkavanFeatureWhereClause = "";
        //        string strTeniacoFeatureWhereClause = "";


        //        string joinTeniacoFeatureValues = "";
        //        string joinMelkavanFeatureValues = "";

        //        string strMelkavanDescriptionWhereClause = "";
        //        string strTeniacoDescriptionWhereClause = "";

        //        if (string.IsNullOrEmpty(featuresAndDesc))
        //        {


        //            if (features != null)
        //            {

        //                if (features.Count > 0)
        //                {
        //                    joinTeniacoFeatureValues += @" inner join TeniacoDbHaghighi.dbo.FeaturesValues on Properties.PropertyId = TeniacoDbHaghighi.dbo.FeaturesValues.PropertyId";
        //                    joinMelkavanFeatureValues = @"inner join MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues on Advertisement.AdvertisementId = MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues.AdvertisementId ";


        //                    foreach (var item in features)
        //                    {

        //                        if (counter.Equals(0))
        //                        {
        //                            strMelkavanFeatureWhereClause +=
        //                               "(MelkavanDbHaghighi.dbo.Advertisement.AdvertisementId in (select distinct AdvertisementId from MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues where AdvertisementId in " +
        //                               "(select AdvertisementId from MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues where FeatureValue like N'%" + item.Value + "%' and FeatureId = " + item.Key + ")))";


        //                        }
        //                        else
        //                        {

        //                            strMelkavanFeatureWhereClause +=
        //                                "and (MelkavanDbHaghighi.dbo.Advertisement.AdvertisementId in (select distinct AdvertisementId from MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues where AdvertisementId in " +
        //                                "(select AdvertisementId from MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues where FeatureValue like N'%" + item.Value + "%' and FeatureId = " + item.Key + ")))";



        //                        }

        //                        counter++;
        //                    }



        //                    strTeniacoFeatureWhereClause = strMelkavanFeatureWhereClause.Replace("MelkavanDbHaghighi.dbo.Advertisement.AdvertisementId", "TeniacoDbHaghighi.dbo.Properties.PropertyId ")
        //                   .Replace("MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues", "TeniacoDbHaghighi.dbo.FeaturesValues").Replace("AdvertisementId", "PropertyId");



        //                    joinTeniacoFeatureValues = string.Format(joinTeniacoFeatureValues, strTeniacoFeatureWhereClause, strTeniacoDescriptionWhereClause);
        //                    joinMelkavanFeatureValues = string.Format(joinMelkavanFeatureValues, strMelkavanFeatureWhereClause, strMelkavanDescriptionWhereClause);
        //                }

        //            }

        //        }
        //        else
        //        {
        //            string[] tmpFeature = featuresAndDesc.Split("-");

        //            joinTeniacoFeatureValues += @"inner join TeniacoDbHaghighi.dbo.FeaturesValues on Properties.PropertyId = TeniacoDbHaghighi.dbo.FeaturesValues.PropertyId " +
        //                "INNER JOIN TeniacoDbHaghighi.dbo.Features ON FeaturesValues.FeatureId = Features.FeatureId " +
        //                "INNER JOIN TeniacoDbHaghighi.dbo.FeaturesCategories ON Features.FeatureCategoryId = FeaturesCategories.FeatureCategoryId";


        //            joinMelkavanFeatureValues = @"inner join MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues on Advertisement.AdvertisementId = MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues.AdvertisementId " +
        //                "INNER JOIN TeniacoDbHaghighi.dbo.Features ON AdvertisementFeaturesValues.FeatureId = Features.FeatureId " +
        //                "INNER JOIN TeniacoDbHaghighi.dbo.FeaturesCategories ON Features.FeatureCategoryId = FeaturesCategories.FeatureCategoryId";


        //            foreach (var item in tmpFeature)
        //            {
        //                if (counter.Equals(0))
        //                {
        //                    strMelkavanFeatureWhereClause +=
        //                        "Advertisement.AdvertisementId IN \r\n    (SELECT DISTINCT AdvertisementId \r\n     FROM MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues\r\n     CROSS APPLY STRING_SPLIT(MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues.FeatureValue, ',') AS SplitValues\r\n     INNER JOIN TeniacoDbHaghighi.dbo.FeaturesOptions\r\n        ON TeniacoDbHaghighi.dbo.FeaturesOptions.FeatureId = MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues.FeatureId \r\n        AND TeniacoDbHaghighi.dbo.FeaturesOptions.FeatureOptionValue = SplitValues.value\r\n     WHERE TeniacoDbHaghighi.dbo.FeaturesOptions.FeatureOptionText LIKE N'%" + item + "%')\r\n    OR AdvertisementDescriptions LIKE N'%" + item + "%'\r\n    OR FeatureCategoryTitle LIKE N'%" + item + "%'\r\n    OR FeatureTitle LIKE N'%" + item + "%'";

        //                    //strMelkavanDescriptionWhereClause += "or MelkavanDbHaghighi.dbo.Advertisement.AdvertisementDescriptions like '%" + item + "%'";
        //                }
        //                else
        //                {
        //                    strMelkavanFeatureWhereClause +=
        //                        "or (Advertisement.AdvertisementId IN \r\n    (SELECT DISTINCT AdvertisementId \r\n     FROM MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues\r\n     CROSS APPLY STRING_SPLIT(MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues.FeatureValue, ',') AS SplitValues\r\n     INNER JOIN TeniacoDbHaghighi.dbo.FeaturesOptions\r\n        ON TeniacoDbHaghighi.dbo.FeaturesOptions.FeatureId = MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues.FeatureId \r\n        AND TeniacoDbHaghighi.dbo.FeaturesOptions.FeatureOptionValue = SplitValues.value\r\n     WHERE TeniacoDbHaghighi.dbo.FeaturesOptions.FeatureOptionText LIKE N'%" + item + "%'))\r\n       OR AdvertisementDescriptions LIKE N'%" + item + "%'\r\n       OR FeatureCategoryTitle LIKE N'%" + item + "%'\r\n OR FeatureTitle LIKE N'%" + item + "%'";

        //                    //strMelkavanDescriptionWhereClause += "or MelkavanDbHaghighi.dbo.Advertisement.AdvertisementDescriptions like '%" + item + "%'";
        //                }

        //                counter++;
        //            }

        //            strTeniacoFeatureWhereClause = strMelkavanFeatureWhereClause.Replace("Advertisement.AdvertisementId", "Properties.PropertyId")
        //                .Replace("MelkavanDbHaghighi.dbo.AdvertisementFeaturesValues", "TeniacoDbHaghighi.dbo.FeaturesValues").Replace("AdvertisementId", "PropertyId").Replace("AdvertisementDescriptions", "PropertyDescriptions");



        //            // strTeniacoDescriptionWhereClause = strMelkavanDescriptionWhereClause.Replace("MelkavanDbHaghighi.dbo.Advertisement.AdvertisementDescriptions", "TeniacoDbHaghighi.dbo.Properties.PropertyDescriptions");

        //            joinTeniacoFeatureValues = string.Format(joinTeniacoFeatureValues, strTeniacoFeatureWhereClause);
        //            joinMelkavanFeatureValues = string.Format(joinMelkavanFeatureValues, strMelkavanFeatureWhereClause);

        //        }

        //        #endregion

        //        #region Address
        //        //موقعیت
        //        //آدرس

        //        string strMelkavanLocationWhereClause = "";
        //        string strTeniacoLocationWhereClause = "";
        //        if (string.IsNullOrEmpty(address))
        //        {
        //            if (stateId.HasValue)
        //            {
        //                if (stateId.Value > 0)
        //                {
        //                    if (!string.IsNullOrEmpty(whereClause))
        //                    {
        //                        if (whereClause.Equals(" where "))
        //                        {
        //                            whereClause += " StateId = " + stateId.Value.ToString();
        //                        }
        //                        else
        //                        {
        //                            whereClause += " and StateId = " + stateId.Value.ToString();
        //                        }
        //                    }
        //                    else
        //                    {
        //                        whereClause += " StateId = " + stateId.Value.ToString();
        //                    }

        //                }

        //            }

        //            if (cityId.HasValue)
        //            {
        //                if (cityId.Value > 0)
        //                {
        //                    if (!string.IsNullOrEmpty(whereClause))
        //                    {
        //                        if (whereClause.Equals(" where "))
        //                        {
        //                            whereClause += " CityId = " + cityId.Value.ToString();
        //                        }
        //                        else
        //                        {
        //                            whereClause += " and CityId = " + cityId.Value.ToString();
        //                        }
        //                    }
        //                    else
        //                    {
        //                        whereClause += " CityId = " + cityId.Value.ToString();
        //                    }

        //                }

        //            }

        //            if (zoneId.HasValue)
        //            {
        //                if (zoneId.Value > 0)
        //                {
        //                    if (!string.IsNullOrEmpty(whereClause))
        //                    {
        //                        if (whereClause.Equals(" where "))
        //                        {
        //                            whereClause += " ZoneId = " + zoneId.Value.ToString();
        //                        }
        //                        else
        //                        {
        //                            whereClause += " and ZoneId = " + zoneId.Value.ToString();
        //                        }

        //                    }
        //                    else
        //                    {
        //                        whereClause += " ZoneId = " + zoneId.Value.ToString();
        //                    }

        //                }

        //            }

        //            if (districtId.HasValue)
        //            {
        //                if (districtId.Value > 0)
        //                {
        //                    if (!string.IsNullOrEmpty(whereClause))
        //                    {
        //                        if (whereClause.Equals(" where "))
        //                        {
        //                            whereClause += " DistrictId = " + districtId.Value.ToString();
        //                        }
        //                        else
        //                        {
        //                            whereClause += " and DistrictId = " + districtId.Value.ToString();
        //                        }
        //                    }
        //                    else
        //                    {
        //                        whereClause += " DistrictId = " + districtId.Value.ToString();
        //                    }

        //                }
        //            }

        //        }
        //        else
        //        {
        //            string[] tmpAddress = address.Split("-");



        //            foreach (var item in tmpAddress)
        //            {
        //                if (counter.Equals(0))
        //                {

        //                    strMelkavanLocationWhereClause += "(MelkavanDbHaghighi.dbo.AdvertisementAddress.StateId in (select StateId from PublicDb.dbo.States where StateName like N'%" + item + "%') or " +
        //                                    "MelkavanDbHaghighi.dbo.AdvertisementAddress.CityId in (select CityId from PublicDb.dbo.Cities where CityName like N'%" + item + "%') or " +
        //                                    "MelkavanDbHaghighi.dbo.AdvertisementAddress.ZoneId in (select ZoneId from PublicDb.dbo.Zones where ZoneName like N'%" + item + "%') or " +
        //                                    "MelkavanDbHaghighi.dbo.AdvertisementAddress.DistrictId in(select DistrictId from PublicDb.dbo.Districts where DistrictName like N'%" + item + "%'))";

        //                }
        //                else
        //                {
        //                    strMelkavanLocationWhereClause += "and (MelkavanDbHaghighi.dbo.AdvertisementAddress.StateId in (select StateId from PublicDb.dbo.States where StateName like N'%" + item + "%') or " +
        //                               "MelkavanDbHaghighi.dbo.AdvertisementAddress.CityId in (select CityId from PublicDb.dbo.Cities where CityName like N'%" + item + "%') or " +
        //                               "MelkavanDbHaghighi.dbo.AdvertisementAddress.ZoneId in (select ZoneId from PublicDb.dbo.Zones where ZoneName like N'%" + item + "%') or " +
        //                               "MelkavanDbHaghighi.dbo.AdvertisementAddress.DistrictId in(select DistrictId from PublicDb.dbo.Districts where DistrictName like N'%" + item + "%'))";


        //                }


        //                counter++;
        //            }

        //            strTeniacoLocationWhereClause = strMelkavanLocationWhereClause.Replace("MelkavanDbHaghighi.dbo.AdvertisementAddress", "TeniacoDbHaghighi.dbo.PropertyAddress");
        //        }




        //        if (whereClause.Equals(" where "))
        //        {


        //            if (string.IsNullOrEmpty(strMelkavanLocationWhereClause) && string.IsNullOrEmpty(strTeniacoLocationWhereClause)
        //                    && string.IsNullOrEmpty(strMelkavanFeatureWhereClause) && string.IsNullOrEmpty(strTeniacoFeatureWhereClause) && string.IsNullOrEmpty(strMelkavanDescriptionWhereClause) &&
        //                    string.IsNullOrEmpty(strTeniacoDescriptionWhereClause))
        //            {
        //                whereClause = "";
        //            }

        //        }
        //        else
        //        {
        //            if (!whereClause.Equals(" where "))
        //            {
        //                if (!string.IsNullOrEmpty(strMelkavanLocationWhereClause))
        //                    strMelkavanLocationWhereClause = " and " + strMelkavanLocationWhereClause;

        //                if (!string.IsNullOrEmpty(strTeniacoLocationWhereClause))
        //                    strTeniacoLocationWhereClause = " and " + strTeniacoLocationWhereClause;


        //                if (!string.IsNullOrEmpty(strMelkavanFeatureWhereClause))
        //                    strMelkavanFeatureWhereClause = " and " + strMelkavanFeatureWhereClause;

        //                if (!string.IsNullOrEmpty(strTeniacoFeatureWhereClause))
        //                    strTeniacoFeatureWhereClause = " and " + strTeniacoFeatureWhereClause;


        //                //if (!string.IsNullOrEmpty(strTeniacoDescriptionWhereClause))
        //                //    strTeniacoDescriptionWhereClause = " and " + strTeniacoDescriptionWhereClause;
        //            }
        //        }

        //        #endregion

        //        #region Participable

        //        //قابل مشارکت
        //        if (Participable != null)
        //        {
        //            if (!Participable.Equals(false))
        //            {
        //                if (whereClause.Equals(" where "))
        //                {
        //                    whereClause += " Participable =  'true' ";
        //                }
        //                else
        //                {
        //                    whereClause += " and Participable = 'true' ";
        //                }
        //            }


        //        }


        //        #endregion

        //        #region Exchangeable

        //        //قابل معاوضه
        //        if (Exchangeable != null)
        //        {
        //            if (!Exchangeable.Equals(false))
        //            {
        //                if (whereClause.Equals(" where "))
        //                {
        //                    whereClause += " Exchangeable = 'true' ";
        //                }
        //                else
        //                {
        //                    whereClause += " and Exchangeable =  'true' ";
        //                }
        //            }


        //        }


        //        #endregion


        //        #endregion

        //        if (platform != null)
        //        {
        //            if (platform.Count == 1)
        //            {
        //                if (platform.FirstOrDefault().Equals(1))//داخلی
        //                {
        //                    if (!string.IsNullOrEmpty(joinTeniacoFeatureValues))
        //                    {
        //                        sp = sp.Replace("{joinTeniacoFeatureValues}", joinTeniacoFeatureValues);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{joinTeniacoFeatureValues}", "");
        //                    }


        //                    if (!string.IsNullOrEmpty(strTeniacoFeatureWhereClause))
        //                    {
        //                        sp = sp.Replace("{strTeniacoFeatureWhereClause}", strTeniacoFeatureWhereClause);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{strTeniacoFeatureWhereClause}", "");
        //                    }

        //                    if (!string.IsNullOrEmpty(strTeniacoDescriptionWhereClause))
        //                    {
        //                        sp = sp.Replace("{strTeniacoDescriptionWhereClause}", strTeniacoDescriptionWhereClause);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{strTeniacoDescriptionWhereClause}", "");
        //                    }


        //                    if (!string.IsNullOrEmpty(strTeniacoLocationWhereClause))
        //                    {
        //                        sp = sp.Replace("{strTeniacoLocationWhereClause}", strTeniacoLocationWhereClause);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{strTeniacoLocationWhereClause}", "");
        //                    }


        //                    sp = string.Format(sp, whereClause, strTeniacoPrice, whereClause.Replace("AdvertisementTitle", "PropertyCodeName").Replace("AdvertisementDescriptions", "PropertyDescriptions"));


        //                }
        //                else
        //                    if (platform.FirstOrDefault().Equals(0))//ملکاوان
        //                {

        //                    if (!string.IsNullOrEmpty(joinMelkavanFeatureValues))
        //                    {
        //                        sp = sp.Replace("{joinMelkavanFeatureValues}", joinMelkavanFeatureValues);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{joinMelkavanFeatureValues}", "");
        //                    }


        //                    if (!string.IsNullOrEmpty(strMelkavanFeatureWhereClause))
        //                    {
        //                        sp = sp.Replace("{strMelkavanFeatureWhereClause}", strMelkavanFeatureWhereClause);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{strMelkavanFeatureWhereClause}", "");
        //                    }


        //                    if (!string.IsNullOrEmpty(strMelkavanDescriptionWhereClause))
        //                    {
        //                        sp = sp.Replace("{strMelkavanDescriptionWhereClause}", strMelkavanDescriptionWhereClause);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{strMelkavanDescriptionWhereClause}", "");
        //                    }

        //                    if (!string.IsNullOrEmpty(strMelkavanLocationWhereClause))
        //                    {
        //                        sp = sp.Replace("{strMelkavanLocationWhereClause}", strMelkavanLocationWhereClause);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{strMelkavanLocationWhereClause}", "");
        //                    }


        //                    sp = string.Format(sp, whereClause, strMelkavanPrice, whereClause.Replace("AdvertisementTitle", "PropertyCodeName").Replace("AdvertisementDescriptions", "PropertyDescriptions"));

        //                }
        //            }
        //            else
        //            if ((platform.Count > 1) || (platform.Count.Equals(0))) //هردو هم داخلی هم ملکاوان
        //            {

        //                if (!string.IsNullOrEmpty(joinTeniacoFeatureValues) || !string.IsNullOrEmpty(joinMelkavanFeatureValues))
        //                {
        //                    sp = sp.Replace("{joinTeniacoFeatureValues}", joinTeniacoFeatureValues).Replace("{joinMelkavanFeatureValues}", joinMelkavanFeatureValues);
        //                }
        //                else
        //                {
        //                    sp = sp.Replace("{joinTeniacoFeatureValues}", "").Replace("{joinMelkavanFeatureValues}", "");
        //                }



        //                if (!string.IsNullOrEmpty(strMelkavanFeatureWhereClause) || !string.IsNullOrEmpty(strTeniacoFeatureWhereClause))
        //                {
        //                    sp = sp.Replace("{strMelkavanFeatureWhereClause}", strMelkavanFeatureWhereClause).Replace("{strTeniacoFeatureWhereClause}", strTeniacoFeatureWhereClause);
        //                }
        //                else
        //                {
        //                    sp = sp.Replace("{strMelkavanFeatureWhereClause}", "").Replace("{strTeniacoFeatureWhereClause}", "");
        //                }



        //                if (!string.IsNullOrEmpty(strMelkavanDescriptionWhereClause) || !string.IsNullOrEmpty(strTeniacoDescriptionWhereClause))
        //                {
        //                    sp = sp.Replace("{strMelkavanDescriptionWhereClause}", strMelkavanDescriptionWhereClause).Replace("{strTeniacoDescriptionWhereClause}", strTeniacoDescriptionWhereClause);
        //                }
        //                else
        //                {
        //                    sp = sp.Replace("{strMelkavanDescriptionWhereClause}", "").Replace("{strTeniacoDescriptionWhereClause}", "");
        //                }


        //                if (!string.IsNullOrEmpty(strMelkavanLocationWhereClause) || !string.IsNullOrEmpty(strTeniacoLocationWhereClause))
        //                {
        //                    sp = sp.Replace("{strMelkavanLocationWhereClause}", strMelkavanLocationWhereClause).Replace("{strTeniacoLocationWhereClause}", strTeniacoLocationWhereClause);
        //                }
        //                else
        //                {
        //                    sp = sp.Replace("{strMelkavanLocationWhereClause}", "").Replace("{strTeniacoLocationWhereClause}", "");
        //                }

        //                sp = string.Format(sp, whereClause, strMelkavanPrice, strTeniacoPrice, whereClause.Replace("AdvertisementTitle", "PropertyCodeName").Replace("AdvertisementDescriptions", "PropertyDescriptions"));


        //                //sp = string.Format(sp, whereClause, strMelkavanPrice, strTeniacoPrice, whereClause.Replace("AdvertisementTitle", "PropertyCodeName").Replace("MelkavanDbHaghighi.dbo.Advertisement.AdvertisementDescriptions", "TeniacoDbHaghighi.dbo.Properties.PropertyDescriptions "));

        //            }
        //        }



        //        var list = teniacoApiDb.PropertiesAdvanceSearchVM.FromSqlRaw(sp).AsEnumerable().Distinct();

        //        #region load extra data

        //        #region ConsultatantUsers
        //        //اگر مشاور بود
        //        var levelNames = new List<string>();
        //        var user = consoleBusiness.CmsDb.Users.Where(c => c.UserId.Equals(ThisUserId)).FirstOrDefault();
        //        var ParentUserId = user.ParentUserId.Value;
        //        if (user != null)
        //        {
        //            if (user.UserId > 0)
        //            {
        //                var levelIds = consoleBusiness.CmsDb.UsersLevels.Where(c => c.UserId.Equals(user.UserId)).Select(c => c.LevelId).ToList();
        //                levelNames = consoleBusiness.CmsDb.Levels.Where(c => levelIds.Contains(c.LevelId)).Select(c => c.LevelName).ToList();
        //            }
        //        }

        //        #endregion

        //        #region ChildUsers
        //        if (platform.Count == 1)
        //        {
        //            if (platform.FirstOrDefault().Equals(1))//داخلی
        //            {
        //                #region ChildUsers
        //                if (childsUsersIds != null)
        //                {
        //                    if (childsUsersIds.Count > 1)
        //                    {
        //                        if (levelNames.Contains("مشاور"))
        //                        {
        //                            if (levelNames.Contains("مدیر املاک"))
        //                            {
        //                                //دیتاهایی که خودش و مشاورینش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                  c.ParentUserId.Equals(ThisUserId) ||
        //                                  c.UserIdCreator.Equals(ThisUserId) ||
        //                                  c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                           .Where(c => c.ConsultantUserId.HasValue)
        //                                           .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                           userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
        //                            {
        //                                //دیتاهایی که خودش و مشاورینش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                    c.ParentUserId.Equals(ThisUserId) ||
        //                                    c.UserIdCreator.Equals(ThisUserId) ||
        //                                    c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                            .Where(c => c.ConsultantUserId.HasValue)
        //                                            .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                            userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
        //                            {

        //                                //دیتاهایی که خودش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                    c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                          .Where(c => c.ConsultantUserId.HasValue)
        //                                          .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                          userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
        //                            {

        //                                //دیتاهایی که زیرگروهانش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                  c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                            .Where(c => c.ConsultantUserId.HasValue)
        //                                            .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                            userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
        //                            {
        //                                //دیتاهایی که والد آن زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است
        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                           .Where(c => c.ConsultantUserId.HasValue)
        //                                           .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                           userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                            }
        //                            else
        //                            {
        //                                //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                                //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                            }


        //                        }
        //                        else
        //                        {
        //                            list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                        }




        //                    }
        //                    else
        //                    {
        //                        if (childsUsersIds.Count == 1)
        //                        {
        //                            if (childsUsersIds.FirstOrDefault() > 0)
        //                            {

        //                                if (levelNames.Contains("مشاور"))
        //                                {
        //                                    if (levelNames.Contains("مدیر املاک"))
        //                                    {
        //                                        //دیتاهایی که خودش و مشاورینش زده است
        //                                        //دیتاهایی که خودش مشاور آن بوده است

        //                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                          c.ParentUserId.Equals(ThisUserId) ||
        //                                          c.UserIdCreator.Equals(ThisUserId) ||
        //                                          c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                        list = list.Where(c => c.UserIdCreator.HasValue)
        //                                           .Where(c => c.ConsultantUserId.HasValue)
        //                                           .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                           userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                    }
        //                                    else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
        //                                    {
        //                                        //دیتاهایی که خودش و مشاورینش زده است
        //                                        //دیتاهایی که خودش مشاور آن بوده است

        //                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                            c.ParentUserId.Equals(ThisUserId) ||
        //                                            c.UserIdCreator.Equals(ThisUserId) ||
        //                                            c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                        list = list.Where(c => c.UserIdCreator.HasValue)
        //                                          .Where(c => c.ConsultantUserId.HasValue)
        //                                          .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                          userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                    }
        //                                    else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
        //                                    {

        //                                        //دیتاهایی که خودش زده است
        //                                        //دیتاهایی که خودش مشاور آن بوده است

        //                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                            c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                        list = list.Where(c => c.UserIdCreator.HasValue)
        //                                          .Where(c => c.ConsultantUserId.HasValue)
        //                                          .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                          userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                    }
        //                                    else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
        //                                    {

        //                                        //دیتاهایی که زیرگروهانش زده است
        //                                        //دیتاهایی که خودش مشاور آن بوده است

        //                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                          c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);

        //                                        list = list.Where(c => c.UserIdCreator.HasValue)
        //                                         .Where(c => c.ConsultantUserId.HasValue)
        //                                         .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                         userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                    }
        //                                    else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
        //                                    {
        //                                        //دیتاهایی که والد آن زده است
        //                                        //دیتاهایی که خودش مشاور آن بوده است
        //                                        var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


        //                                        list = list.Where(c => c.UserIdCreator.HasValue)
        //                                            .Where(c => c.ConsultantUserId.HasValue)
        //                                            .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                            userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                                    }
        //                                    else
        //                                    {
        //                                        //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                                        //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                                        list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                                    }



        //                                }
        //                                else
        //                                {
        //                                    list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                                }
        //                            }

        //                        }
        //                        else if (childsUsersIds.Count == 0)
        //                        {

        //                            if (levelNames.Contains("مشاور"))
        //                            {
        //                                if (levelNames.Contains("مدیر املاک"))
        //                                {
        //                                    //دیتاهایی که خودش و مشاورینش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                      c.ParentUserId.Equals(ThisUserId) ||
        //                                      c.UserIdCreator.Equals(ThisUserId) ||
        //                                      c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                                  .Where(c => c.ConsultantUserId.HasValue)
        //                                                  .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                                  userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
        //                                {
        //                                    //دیتاهایی که خودش و مشاورینش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                        c.ParentUserId.Equals(ThisUserId) ||
        //                                        c.UserIdCreator.Equals(ThisUserId) ||
        //                                        c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                         .Where(c => c.ConsultantUserId.HasValue)
        //                                         .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                         userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
        //                                {

        //                                    //دیتاهایی که خودش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                        c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                         .Where(c => c.ConsultantUserId.HasValue)
        //                                         .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                         userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
        //                                {

        //                                    //دیتاهایی که زیرگروهانش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                      c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);

        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                         .Where(c => c.ConsultantUserId.HasValue)
        //                                         .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                         userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
        //                                {
        //                                    //دیتاهایی که والد آن زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است
        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                         .Where(c => c.ConsultantUserId.HasValue)
        //                                         .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                         userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                }
        //                                else
        //                                {
        //                                    //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                                    //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                                    list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                                }


        //                            }
        //                            else
        //                            {
        //                                list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                            }


        //                        }
        //                    }
        //                }
        //                #endregion

        //                #region ChildUsers - old 2
        //                //if (childsUsersIds != null)
        //                //{
        //                //    if (childsUsersIds.Count > 1)
        //                //    {

        //                //        if (levelNames.Contains("مشاور"))
        //                //        {
        //                //            var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //            //var listConsultatant = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).ToList();

        //                //            if (listOwner.Count() > 0)
        //                //            {
        //                //                //گاربر لاگین شده دیتا ثبت کرده است
        //                //                //دیتایی که مشاور آن است را لود میکند
        //                //                list = list.Where(p => p.ConsultantUserId == user.UserId || childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                //list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //            }
        //                //            else
        //                //            {
        //                //                //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                //                //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                //                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                //            }


        //                //        }
        //                //        else
        //                //        {
        //                //            list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //        }


        //                //    }
        //                //    else
        //                //    {
        //                //        if (childsUsersIds.Count == 1)
        //                //        {
        //                //            if (childsUsersIds.FirstOrDefault() > 0)
        //                //            {
        //                //                if (levelNames.Contains("مشاور"))
        //                //                {

        //                //                    var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                    if (listOwner.Count() > 0)
        //                //                    {
        //                //                        //گاربر لاگین شده دیتا ثبت کرده است
        //                //                        //دیتایی که مشاور آن است را لود میکند

        //                //                        list = list.Where(p => p.ConsultantUserId == user.UserId || childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                        //list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                        //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                    }
        //                //                    else
        //                //                    {
        //                //                        //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                //                        //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                //                        list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                //                    }


        //                //                }
        //                //                else
        //                //                {
        //                //                    list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                }

        //                //            }
        //                //        }
        //                //        else if (childsUsersIds.Count == 0)
        //                //        {
        //                //            if (levelNames.Contains("مشاور"))
        //                //            {
        //                //                var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                if (listOwner.Count() > 0)
        //                //                {
        //                //                    //گاربر لاگین شده دیتا ثبت کرده است
        //                //                    //دیتایی که مشاور آن است را لود میکند

        //                //                    list = list.Where(p => p.ConsultantUserId == user.UserId || childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                    //list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                    //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                }
        //                //                else
        //                //                {
        //                //                    //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                //                    //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                //                    list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                //                }


        //                //            }
        //                //            else
        //                //            {
        //                //                list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //            }
        //                //        }
        //                //    }
        //                //}
        //                #endregion

        //                #region ChildUsers - old
        //                //if (childsUsersIds != null)
        //                //{
        //                //    if (childsUsersIds.Count > 1)
        //                //    {

        //                //        if (levelNames.Contains("مشاور"))
        //                //        {
        //                //            var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //            if (listOwner.Count() > 0)
        //                //            {
        //                //                //گاربر لاگین شده دیتا ثبت کرده است
        //                //                //دیتایی که مشاور آن است را لود میکند
        //                //                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId) || childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //            }
        //                //            else
        //                //            {
        //                //                //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                //                //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                //                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                //            }


        //                //        }
        //                //        else
        //                //        {
        //                //            list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //        }


        //                //    }
        //                //    else
        //                //    {
        //                //        if (childsUsersIds.Count == 1)
        //                //        {
        //                //            if (childsUsersIds.FirstOrDefault() > 0)
        //                //            {
        //                //                if (levelNames.Contains("مشاور"))
        //                //                {
        //                //                    var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                    if (listOwner.Count() > 0)
        //                //                    {
        //                //                        //گاربر لاگین شده دیتا ثبت کرده است
        //                //                        //دیتایی که مشاور آن است را لود میکند

        //                //                        list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId) || childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                        //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                    }
        //                //                    else
        //                //                    {
        //                //                        //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                //                        //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                //                        list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                //                    }


        //                //                }
        //                //                else
        //                //                {
        //                //                    list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                }

        //                //            }
        //                //        }
        //                //    }
        //                //}
        //                #endregion

        //            }
        //        }
        //        else if ((platform.Count > 1) || (platform.Count.Equals(0)))  //هردو هم داخلی هم ملکاوان
        //        {

        //            #region ChildUsers
        //            if (childsUsersIds != null)
        //            {
        //                if (childsUsersIds.Count > 1)
        //                {
        //                    if (levelNames.Contains("مشاور"))
        //                    {
        //                        if (levelNames.Contains("مدیر املاک"))
        //                        {
        //                            //دیتاهایی که خودش و مشاورینش زده است
        //                            //دیتاهایی که خودش مشاور آن بوده است

        //                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                              c.ParentUserId.Equals(ThisUserId) ||
        //                              c.UserIdCreator.Equals(ThisUserId) ||
        //                              c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                            list = list.Where(c => c.UserIdCreator.HasValue)
        //                                       .Where(c => c.ConsultantUserId.HasValue)
        //                                       .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                       userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                        }
        //                        else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
        //                        {
        //                            //دیتاهایی که خودش و مشاورینش زده است
        //                            //دیتاهایی که خودش مشاور آن بوده است

        //                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                c.ParentUserId.Equals(ThisUserId) ||
        //                                c.UserIdCreator.Equals(ThisUserId) ||
        //                                c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                            list = list.Where(c => c.UserIdCreator.HasValue)
        //                                        .Where(c => c.ConsultantUserId.HasValue)
        //                                        .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                        userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                        }
        //                        else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
        //                        {

        //                            //دیتاهایی که خودش زده است
        //                            //دیتاهایی که خودش مشاور آن بوده است

        //                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                            list = list.Where(c => c.UserIdCreator.HasValue)
        //                                      .Where(c => c.ConsultantUserId.HasValue)
        //                                      .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                      userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                        }
        //                        else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
        //                        {

        //                            //دیتاهایی که زیرگروهانش زده است
        //                            //دیتاهایی که خودش مشاور آن بوده است

        //                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                              c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                            list = list.Where(c => c.UserIdCreator.HasValue)
        //                                        .Where(c => c.ConsultantUserId.HasValue)
        //                                        .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                        userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                        }
        //                        else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
        //                        {
        //                            //دیتاهایی که والد آن زده است
        //                            //دیتاهایی که خودش مشاور آن بوده است
        //                            var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


        //                            list = list.Where(c => c.UserIdCreator.HasValue)
        //                                       .Where(c => c.ConsultantUserId.HasValue)
        //                                       .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                       userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                        }
        //                        else
        //                        {
        //                            //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                            //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                            list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                        }


        //                    }
        //                    else
        //                    {
        //                        list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                    }




        //                }
        //                else
        //                {
        //                    if (childsUsersIds.Count == 1)
        //                    {
        //                        if (childsUsersIds.FirstOrDefault() > 0)
        //                        {

        //                            if (levelNames.Contains("مشاور"))
        //                            {
        //                                if (levelNames.Contains("مدیر املاک"))
        //                                {
        //                                    //دیتاهایی که خودش و مشاورینش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                      c.ParentUserId.Equals(ThisUserId) ||
        //                                      c.UserIdCreator.Equals(ThisUserId) ||
        //                                      c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                       .Where(c => c.ConsultantUserId.HasValue)
        //                                       .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                       userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
        //                                {
        //                                    //دیتاهایی که خودش و مشاورینش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                        c.ParentUserId.Equals(ThisUserId) ||
        //                                        c.UserIdCreator.Equals(ThisUserId) ||
        //                                        c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                      .Where(c => c.ConsultantUserId.HasValue)
        //                                      .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                      userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
        //                                {

        //                                    //دیتاهایی که خودش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                        c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                      .Where(c => c.ConsultantUserId.HasValue)
        //                                      .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                      userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
        //                                {

        //                                    //دیتاهایی که زیرگروهانش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                      c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);

        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                     .Where(c => c.ConsultantUserId.HasValue)
        //                                     .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                     userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
        //                                {
        //                                    //دیتاهایی که والد آن زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است
        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                        .Where(c => c.ConsultantUserId.HasValue)
        //                                        .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                        userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                                }
        //                                else
        //                                {
        //                                    //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                                    //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                                    list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                                }



        //                            }
        //                            else
        //                            {
        //                                list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                            }
        //                        }

        //                    }
        //                    else if (childsUsersIds.Count == 0)
        //                    {

        //                        if (levelNames.Contains("مشاور"))
        //                        {
        //                            if (levelNames.Contains("مدیر املاک"))
        //                            {
        //                                //دیتاهایی که خودش و مشاورینش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                  c.ParentUserId.Equals(ThisUserId) ||
        //                                  c.UserIdCreator.Equals(ThisUserId) ||
        //                                  c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                              .Where(c => c.ConsultantUserId.HasValue)
        //                                              .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                              userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
        //                            {
        //                                //دیتاهایی که خودش و مشاورینش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                    c.ParentUserId.Equals(ThisUserId) ||
        //                                    c.UserIdCreator.Equals(ThisUserId) ||
        //                                    c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                     .Where(c => c.ConsultantUserId.HasValue)
        //                                     .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                     userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
        //                            {

        //                                //دیتاهایی که خودش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                    c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                     .Where(c => c.ConsultantUserId.HasValue)
        //                                     .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                     userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
        //                            {

        //                                //دیتاهایی که زیرگروهانش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                  c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);

        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                     .Where(c => c.ConsultantUserId.HasValue)
        //                                     .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                     userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
        //                            {
        //                                //دیتاهایی که والد آن زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است
        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                     .Where(c => c.ConsultantUserId.HasValue)
        //                                     .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                     userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                            }
        //                            else
        //                            {
        //                                //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                                //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                            }


        //                        }
        //                        else
        //                        {
        //                            list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                        }


        //                    }
        //                }
        //            }
        //            #endregion


        //        }

        //        #endregion


        //        #region Names and Pagination


        //        try
        //        {
        //            if (string.IsNullOrEmpty(jtSorting))
        //            {
        //                listCount = list.Count();

        //                if (listCount > jtPageSize)
        //                {
        //                    list = list.OrderByDescending(s => s.AdvertisementId)
        //                             .Skip(jtStartIndex).Take(jtPageSize).ToList();
        //                }
        //                else
        //                {


        //                    list = list.OrderByDescending(s => s.AdvertisementId).ToList();
        //                }
        //            }
        //            else
        //            {
        //                listCount = list.Count();

        //                if (listCount > jtPageSize)
        //                {
        //                    switch (jtSorting)
        //                    {
        //                        case "AdvertisementTitle ASC":
        //                            list = list.OrderBy(l => l.AdvertisementTitle);
        //                            break;
        //                        case "AdvertisementTitle DESC":
        //                            list = list.OrderByDescending(l => l.AdvertisementTitle);
        //                            break;
        //                    }

        //                    if (string.IsNullOrEmpty(jtSorting))
        //                        propertiesAdvanceSearchVMList = list.OrderByDescending(s => s.AdvertisementId)
        //                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
        //                    else
        //                        propertiesAdvanceSearchVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
        //                }
        //                else
        //                {

        //                    propertiesAdvanceSearchVMList = list.ToList();
        //                }
        //            }




        //            var propertyIds = list.Select(p => p.AdvertisementId).ToList().Distinct();


        //            if (platform != null)
        //            {
        //                if (platform.Count == 1)
        //                {
        //                    if (platform.FirstOrDefault().Equals(1))//داخلی
        //                    {

        //                        countsp = @"select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as PropertyDataTypeCountId, PropertyId , DataType, 'Properties' RecordType, Count
        //                                      from

        //                                           (
        //                                           SELECT PropertyId, PropertyFileType as DataType, COUNT(PropertyFileType) as Count
        //                                             FROM [TeniacoDbHaghighi].[dbo].[PropertyFiles]
        //                                             group by PropertyId, PropertyFileType


        //                       		union all


        //                                             select PropertyId, 'price' DataType, count(PropertyPriceHistoryId) as Count
        //                                             from [TeniacoDbHaghighi].[dbo].[PropertiesPricesHistories]
        //                                               group by PropertyId
        //                                           ) as Counts";

        //                    }
        //                    else
        //                        if (platform.FirstOrDefault().Equals(0))//ملکاوان
        //                    {
        //                        countsp = @"select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as PropertyDataTypeCountId, PropertyId, DataType, 'Advertisement' RecordType, Count
        //                                      from

        //                                            (
        //                                            SELECT AdvertisementId as PropertyId, AdvertisementFileType as DataType, COUNT(AdvertisementFileType) as Count
        //                                              FROM [MelkavanDbHaghighi].[dbo].[AdvertisementFiles]
        //                                              group by AdvertisementId , AdvertisementFileType


        //                                              union all


        //                                              select AdvertisementId as PropertyId, 'price' DataType, count(AdvertisementPriceHistoryId) as Count
        //                                              from [MelkavanDbHaghighi].[dbo].[AdvertisementPricesHistories]
        //                                                group by AdvertisementId 
        //                                            ) as Counts";
        //                    }
        //                }
        //                else
        //                if ((platform.Count > 1) || (platform.Count.Equals(0))) //هردو هم داخلی هم ملکاوان
        //                {

        //                    countsp = @"
        //                                select distinct * from (

        //                                					select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as PropertyDataTypeCountId, PropertyId, DataType, 'Properties' RecordType, Count
        //                                						 from           
        //                                							  (
        //                                							  SELECT PropertyId, PropertyFileType as DataType, COUNT(PropertyFileType) as Count
        //                                								FROM [TeniacoDbHaghighi].[dbo].[PropertyFiles]
        //                                								group by PropertyId, PropertyFileType


        //                                								union all


        //                                								select PropertyId, 'price' DataType, count(PropertyPriceHistoryId) as Count
        //                                								from [TeniacoDbHaghighi].[dbo].[PropertiesPricesHistories]
        //                                								  group by PropertyId

        //                                							  ) as Counts


        //                                						union all


        //                                	select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as AdvertisementDataTypeCountId, AdvertisementId, DataType, 'Advertisement' RecordType, Count
        //                                						from

        //                                							  (
        //                                							  SELECT AdvertisementId, AdvertisementFileType as DataType, COUNT(AdvertisementFileType) as Count
        //                                								FROM [MelkavanDbHaghighi].[dbo].[AdvertisementFiles]
        //                                								group by AdvertisementId, AdvertisementFileType


        //                                								union all


        //                                								select AdvertisementId, 'price' DataType, count(AdvertisementPriceHistoryId) as Count
        //                                								from [MelkavanDbHaghighi].[dbo].[AdvertisementPricesHistories]
        //                                								  group by AdvertisementId

        //                                           ) as Counts
        //                                				) as tmp  ";
        //                }
        //            }


        //            var propertyDataTypeCounts = teniacoApiDb.PropertyDataTypeCounts.FromSqlRaw(countsp).Where(p => propertyIds.Contains(p.PropertyId)).ToList();

        //            #region Adress

        //            var stateIds = list.Where(p => p.StateId.HasValue).Select(p => p.StateId.Value).ToList();
        //            var states = publicApiDb.States.Where(s => stateIds.Contains(s.StateId)).ToList();

        //            var cityIds = list.Where(p => p.CityId.HasValue).Select(p => p.CityId.Value).ToList();
        //            var cities = publicApiDb.Cities.Where(s => cityIds.Contains(s.CityId)).ToList();

        //            var zoneIds = list.Where(p => p.ZoneId.HasValue).Select(p => p.ZoneId.Value).ToList();
        //            var zones = publicApiDb.Zones.Where(s => zoneIds.Contains(s.ZoneId)).ToList();

        //            var districtIds = list.Where(p => p.DistrictId.HasValue).Select(p => p.DistrictId.Value).ToList();
        //            var districts = publicApiDb.Districts.Where(s => districtIds.Contains(s.DistrictId)).ToList();

        //            #endregion

        //            #region PropertyOwners

        //            var PropertyOwners = teniacoApiDb.PropertyOwners.Where(p => propertyIds.Contains(p.PropertyId)).ToList();

        //            var personsIds = PropertyOwners.Where(c => c.OwnerType.Equals("persons")).Select(c => c.OwnerId).Distinct().ToList();

        //            var persons = publicApiDb.Persons.Where(p => personsIds.Contains(p.PersonId)).ToList();


        //            var userIds = PropertyOwners.Where(c => c.OwnerType.Equals("users")).Select(c => c.OwnerId).Distinct().ToList();

        //            var users = consoleBusiness.CmsDb.Users.Where(c => userIds.Contains(c.UserId)).Distinct().ToList();

        //            var usersProfile = consoleBusiness.CmsDb.UsersProfile.Where(c => userIds.Contains(c.UserId)).Distinct().ToList();

        //            #endregion

        //            #region AdvertisementOwners

        //            var AdvertisementOwners = melkavanApiDb.AdvertisementOwners.Where(p => propertyIds.Contains(p.AdvertisementId)).ToList();

        //            var userIdsOfAdvertisemet = AdvertisementOwners.Where(c => c.OwnerType.Equals("users")).Select(c => c.OwnerId).Distinct().ToList();

        //            var usersOfAdvertisement = consoleBusiness.CmsDb.Users.Where(c => userIdsOfAdvertisemet.Contains(c.UserId)).Distinct().ToList();

        //            var usersProfileOfAdvertisement = consoleBusiness.CmsDb.UsersProfile.Where(c => userIdsOfAdvertisemet.Contains(c.UserId)).Distinct().ToList();
        //            #endregion

        //            #region Consultants

        //            var consultantUserIds = list.Where(p => p.ConsultantUserId.HasValue).Select(p => p.ConsultantUserId).ToList().Distinct();
        //            var userProfilesOfConsultant = consoleBusiness.CmsDb.UsersProfile.Where(c => consultantUserIds.Contains(c.UserId)).ToList();

        //            #endregion

        //            #region Advertiser

        //            var advertiserIds = list.Where(p => p.AdvertiserId.HasValue).Select(p => p.AdvertiserId).ToList().Distinct();
        //            var usersProfileOfAdvertisers = consoleBusiness.CmsDb.UsersProfile.Where(c => advertiserIds.Contains(c.UserId)).ToList();

        //            #endregion

        //            #region PropertiesPriceHistories


        //            var PropertiesPriceHistories = teniacoApiDb.PropertiesPricesHistories.Where(p => propertyIds.Contains(p.PropertyId)).ToList();

        //            #endregion
        //            var tmpList = list.Distinct();

        //            foreach (var item in tmpList)
        //            {

        //                #region Count of Documents
        //                if (propertyDataTypeCounts.Where(p => p.PropertyId.Equals(item.AdvertisementId) && item.RecordType.Equals(p.RecordType)).Any())
        //                {
        //                    var propertyDataTypeCount = propertyDataTypeCounts.Where(p => p.PropertyId.Equals(item.AdvertisementId)).ToList();

        //                    item.CountOfDocs = propertyDataTypeCount.Where(p => p.DataType.Equals("docs")).FirstOrDefault()?.Count;
        //                    item.CountOfMaps = propertyDataTypeCount.Where(p => p.DataType.Equals("maps")).FirstOrDefault()?.Count;
        //                    item.CountOfMedia = propertyDataTypeCount.Where(p => p.DataType.Equals("media")).FirstOrDefault()?.Count;
        //                    item.CountOfPrices = propertyDataTypeCount.Where(p => p.DataType.Equals("price")).FirstOrDefault()?.Count;

        //                }
        //                #endregion

        //                #region Address

        //                var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
        //                if (state != null)
        //                {
        //                    item.StateName = state.StateName;
        //                }

        //                var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
        //                if (city != null)
        //                {
        //                    item.CityName = city.CityName;
        //                }

        //                if (item.ZoneId.HasValue)
        //                {
        //                    var zone = zones.Where(z => z.ZoneId.Equals(item.ZoneId.Value)).FirstOrDefault();
        //                    if (zone != null)
        //                    {
        //                        item.ZoneName = zone.ZoneName;
        //                    }
        //                }

        //                if (item.DistrictId.HasValue)
        //                {
        //                    var district = districts.Where(z => z.DistrictId.Equals(item.DistrictId.Value)).FirstOrDefault();
        //                    if (district != null)
        //                    {
        //                        item.DistrictName = district.DistrictName;

        //                    }
        //                }

        //                #endregion

        //                #region Consultatnt
        //                if (item.ConsultantUserId.HasValue)
        //                {

        //                    var consultatant = userProfilesOfConsultant.Where(c => c.UserId.Equals(item.ConsultantUserId.Value)).FirstOrDefault();

        //                    if (consultatant != null)
        //                    {
        //                        item.ConsultantName = consultatant.Family;

        //                    }
        //                }
        //                #endregion

        //                #region Advertiser
        //                if (item.AdvertiserId.HasValue)
        //                {

        //                    var advertiser = usersProfileOfAdvertisers.Where(c => c.UserId.Equals(item.AdvertiserId.Value)).FirstOrDefault();

        //                    if (advertiser != null)
        //                    {
        //                        item.AdvertiserName = advertiser.Family;

        //                    }
        //                }
        //                #endregion

        //                #region PropertyOwners
        //                if (item.RecordType == "Properties")
        //                {
        //                    if (PropertyOwners.Where(p => p.PropertyId.Equals(item.AdvertisementId)).Any())
        //                    {
        //                        item.PropertyOwnersVM = new List<PropertyOwnersVM>();


        //                        var propertyOwner = PropertyOwners.Where(p => p.PropertyId.Equals(item.AdvertisementId)).ToList();
        //                        var family = "";
        //                        foreach (var owner in propertyOwner)
        //                        {


        //                            item.PropertyOwnersVM = propertyOwner.Select(c => new PropertyOwnersVM
        //                            {
        //                                PropertyOwnerId = c.PropertyOwnerId,
        //                                OwnerId = c.OwnerId,
        //                                Share = c.Share,
        //                                SharePercent = c.SharePercent,
        //                                PropertyId = c.PropertyId,
        //                                OwnerType = c.OwnerType,

        //                                OwnerPersonFamily = persons.Where(p => p.PersonId.Equals(c.OwnerId)).Any() ?
        //                                   persons.Where(p => p.PersonId.Equals(c.OwnerId)).FirstOrDefault().Family : "",

        //                                OwnerUserFamily = usersProfile.Where(p => p.UserId.Equals(c.OwnerId)).Any() ?
        //                                   usersProfile.Where(p => p.UserId.Equals(c.OwnerId)).FirstOrDefault().Family : ""

        //                            }).ToList();

        //                        }

        //                    }
        //                }

        //                #endregion

        //                #region AdvertisementOwners

        //                if (item.RecordType == "Advertisement")
        //                {
        //                    if (AdvertisementOwners.Where(p => p.AdvertisementId.Equals(item.AdvertisementId)).Any())
        //                    {
        //                        item.AdvertisementOwnersVM = new List<AdvertisementOwnersVM>();


        //                        var advertisementOwner = AdvertisementOwners.Where(p => p.AdvertisementId.Equals(item.AdvertisementId)).ToList();
        //                        var family = "";
        //                        foreach (var owner in advertisementOwner)
        //                        {


        //                            item.AdvertisementOwnersVM = advertisementOwner.Select(c => new AdvertisementOwnersVM
        //                            {
        //                                AdvertisementOwnerId = c.AdvertisementOwnerId,
        //                                OwnerId = c.OwnerId,
        //                                Share = c.Share,
        //                                SharePercent = c.SharePercent,
        //                                AdvertisementId = c.AdvertisementId,
        //                                OwnerType = c.OwnerType,
        //                                OwnerUserFamily = usersProfileOfAdvertisement.Where(p => p.UserId.Equals(c.OwnerId)).Any() ?
        //                                   usersProfileOfAdvertisement.Where(p => p.UserId.Equals(c.OwnerId)).FirstOrDefault().Family : ""

        //                            }).ToList();

        //                        }

        //                    }

        //                }
        //                #endregion

        //                #region PropertiesPriceHistories


        //                if (item.RecordType == "Properties")
        //                {
        //                    var priceHistory = PropertiesPriceHistories.Where(s => s.PropertyId.Equals(item.AdvertisementId)).LastOrDefault();

        //                    if (priceHistory != null)
        //                    {
        //                        if (priceHistory.OfferPriceType.Equals(0)) // متری
        //                        {
        //                            item.LastPrice = priceHistory.CalculatedOfferPrice;
        //                        }
        //                        else if (priceHistory.OfferPriceType.Equals(1)) // کل
        //                        {
        //                            item.LastPrice = priceHistory.OfferPrice;
        //                        }
        //                    }
        //                }

        //                else if (item.RecordType == "Advertisement")
        //                {
        //                    var advertisementPriceHistories = melkavanApiDb.AdvertisementPricesHistories.Where(p => propertyIds.Contains(p.AdvertisementId)).ToList();

        //                    var priceHistory = advertisementPriceHistories.Where(s => s.AdvertisementId.Equals(item.AdvertisementId)).LastOrDefault();

        //                    if (priceHistory != null)
        //                    {
        //                        if (priceHistory.RentPrice.Equals(null)) // قیمت فروش
        //                        {
        //                            item.LastPrice = priceHistory.OfferPrice;
        //                        }
        //                        else // قیمت اجاره
        //                        {
        //                            item.LastPrice = null;
        //                        }
        //                    }
        //                }



        //                #endregion

        //            }

        //            propertiesAdvanceSearchVMList = tmpList.Distinct().ToList();

        //        }
        //        catch (Exception exc)
        //        { }
        //        #endregion

        //        #endregion



        //    }
        //    catch (Exception exc)
        //    { }

        //    return propertiesAdvanceSearchVMList;
        //}

        #endregion


        #region Ghaliany's Code


        //public List<PropertiesAdvanceSearchVM> GetListOfPropertiesAdvanceSearch(int jtStartIndex,
        //int jtPageSize,
        //ref int listCount,
        //List<long> childsUsersIds,
        //PublicApiContext publicApiDb,
        //MelkavanApiContext melkavanApiDb,
        //IConsoleBusiness consoleBusiness,
        //List<int>? platform,
        //int? propertyTypeId,
        //int? slcPrice,
        //double? priceFrom,
        //double? priceTo,
        //int? slcArea,
        //double? areaFrom,
        //double? areaTo,
        //string? address,
        //string? featuresAndDesc,
        //int? typeOfUseId,
        //int? documentTypeId,
        //int? documentRootTypeId,
        //int? documentOwnershipTypeId,
        //string? propertyCodeName,
        //long? consultantUserId,
        //long? OwnerId,
        //long? InvestorId,
        //long? AdvertiserId,
        ////List<string>?features,
        //Dictionary<string, string>? features,
        //long? stateId,
        //long? cityId,
        //long? zoneId,
        //long? districtId,
        //long? ThisUserId = null,
        //bool? Participable = false,
        //bool? Exchangeable = false,
        //string jtSorting = null)
        //{
        //    List<PropertiesAdvanceSearchVM> propertiesAdvanceSearchVMList = new List<PropertiesAdvanceSearchVM>();

        //    try
        //    {
        //        string sp = @"";
        //        string countsp = @"";

        //        if (platform != null)
        //        {
        //            if (platform.Count.Equals(1))
        //            {
        //                if (platform.FirstOrDefault().Equals(1))//داخلی
        //                {
        //                    sp = @"


        //                        select distinct * from (select 'Properties' RecordType,
        //                        		TeniacoDbGhaliany.dbo.Properties.PropertyId as AdvertisementId,
        //                                0 CountOfMaps,
        //                                0 CountOfDocs,
        //                                0 CountOfMedia ,
        //                                0 CountOfPrices ,
        //                                '' PropertyTypeTilte,
        //                                '' TypeUseTitle,
        //                                '' DocumentTypeTitle ,
        //                                '' DocumentOwnershipTypeTitle ,
        //                                '' DocumentRootTypeTitle ,
        //                                '' StateName,
        //                                '' CityName,
        //                                '' ZoneName,
        //                                '' DistrictName ,
        //                                '' UserCreatorName,
        //                                '' ConsultantName,
        //                                ''AdvertiserName,
        //                                TeniacoDbGhaliany.dbo.Properties.IsActivated,
        //                                TeniacoDbGhaliany.dbo.Properties.IsDeleted,
        //                                TeniacoDbGhaliany.dbo.Properties.ConsultantUserId,
        //                                TeniacoDbGhaliany.dbo.Properties.AdvertiserId,
        //                                TeniacoDbGhaliany.dbo.Properties.EditEnDate,
        //                                TeniacoDbGhaliany.dbo.Properties.RebuiltInYearFa,
        //	                            TeniacoDbGhaliany.dbo.Properties.CreateEnDate, 
        //                        		TeniacoDbGhaliany.dbo.Properties.PropertyTypeId, 
        //                        		TeniacoDbGhaliany.dbo.Properties.TypeOfUseId, 
        //                        		TeniacoDbGhaliany.dbo.Properties.DocumentOwnershipTypeId, 
        //                        		TeniacoDbGhaliany.dbo.Properties.DocumentTypeId, 
        //                        		TeniacoDbGhaliany.dbo.Properties.DocumentRootTypeId, 
        //                        		TeniacoDbGhaliany.dbo.Properties.PropertyCodeName as AdvertisementTitle, 
        //                        		TeniacoDbGhaliany.dbo.Properties.Area, 
        //                        		TeniacoDbGhaliany.dbo.Properties.PropertyDescriptions as AdvertisementDescriptions, 
        //                        		TeniacoDbGhaliany.dbo.Properties.UserIdCreator,
        //                        		TeniacoDbGhaliany.dbo.Properties.ShowInMelkavan,
        //                        		TeniacoDbGhaliany.dbo.PropertyOwners.OwnerId,
        //                        		TeniacoDbGhaliany.dbo.PropertyAddress.CountryId,
        //                        		TeniacoDbGhaliany.dbo.PropertyAddress.StateId,
        //                        		TeniacoDbGhaliany.dbo.PropertyAddress.CityId,
        //                        		TeniacoDbGhaliany.dbo.PropertyAddress.ZoneId,
        //                        		TeniacoDbGhaliany.dbo.PropertyAddress.DistrictId, 
        //                                TeniacoDbGhaliany.dbo.PropertiesDetails.BuildingLifeId,
        //	                            TeniacoDbGhaliany.dbo.PropertiesDetails.Foundation,
        //                                TeniacoDbGhaliany.dbo.PropertiesDetails.Participable as  Participable,
        //                                TeniacoDbGhaliany.dbo.PropertiesDetails.Exchangeable as  Exchangeable,
        //                                TeniacoDbGhaliany.dbo.PropertiesDetails.SecondPropertyDescriptions

        //                        	from {1} 

        //                        	left join TeniacoDbGhaliany.dbo.PropertyOwners on Properties.PropertyId = TeniacoDbGhaliany.dbo.PropertyOwners.PropertyId 
        //                        	inner join TeniacoDbGhaliany.dbo.PropertyAddress on Properties.PropertyId = TeniacoDbGhaliany.dbo.PropertyAddress.PropertyId 
        //                        	inner join TeniacoDbGhaliany.dbo.PropertiesDetails on Properties.PropertyId = TeniacoDbGhaliany.dbo.PropertiesDetails.PropertyId

        //                             {joinTeniacoFeatureValues}
        //                             {0} {strTeniacoFeatureWhereClause} {strTeniacoDescriptionWhereClause} {strTeniacoLocationWhereClause} 

        //                        			) as tmp 
        //                        	order by CreateEnDate desc  ";
        //                }
        //                else
        //                    if (platform.FirstOrDefault().Equals(0))//ملکاوان
        //                {
        //                    sp = @"

        //                        select distinct * from (select 'Advertisement' RecordType,
        //                        		MelkavanDbGhaliany.dbo.Advertisement.AdvertisementId, 
        //                                0 CountOfMaps,
        //                                0 CountOfDocs,
        //                                0 CountOfMedia ,
        //                                0 CountOfPrices ,
        //                                '' PropertyTypeTilte,
        //                                '' TypeUseTitle,
        //                                '' DocumentTypeTitle ,
        //                                '' DocumentOwnershipTypeTitle ,
        //                                '' DocumentRootTypeTitle ,
        //                                '' StateName,
        //                                '' CityName,
        //                                '' ZoneName,
        //                                '' DistrictName ,
        //                                '' UserCreatorName,
        //                                '' ConsultantName,
        //                                ''AdvertiserName,
        //                                MelkavanDbGhaliany.dbo.Advertisement.IsActivated,
        //	                            MelkavanDbGhaliany.dbo.Advertisement.IsDeleted,
        //                                MelkavanDbGhaliany.dbo.Advertisement.ConsultantUserId,
        //                                MelkavanDbGhaliany.dbo.Advertisement.AdvertiserId,
        //                                MelkavanDbGhaliany.dbo.Advertisement.EditEnDate,
        //                                MelkavanDbGhaliany.dbo.Advertisement.RebuiltInYearFa,
        //                                MelkavanDbGhaliany.dbo.Advertisement.CreateEnDate, 
        //                        		MelkavanDbGhaliany.dbo.Advertisement.PropertyTypeId, 
        //                        		MelkavanDbGhaliany.dbo.Advertisement.TypeOfUseId, 
        //                        		MelkavanDbGhaliany.dbo.Advertisement.DocumentOwnershipTypeId, 
        //                        		MelkavanDbGhaliany.dbo.Advertisement.DocumentTypeId, 
        //                        		MelkavanDbGhaliany.dbo.Advertisement.DocumentRootTypeId, 
        //                        		MelkavanDbGhaliany.dbo.Advertisement.AdvertisementTitle, 
        //                        		MelkavanDbGhaliany.dbo.Advertisement.Area, 
        //                        		MelkavanDbGhaliany.dbo.Advertisement.AdvertisementDescriptions, 
        //                        		MelkavanDbGhaliany.dbo.Advertisement.UserIdCreator,
        //                        		CAST('1' as bit) ShowInMelkavan,
        //                        		MelkavanDbGhaliany.dbo.AdvertisementOwners.OwnerId as OwnerId,
        //                        		MelkavanDbGhaliany.dbo.AdvertisementAddress.CountryId,
        //                        		MelkavanDbGhaliany.dbo.AdvertisementAddress.StateId,
        //                        		MelkavanDbGhaliany.dbo.AdvertisementAddress.CityId,
        //                        		MelkavanDbGhaliany.dbo.AdvertisementAddress.ZoneId,
        //                        		MelkavanDbGhaliany.dbo.AdvertisementAddress.DistrictId, 
        //                                MelkavanDbGhaliany.dbo.AdvertisementDetails.BuildingLifeId,
        //	                            MelkavanDbGhaliany.dbo.AdvertisementDetails.Foundation,
        //                                MelkavanDbGhaliany.dbo.AdvertisementDetails.Participable as Participable,
        //                                MelkavanDbGhaliany.dbo.AdvertisementDetails.Exchangeable as Exchangeable

        //                        	from {1} 

        //                        	left join MelkavanDbGhaliany.dbo.AdvertisementOwners on Advertisement.AdvertisementId = MelkavanDbGhaliany.dbo.AdvertisementOwners.AdvertisementId 
        //                        	inner join MelkavanDbGhaliany.dbo.AdvertisementAddress on Advertisement.AdvertisementId = MelkavanDbGhaliany.dbo.AdvertisementAddress.AdvertisementId 
        //                            inner join MelkavanDbGhaliany.dbo.AdvertisementDetails on Advertisement.AdvertisementId = MelkavanDbGhaliany.dbo.AdvertisementDetails.AdvertisementId                                	    
        //                                    {joinMelkavanFeatureValues}
        //                                    {0} {strMelkavanFeatureWhereClause} {strMelkavanDescriptionWhereClause} {strMelkavanLocationWhereClause}

        //                        			) as tmp 
        //                        	order by CreateEnDate desc  ";
        //                }
        //            }
        //            else
        //            if ((platform.Count > 1) || (platform.Count.Equals(0))) // هردو هم داخلی هم ملکاوان
        //            {
        //                sp = @"


        //                    select distinct * from (select 'Advertisement' RecordType,
        //                    		MelkavanDbGhaliany.dbo.Advertisement.AdvertisementId, 
        //                            0 CountOfMaps,
        //                            0 CountOfDocs,
        //                            0 CountOfMedia ,
        //                            0 CountOfPrices ,
        //                            '' PropertyTypeTilte,
        //                            '' TypeUseTitle,
        //                            '' DocumentTypeTitle ,
        //                            '' DocumentOwnershipTypeTitle ,
        //                            '' DocumentRootTypeTitle ,
        //                            '' StateName,
        //                            '' CityName,
        //                            '' ZoneName,
        //                            '' DistrictName ,
        //                            '' UserCreatorName, 
        //                            '' ConsultantName,
        //                            ''AdvertiserName,
        //                            MelkavanDbGhaliany.dbo.Advertisement.IsActivated,
        //	                        MelkavanDbGhaliany.dbo.Advertisement.IsDeleted,
        //                            MelkavanDbGhaliany.dbo.Advertisement.ConsultantUserId,
        //                            MelkavanDbGhaliany.dbo.Advertisement.AdvertiserId,
        //                            MelkavanDbGhaliany.dbo.Advertisement.EditEnDate,
        //                            MelkavanDbGhaliany.dbo.Advertisement.RebuiltInYearFa,
        //                            MelkavanDbGhaliany.dbo.Advertisement.CreateEnDate, 
        //                    		MelkavanDbGhaliany.dbo.Advertisement.PropertyTypeId, 
        //                    		MelkavanDbGhaliany.dbo.Advertisement.TypeOfUseId, 
        //                    		MelkavanDbGhaliany.dbo.Advertisement.DocumentOwnershipTypeId, 
        //                    		MelkavanDbGhaliany.dbo.Advertisement.DocumentTypeId, 
        //                    		MelkavanDbGhaliany.dbo.Advertisement.DocumentRootTypeId, 
        //                    		MelkavanDbGhaliany.dbo.Advertisement.AdvertisementTitle, 
        //                    		MelkavanDbGhaliany.dbo.Advertisement.Area, 
        //                    		MelkavanDbGhaliany.dbo.Advertisement.AdvertisementDescriptions, 
        //                    		MelkavanDbGhaliany.dbo.Advertisement.UserIdCreator,
        //                    		'1' ShowInMelkavan,
        //                    		MelkavanDbGhaliany.dbo.AdvertisementOwners.OwnerId as OwnerId,
        //                    		MelkavanDbGhaliany.dbo.AdvertisementAddress.CountryId,
        //                    		MelkavanDbGhaliany.dbo.AdvertisementAddress.StateId,
        //                    		MelkavanDbGhaliany.dbo.AdvertisementAddress.CityId,
        //                    		MelkavanDbGhaliany.dbo.AdvertisementAddress.ZoneId,
        //                    		MelkavanDbGhaliany.dbo.AdvertisementAddress.DistrictId, 
        //                            MelkavanDbGhaliany.dbo.AdvertisementDetails.BuildingLifeId,
        //	                        MelkavanDbGhaliany.dbo.AdvertisementDetails.Foundation,
        //                            MelkavanDbGhaliany.dbo.AdvertisementDetails.Participable as  Participable,
        //                            MelkavanDbGhaliany.dbo.AdvertisementDetails.Exchangeable as Exchangeable,
        //                            MelkavanDbGhaliany.dbo.AdvertisementDetails.SecondAdvertisementDescriptions

        //                    	from {1} 
        //                    	left join MelkavanDbGhaliany.dbo.AdvertisementOwners on Advertisement.AdvertisementId = MelkavanDbGhaliany.dbo.AdvertisementOwners.AdvertisementId 
        //                    	inner join MelkavanDbGhaliany.dbo.AdvertisementAddress on Advertisement.AdvertisementId = MelkavanDbGhaliany.dbo.AdvertisementAddress.AdvertisementId 
        //                        inner join MelkavanDbGhaliany.dbo.AdvertisementDetails on Advertisement.AdvertisementId = MelkavanDbGhaliany.dbo.AdvertisementDetails.AdvertisementId

        //                         {joinMelkavanFeatureValues}

        //                         {0} {strMelkavanFeatureWhereClause} {strMelkavanDescriptionWhereClause} {strMelkavanLocationWhereClause} 

        //                    	union all 
        //                    	select 'Properties' RecordType,
        //                    		TeniacoDbGhaliany.dbo.Properties.PropertyId as AdvertisementId, 
        //                            0 CountOfMaps,
        //                            0 CountOfDocs,
        //                            0 CountOfMedia ,
        //                            0 CountOfPrices ,
        //                            '' PropertyTypeTilte,
        //                            '' TypeUseTitle,
        //                            '' DocumentTypeTitle ,
        //                            '' DocumentOwnershipTypeTitle ,
        //                            '' DocumentRootTypeTitle ,
        //                            '' StateName,
        //                            '' CityName,
        //                            '' ZoneName,
        //                            '' DistrictName,
        //                            '' UserCreatorName,
        //                            '' ConsultantName,
        //                            ''AdvertiserName,
        //                            TeniacoDbGhaliany.dbo.Properties.IsActivated,
        //                            TeniacoDbGhaliany.dbo.Properties.IsDeleted,
        //                            TeniacoDbGhaliany.dbo.Properties.ConsultantUserId,
        //                            TeniacoDbGhaliany.dbo.Properties.AdvertiserId,
        //                            TeniacoDbGhaliany.dbo.Properties.EditEnDate,
        //                            TeniacoDbGhaliany.dbo.Properties.RebuiltInYearFa,
        //	                        TeniacoDbGhaliany.dbo.Properties.CreateEnDate, 
        //                    		TeniacoDbGhaliany.dbo.Properties.PropertyTypeId, 
        //                    		TeniacoDbGhaliany.dbo.Properties.TypeOfUseId, 
        //                    		TeniacoDbGhaliany.dbo.Properties.DocumentOwnershipTypeId, 
        //                    		TeniacoDbGhaliany.dbo.Properties.DocumentTypeId, 
        //                    		TeniacoDbGhaliany.dbo.Properties.DocumentRootTypeId, 
        //                    		TeniacoDbGhaliany.dbo.Properties.PropertyCodeName as AdvertisementTitle, 
        //                    		TeniacoDbGhaliany.dbo.Properties.Area, 
        //                    		TeniacoDbGhaliany.dbo.Properties.PropertyDescriptions as AdvertisementDescriptions, 
        //                    		TeniacoDbGhaliany.dbo.Properties.UserIdCreator,
        //                    		TeniacoDbGhaliany.dbo.Properties.ShowInMelkavan,
        //                    		TeniacoDbGhaliany.dbo.PropertyOwners.OwnerId,
        //                    		TeniacoDbGhaliany.dbo.PropertyAddress.CountryId,
        //                    		TeniacoDbGhaliany.dbo.PropertyAddress.StateId,
        //                    		TeniacoDbGhaliany.dbo.PropertyAddress.CityId,
        //                    		TeniacoDbGhaliany.dbo.PropertyAddress.ZoneId,
        //                    		TeniacoDbGhaliany.dbo.PropertyAddress.DistrictId, 
        //                            TeniacoDbGhaliany.dbo.PropertiesDetails.BuildingLifeId,
        //	                        TeniacoDbGhaliany.dbo.PropertiesDetails.Foundation,
        //                            TeniacoDbGhaliany.dbo.PropertiesDetails.Participable as  Participable,
        //                            TeniacoDbGhaliany.dbo.PropertiesDetails.Exchangeable as  Exchangeable,
        //                            TeniacoDbGhaliany.dbo.PropertiesDetails.SecondPropertyDescriptions

        //                    	from {2} 
        //                    	left join TeniacoDbGhaliany.dbo.PropertyOwners on Properties.PropertyId = TeniacoDbGhaliany.dbo.PropertyOwners.PropertyId 
        //                    	inner join TeniacoDbGhaliany.dbo.PropertyAddress on Properties.PropertyId = TeniacoDbGhaliany.dbo.PropertyAddress.PropertyId 
        //                        inner join TeniacoDbGhaliany.dbo.PropertiesDetails on Properties.PropertyId = TeniacoDbGhaliany.dbo.PropertiesDetails.PropertyId                                

        //                        {joinTeniacoFeatureValues}

        //                        {3} {strTeniacoFeatureWhereClause} {strTeniacoDescriptionWhereClause} {strTeniacoLocationWhereClause} 

        //                    			) as tmp 
        //                    	order by CreateEnDate desc  ";
        //            }
        //        }



        //        #region where clause

        //        string priceWhereClause = " where ";
        //        string strMelkavanPrice = " MelkavanDbGhaliany.dbo.Advertisement ";
        //        string strTeniacoPrice = " TeniacoDbGhaliany.dbo.Properties ";


        //        #region Price
        //        if (slcPrice.HasValue)
        //        {
        //            if (slcPrice.Value > 0)
        //            {
        //                strMelkavanPrice = @" (
        //            		select AdvertisementId,  MAX(AdvertisementPriceHistoryId) as AdvertisementPriceHistoryId from MelkavanDbGhaliany.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories 
        //            			{0} 
        //            		    group by AdvertisementId ) tmpAdvertisementPricesHistories 
        //            	        inner join MelkavanDbGhaliany.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId 
        //            	        inner join MelkavanDbGhaliany.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.AdvertisementPriceHistoryId = MelkavanDbGhaliany.dbo.AdvertisementPricesHistories.AdvertisementPriceHistoryId ";

        //                strTeniacoPrice = @" (
        //            		select PropertyId,  MAX(PropertyPriceHistoryId) as AdvertisementPriceHistoryId from TeniacoDbGhaliany.dbo.PropertiesPricesHistories tmpAdvertisementPricesHistories 
        //            			{0} 
        //            		group by PropertyId) tmpAdvertisementPricesHistories 
        //            	    inner join TeniacoDbGhaliany.dbo.Properties on Properties.PropertyId = tmpAdvertisementPricesHistories.PropertyId 
        //            	    inner join TeniacoDbGhaliany.dbo.PropertiesPricesHistories on tmpAdvertisementPricesHistories.AdvertisementPriceHistoryId = TeniacoDbGhaliany.dbo.PropertiesPricesHistories.PropertyPriceHistoryId ";
        //            }

        //            if (priceFrom.HasValue && priceTo.HasValue)
        //                priceWhereClause += @" ((OfferPriceType = 0 and CAST(CalculatedOfferPrice AS bigint) >= " + priceFrom.Value.ToString() +
        //                                    @") and (OfferPriceType = 0 and CAST(CalculatedOfferPrice AS bigint)  <= " + priceTo.Value.ToString() + @")) or 
        //                           ((OfferPriceType = 1 and CAST(OfferPrice AS bigint) >= " + priceFrom + ") and (OfferPriceType = 1 and CAST(OfferPrice AS bigint) <= " + priceTo.Value.ToString() + ")) ";
        //            else
        //            if (priceFrom.HasValue && !priceTo.HasValue)
        //            {
        //                priceWhereClause += @" (OfferPriceType = 0 and CAST(CalculatedOfferPrice AS bigint) >= " + priceFrom.Value.ToString() + @") or
        //               (OfferPriceType = 1 and CAST(OfferPrice AS bigint) >= " + priceFrom + ") ";
        //            }
        //            else
        //            if (!priceFrom.HasValue && priceTo.HasValue)
        //            {
        //                priceWhereClause += @" (OfferPriceType = 0 and CAST(CalculatedOfferPrice AS bigint) <= " + priceTo.Value.ToString() +
        //                    @") or
        //               (OfferPriceType = 1 and CAST(OfferPrice AS bigint) <= " + priceTo + ") ";
        //            }

        //            strMelkavanPrice = string.Format(strMelkavanPrice, priceWhereClause);
        //            strTeniacoPrice = string.Format(strTeniacoPrice, priceWhereClause);
        //        }
        //        #endregion

        //        #region Area

        //        string whereClause = " where ";
        //        if (slcArea.HasValue)
        //        {
        //            if (areaFrom.HasValue)
        //                if (areaFrom.Value > 0)
        //                {
        //                    whereClause += " CAST(Area AS float) >= " + areaFrom.Value.ToString() + " ";
        //                }


        //            if (areaTo.HasValue)
        //            {
        //                if (areaTo.Value > 0)
        //                {
        //                    if (!string.IsNullOrEmpty(whereClause))
        //                        whereClause += " and CAST(Area AS float) <= " + areaTo.Value.ToString() + " ";
        //                    else
        //                        whereClause += " CAST(Area AS float) <= " + areaTo.Value.ToString() + " ";
        //                }

        //            }
        //        }
        //        #endregion

        //        #region PropertyType
        //        //نوع ملک

        //        if (propertyTypeId.HasValue)
        //        {

        //            if (propertyTypeId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " PropertyTypeId = " + propertyTypeId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and PropertyTypeId = " + propertyTypeId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " PropertyTypeId = " + propertyTypeId.Value.ToString();
        //                }

        //            }

        //        }
        //        #endregion

        //        #region TypeOfUse
        //        //نوع کاربری

        //        if (typeOfUseId.HasValue)
        //        {
        //            if (typeOfUseId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " TypeOfUseId = " + typeOfUseId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and TypeOfUseId = " + typeOfUseId.Value.ToString();
        //                    }

        //                }
        //                else
        //                {
        //                    whereClause += " TypeOfUseId = " + typeOfUseId.Value.ToString();
        //                }

        //            }
        //        }

        //        #endregion

        //        #region DocumentOwnerShip
        //        //نوع مالکیت سند
        //        if (documentOwnershipTypeId.HasValue)
        //        {
        //            if (documentOwnershipTypeId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " DocumentOwnershipTypeId = " + documentOwnershipTypeId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and DocumentOwnershipTypeId = " + documentOwnershipTypeId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " DocumentOwnershipTypeId = " + documentOwnershipTypeId.Value.ToString();
        //                }

        //            }
        //        }

        //        #endregion

        //        #region DocumentType
        //        //نوع سند
        //        if (documentTypeId.HasValue)
        //        {
        //            if (documentTypeId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " DocumentTypeId = " + documentTypeId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and DocumentTypeId = " + documentTypeId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " DocumentTypeId = " + documentTypeId.Value.ToString();
        //                }

        //            }
        //        }

        //        #endregion

        //        #region DocumentRootType
        //        //نوع ریشه سند

        //        if (documentRootTypeId.HasValue)
        //        {
        //            if (documentRootTypeId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " DocumentRootTypeId = " + documentRootTypeId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and DocumentRootTypeId = " + documentRootTypeId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " DocumentRootTypeId = " + documentRootTypeId.Value.ToString();
        //                }

        //            }
        //        }
        //        #endregion

        //        #region PropertyCodeName
        //        //کد اختصاصی
        //        //if (!string.IsNullOrEmpty(propertyCodeName))
        //        //{
        //        //    if (!string.IsNullOrEmpty(propertyCodeName))
        //        //        whereClause += " and AdvertisementTitle like N'%" + propertyCodeName + "%' ";
        //        //    else
        //        //        whereClause += " AdvertisementTitle like N'%" + propertyCodeName + "%' ";
        //        //}
        //        #endregion


        //        #region PropertyCodeName
        //        //کد اختصاصی
        //        if (!string.IsNullOrEmpty(propertyCodeName))
        //        {

        //            if (!string.IsNullOrEmpty(whereClause))
        //            {
        //                if (whereClause.Equals(" where "))
        //                {
        //                    whereClause += " AdvertisementTitle like N'%" + propertyCodeName + "%' ";
        //                }
        //                else
        //                {
        //                    whereClause += " and AdvertisementTitle like N'%" + propertyCodeName + "%' ";
        //                }
        //            }
        //            else
        //            {
        //                whereClause += " AdvertisementTitle like N'%" + propertyCodeName + "%' ";
        //            }


        //        }
        //        #endregion

        //        #region OwnerId
        //        //مالک (اشخاص(
        //        if (OwnerId.HasValue)
        //        {
        //            if (OwnerId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " OwnerId = " + OwnerId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and OwnerId = " + OwnerId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " OwnerId = " + OwnerId.Value.ToString();
        //                }

        //            }
        //        }
        //        #endregion

        //        #region InvestorId
        //        //مالک (سرمایه گذار)
        //        if (InvestorId.HasValue)
        //        {
        //            if (InvestorId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " OwnerId = " + InvestorId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and OwnerId = " + InvestorId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " OwnerId = " + InvestorId.Value.ToString();
        //                }

        //            }
        //        }
        //        #endregion

        //        #region AdvertiserId
        //        //آگهی دهنده
        //        if (AdvertiserId.HasValue)
        //        {
        //            if (AdvertiserId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " AdvertiserId = " + AdvertiserId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and AdvertiserId = " + AdvertiserId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " AdvertiserId = " + AdvertiserId.Value.ToString();
        //                }

        //            }
        //        }
        //        #endregion

        //        #region ConsultantUserId
        //        //مشاور

        //        if (consultantUserId.HasValue)
        //        {
        //            if (consultantUserId.Value > 0)
        //            {
        //                if (!string.IsNullOrEmpty(whereClause))
        //                {
        //                    if (whereClause.Equals(" where "))
        //                    {
        //                        whereClause += " ConsultantUserId = " + consultantUserId.Value.ToString();
        //                    }
        //                    else
        //                    {
        //                        whereClause += " and ConsultantUserId = " + consultantUserId.Value.ToString();
        //                    }
        //                }
        //                else
        //                {
        //                    whereClause += " ConsultantUserId = " + consultantUserId.Value.ToString();
        //                }

        //            }
        //        }
        //        #endregion

        //        #region Features and Description
        //        //امکانات و توضیحات


        //        int counter = 0;

        //        string strMelkavanFeatureWhereClause = "";
        //        string strTeniacoFeatureWhereClause = "";


        //        string joinTeniacoFeatureValues = "";
        //        string joinMelkavanFeatureValues = "";

        //        string strMelkavanDescriptionWhereClause = "";
        //        string strTeniacoDescriptionWhereClause = "";

        //        if (string.IsNullOrEmpty(featuresAndDesc))
        //        {


        //            if (features != null)
        //            {

        //                if (features.Count > 0)
        //                {
        //                    joinTeniacoFeatureValues += @" inner join TeniacoDbGhaliany.dbo.FeaturesValues on Properties.PropertyId = TeniacoDbGhaliany.dbo.FeaturesValues.PropertyId";
        //                    joinMelkavanFeatureValues = @"inner join MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues on Advertisement.AdvertisementId = MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues.AdvertisementId ";


        //                    foreach (var item in features)
        //                    {

        //                        if (counter.Equals(0))
        //                        {
        //                            strMelkavanFeatureWhereClause +=
        //                               "(MelkavanDbGhaliany.dbo.Advertisement.AdvertisementId in (select distinct AdvertisementId from MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues where AdvertisementId in " +
        //                               "(select AdvertisementId from MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues where FeatureValue like N'%" + item.Value + "%' and FeatureId = " + item.Key + ")))";


        //                        }
        //                        else
        //                        {

        //                            strMelkavanFeatureWhereClause +=
        //                                "and (MelkavanDbGhaliany.dbo.Advertisement.AdvertisementId in (select distinct AdvertisementId from MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues where AdvertisementId in " +
        //                                "(select AdvertisementId from MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues where FeatureValue like N'%" + item.Value + "%' and FeatureId = " + item.Key + ")))";



        //                        }

        //                        counter++;
        //                    }



        //                    strTeniacoFeatureWhereClause = strMelkavanFeatureWhereClause.Replace("MelkavanDbGhaliany.dbo.Advertisement.AdvertisementId", "TeniacoDbGhaliany.dbo.Properties.PropertyId ")
        //                   .Replace("MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues", "TeniacoDbGhaliany.dbo.FeaturesValues").Replace("AdvertisementId", "PropertyId");



        //                    joinTeniacoFeatureValues = string.Format(joinTeniacoFeatureValues, strTeniacoFeatureWhereClause, strTeniacoDescriptionWhereClause);
        //                    joinMelkavanFeatureValues = string.Format(joinMelkavanFeatureValues, strMelkavanFeatureWhereClause, strMelkavanDescriptionWhereClause);
        //                }

        //            }

        //        }
        //        else
        //        {
        //            string[] tmpFeature = featuresAndDesc.Split("-");

        //            joinTeniacoFeatureValues += @"inner join TeniacoDbGhaliany.dbo.FeaturesValues on Properties.PropertyId = TeniacoDbGhaliany.dbo.FeaturesValues.PropertyId " +
        //                "INNER JOIN TeniacoDbGhaliany.dbo.Features ON FeaturesValues.FeatureId = Features.FeatureId " +
        //                "INNER JOIN TeniacoDbGhaliany.dbo.FeaturesCategories ON Features.FeatureCategoryId = FeaturesCategories.FeatureCategoryId";


        //            joinMelkavanFeatureValues = @"inner join MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues on Advertisement.AdvertisementId = MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues.AdvertisementId " +
        //                "INNER JOIN TeniacoDbGhaliany.dbo.Features ON AdvertisementFeaturesValues.FeatureId = Features.FeatureId " +
        //                "INNER JOIN TeniacoDbGhaliany.dbo.FeaturesCategories ON Features.FeatureCategoryId = FeaturesCategories.FeatureCategoryId";


        //            foreach (var item in tmpFeature)
        //            {
        //                if (counter.Equals(0))
        //                {
        //                    strMelkavanFeatureWhereClause +=
        //                        "Advertisement.AdvertisementId IN \r\n    (SELECT DISTINCT AdvertisementId \r\n     FROM MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues\r\n     CROSS APPLY STRING_SPLIT(MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues.FeatureValue, ',') AS SplitValues\r\n     INNER JOIN TeniacoDbGhaliany.dbo.FeaturesOptions\r\n        ON TeniacoDbGhaliany.dbo.FeaturesOptions.FeatureId = MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues.FeatureId \r\n        AND TeniacoDbGhaliany.dbo.FeaturesOptions.FeatureOptionValue = SplitValues.value\r\n     WHERE TeniacoDbGhaliany.dbo.FeaturesOptions.FeatureOptionText LIKE N'%" + item + "%')\r\n    OR AdvertisementDescriptions LIKE N'%" + item + "%'\r\n    OR FeatureCategoryTitle LIKE N'%" + item + "%'\r\n    OR FeatureTitle LIKE N'%" + item + "%'";

        //                    //strMelkavanDescriptionWhereClause += "or MelkavanDbGhaliany.dbo.Advertisement.AdvertisementDescriptions like '%" + item + "%'";
        //                }
        //                else
        //                {
        //                    strMelkavanFeatureWhereClause +=
        //                        "or (Advertisement.AdvertisementId IN \r\n    (SELECT DISTINCT AdvertisementId \r\n     FROM MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues\r\n     CROSS APPLY STRING_SPLIT(MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues.FeatureValue, ',') AS SplitValues\r\n     INNER JOIN TeniacoDbGhaliany.dbo.FeaturesOptions\r\n        ON TeniacoDbGhaliany.dbo.FeaturesOptions.FeatureId = MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues.FeatureId \r\n        AND TeniacoDbGhaliany.dbo.FeaturesOptions.FeatureOptionValue = SplitValues.value\r\n     WHERE TeniacoDbGhaliany.dbo.FeaturesOptions.FeatureOptionText LIKE N'%" + item + "%'))\r\n       OR AdvertisementDescriptions LIKE N'%" + item + "%'\r\n       OR FeatureCategoryTitle LIKE N'%" + item + "%'\r\n OR FeatureTitle LIKE N'%" + item + "%'";

        //                    //strMelkavanDescriptionWhereClause += "or MelkavanDbGhaliany.dbo.Advertisement.AdvertisementDescriptions like '%" + item + "%'";
        //                }

        //                counter++;
        //            }

        //            strTeniacoFeatureWhereClause = strMelkavanFeatureWhereClause.Replace("Advertisement.AdvertisementId", "Properties.PropertyId")
        //                .Replace("MelkavanDbGhaliany.dbo.AdvertisementFeaturesValues", "TeniacoDbGhaliany.dbo.FeaturesValues").Replace("AdvertisementId", "PropertyId").Replace("AdvertisementDescriptions", "PropertyDescriptions");



        //            // strTeniacoDescriptionWhereClause = strMelkavanDescriptionWhereClause.Replace("MelkavanDbGhaliany.dbo.Advertisement.AdvertisementDescriptions", "TeniacoDbGhaliany.dbo.Properties.PropertyDescriptions");

        //            joinTeniacoFeatureValues = string.Format(joinTeniacoFeatureValues, strTeniacoFeatureWhereClause);
        //            joinMelkavanFeatureValues = string.Format(joinMelkavanFeatureValues, strMelkavanFeatureWhereClause);

        //        }

        //        #endregion

        //        #region Address
        //        //موقعیت
        //        //آدرس

        //        string strMelkavanLocationWhereClause = "";
        //        string strTeniacoLocationWhereClause = "";
        //        if (string.IsNullOrEmpty(address))
        //        {
        //            if (stateId.HasValue)
        //            {
        //                if (stateId.Value > 0)
        //                {
        //                    if (!string.IsNullOrEmpty(whereClause))
        //                    {
        //                        if (whereClause.Equals(" where "))
        //                        {
        //                            whereClause += " StateId = " + stateId.Value.ToString();
        //                        }
        //                        else
        //                        {
        //                            whereClause += " and StateId = " + stateId.Value.ToString();
        //                        }
        //                    }
        //                    else
        //                    {
        //                        whereClause += " StateId = " + stateId.Value.ToString();
        //                    }

        //                }

        //            }

        //            if (cityId.HasValue)
        //            {
        //                if (cityId.Value > 0)
        //                {
        //                    if (!string.IsNullOrEmpty(whereClause))
        //                    {
        //                        if (whereClause.Equals(" where "))
        //                        {
        //                            whereClause += " CityId = " + cityId.Value.ToString();
        //                        }
        //                        else
        //                        {
        //                            whereClause += " and CityId = " + cityId.Value.ToString();
        //                        }
        //                    }
        //                    else
        //                    {
        //                        whereClause += " CityId = " + cityId.Value.ToString();
        //                    }

        //                }

        //            }

        //            if (zoneId.HasValue)
        //            {
        //                if (zoneId.Value > 0)
        //                {
        //                    if (!string.IsNullOrEmpty(whereClause))
        //                    {
        //                        if (whereClause.Equals(" where "))
        //                        {
        //                            whereClause += " ZoneId = " + zoneId.Value.ToString();
        //                        }
        //                        else
        //                        {
        //                            whereClause += " and ZoneId = " + zoneId.Value.ToString();
        //                        }

        //                    }
        //                    else
        //                    {
        //                        whereClause += " ZoneId = " + zoneId.Value.ToString();
        //                    }

        //                }

        //            }

        //            if (districtId.HasValue)
        //            {
        //                if (districtId.Value > 0)
        //                {
        //                    if (!string.IsNullOrEmpty(whereClause))
        //                    {
        //                        if (whereClause.Equals(" where "))
        //                        {
        //                            whereClause += " DistrictId = " + districtId.Value.ToString();
        //                        }
        //                        else
        //                        {
        //                            whereClause += " and DistrictId = " + districtId.Value.ToString();
        //                        }
        //                    }
        //                    else
        //                    {
        //                        whereClause += " DistrictId = " + districtId.Value.ToString();
        //                    }

        //                }
        //            }

        //        }
        //        else
        //        {
        //            string[] tmpAddress = address.Split("-");



        //            foreach (var item in tmpAddress)
        //            {
        //                if (counter.Equals(0))
        //                {

        //                    strMelkavanLocationWhereClause += "(MelkavanDbGhaliany.dbo.AdvertisementAddress.StateId in (select StateId from PublicDb.dbo.States where StateName like N'%" + item + "%') or " +
        //                                    "MelkavanDbGhaliany.dbo.AdvertisementAddress.CityId in (select CityId from PublicDb.dbo.Cities where CityName like N'%" + item + "%') or " +
        //                                    "MelkavanDbGhaliany.dbo.AdvertisementAddress.ZoneId in (select ZoneId from PublicDb.dbo.Zones where ZoneName like N'%" + item + "%') or " +
        //                                    "MelkavanDbGhaliany.dbo.AdvertisementAddress.DistrictId in(select DistrictId from PublicDb.dbo.Districts where DistrictName like N'%" + item + "%'))";

        //                }
        //                else
        //                {
        //                    strMelkavanLocationWhereClause += "and (MelkavanDbGhaliany.dbo.AdvertisementAddress.StateId in (select StateId from PublicDb.dbo.States where StateName like N'%" + item + "%') or " +
        //                               "MelkavanDbGhaliany.dbo.AdvertisementAddress.CityId in (select CityId from PublicDb.dbo.Cities where CityName like N'%" + item + "%') or " +
        //                               "MelkavanDbGhaliany.dbo.AdvertisementAddress.ZoneId in (select ZoneId from PublicDb.dbo.Zones where ZoneName like N'%" + item + "%') or " +
        //                               "MelkavanDbGhaliany.dbo.AdvertisementAddress.DistrictId in(select DistrictId from PublicDb.dbo.Districts where DistrictName like N'%" + item + "%'))";


        //                }


        //                counter++;
        //            }

        //            strTeniacoLocationWhereClause = strMelkavanLocationWhereClause.Replace("MelkavanDbGhaliany.dbo.AdvertisementAddress", "TeniacoDbGhaliany.dbo.PropertyAddress");
        //        }




        //        if (whereClause.Equals(" where "))
        //        {


        //            if (string.IsNullOrEmpty(strMelkavanLocationWhereClause) && string.IsNullOrEmpty(strTeniacoLocationWhereClause)
        //                    && string.IsNullOrEmpty(strMelkavanFeatureWhereClause) && string.IsNullOrEmpty(strTeniacoFeatureWhereClause) && string.IsNullOrEmpty(strMelkavanDescriptionWhereClause) &&
        //                    string.IsNullOrEmpty(strTeniacoDescriptionWhereClause))
        //            {
        //                whereClause = "";
        //            }

        //        }
        //        else
        //        {
        //            if (!whereClause.Equals(" where "))
        //            {
        //                if (!string.IsNullOrEmpty(strMelkavanLocationWhereClause))
        //                    strMelkavanLocationWhereClause = " and " + strMelkavanLocationWhereClause;

        //                if (!string.IsNullOrEmpty(strTeniacoLocationWhereClause))
        //                    strTeniacoLocationWhereClause = " and " + strTeniacoLocationWhereClause;


        //                if (!string.IsNullOrEmpty(strMelkavanFeatureWhereClause))
        //                    strMelkavanFeatureWhereClause = " and " + strMelkavanFeatureWhereClause;

        //                if (!string.IsNullOrEmpty(strTeniacoFeatureWhereClause))
        //                    strTeniacoFeatureWhereClause = " and " + strTeniacoFeatureWhereClause;


        //                //if (!string.IsNullOrEmpty(strTeniacoDescriptionWhereClause))
        //                //    strTeniacoDescriptionWhereClause = " and " + strTeniacoDescriptionWhereClause;
        //            }
        //        }

        //        #endregion

        //        #region Participable

        //        //قابل مشارکت
        //        if (Participable != null)
        //        {
        //            if (!Participable.Equals(false))
        //            {
        //                if (whereClause.Equals(" where "))
        //                {
        //                    whereClause += " Participable =  'true' ";
        //                }
        //                else
        //                {
        //                    whereClause += " and Participable = 'true' ";
        //                }
        //            }


        //        }


        //        #endregion

        //        #region Exchangeable

        //        //قابل معاوضه
        //        if (Exchangeable != null)
        //        {
        //            if (!Exchangeable.Equals(false))
        //            {
        //                if (whereClause.Equals(" where "))
        //                {
        //                    whereClause += " Exchangeable = 'true' ";
        //                }
        //                else
        //                {
        //                    whereClause += " and Exchangeable =  'true' ";
        //                }
        //            }


        //        }


        //        #endregion


        //        #endregion

        //        if (platform != null)
        //        {
        //            if (platform.Count == 1)
        //            {
        //                if (platform.FirstOrDefault().Equals(1))//داخلی
        //                {
        //                    if (!string.IsNullOrEmpty(joinTeniacoFeatureValues))
        //                    {
        //                        sp = sp.Replace("{joinTeniacoFeatureValues}", joinTeniacoFeatureValues);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{joinTeniacoFeatureValues}", "");
        //                    }


        //                    if (!string.IsNullOrEmpty(strTeniacoFeatureWhereClause))
        //                    {
        //                        sp = sp.Replace("{strTeniacoFeatureWhereClause}", strTeniacoFeatureWhereClause);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{strTeniacoFeatureWhereClause}", "");
        //                    }

        //                    if (!string.IsNullOrEmpty(strTeniacoDescriptionWhereClause))
        //                    {
        //                        sp = sp.Replace("{strTeniacoDescriptionWhereClause}", strTeniacoDescriptionWhereClause);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{strTeniacoDescriptionWhereClause}", "");
        //                    }


        //                    if (!string.IsNullOrEmpty(strTeniacoLocationWhereClause))
        //                    {
        //                        sp = sp.Replace("{strTeniacoLocationWhereClause}", strTeniacoLocationWhereClause);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{strTeniacoLocationWhereClause}", "");
        //                    }


        //                    sp = string.Format(sp, whereClause, strTeniacoPrice, whereClause.Replace("AdvertisementTitle", "PropertyCodeName").Replace("AdvertisementDescriptions", "PropertyDescriptions"));


        //                }
        //                else
        //                    if (platform.FirstOrDefault().Equals(0))//ملکاوان
        //                {

        //                    if (!string.IsNullOrEmpty(joinMelkavanFeatureValues))
        //                    {
        //                        sp = sp.Replace("{joinMelkavanFeatureValues}", joinMelkavanFeatureValues);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{joinMelkavanFeatureValues}", "");
        //                    }


        //                    if (!string.IsNullOrEmpty(strMelkavanFeatureWhereClause))
        //                    {
        //                        sp = sp.Replace("{strMelkavanFeatureWhereClause}", strMelkavanFeatureWhereClause);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{strMelkavanFeatureWhereClause}", "");
        //                    }


        //                    if (!string.IsNullOrEmpty(strMelkavanDescriptionWhereClause))
        //                    {
        //                        sp = sp.Replace("{strMelkavanDescriptionWhereClause}", strMelkavanDescriptionWhereClause);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{strMelkavanDescriptionWhereClause}", "");
        //                    }

        //                    if (!string.IsNullOrEmpty(strMelkavanLocationWhereClause))
        //                    {
        //                        sp = sp.Replace("{strMelkavanLocationWhereClause}", strMelkavanLocationWhereClause);
        //                    }
        //                    else
        //                    {
        //                        sp = sp.Replace("{strMelkavanLocationWhereClause}", "");
        //                    }


        //                    sp = string.Format(sp, whereClause, strMelkavanPrice, whereClause.Replace("AdvertisementTitle", "PropertyCodeName").Replace("AdvertisementDescriptions", "PropertyDescriptions"));

        //                }
        //            }
        //            else
        //            if ((platform.Count > 1) || (platform.Count.Equals(0))) //هردو هم داخلی هم ملکاوان
        //            {

        //                if (!string.IsNullOrEmpty(joinTeniacoFeatureValues) || !string.IsNullOrEmpty(joinMelkavanFeatureValues))
        //                {
        //                    sp = sp.Replace("{joinTeniacoFeatureValues}", joinTeniacoFeatureValues).Replace("{joinMelkavanFeatureValues}", joinMelkavanFeatureValues);
        //                }
        //                else
        //                {
        //                    sp = sp.Replace("{joinTeniacoFeatureValues}", "").Replace("{joinMelkavanFeatureValues}", "");
        //                }



        //                if (!string.IsNullOrEmpty(strMelkavanFeatureWhereClause) || !string.IsNullOrEmpty(strTeniacoFeatureWhereClause))
        //                {
        //                    sp = sp.Replace("{strMelkavanFeatureWhereClause}", strMelkavanFeatureWhereClause).Replace("{strTeniacoFeatureWhereClause}", strTeniacoFeatureWhereClause);
        //                }
        //                else
        //                {
        //                    sp = sp.Replace("{strMelkavanFeatureWhereClause}", "").Replace("{strTeniacoFeatureWhereClause}", "");
        //                }



        //                if (!string.IsNullOrEmpty(strMelkavanDescriptionWhereClause) || !string.IsNullOrEmpty(strTeniacoDescriptionWhereClause))
        //                {
        //                    sp = sp.Replace("{strMelkavanDescriptionWhereClause}", strMelkavanDescriptionWhereClause).Replace("{strTeniacoDescriptionWhereClause}", strTeniacoDescriptionWhereClause);
        //                }
        //                else
        //                {
        //                    sp = sp.Replace("{strMelkavanDescriptionWhereClause}", "").Replace("{strTeniacoDescriptionWhereClause}", "");
        //                }


        //                if (!string.IsNullOrEmpty(strMelkavanLocationWhereClause) || !string.IsNullOrEmpty(strTeniacoLocationWhereClause))
        //                {
        //                    sp = sp.Replace("{strMelkavanLocationWhereClause}", strMelkavanLocationWhereClause).Replace("{strTeniacoLocationWhereClause}", strTeniacoLocationWhereClause);
        //                }
        //                else
        //                {
        //                    sp = sp.Replace("{strMelkavanLocationWhereClause}", "").Replace("{strTeniacoLocationWhereClause}", "");
        //                }

        //                sp = string.Format(sp, whereClause, strMelkavanPrice, strTeniacoPrice, whereClause.Replace("AdvertisementTitle", "PropertyCodeName").Replace("AdvertisementDescriptions", "PropertyDescriptions"));


        //                //sp = string.Format(sp, whereClause, strMelkavanPrice, strTeniacoPrice, whereClause.Replace("AdvertisementTitle", "PropertyCodeName").Replace("MelkavanDbGhaliany.dbo.Advertisement.AdvertisementDescriptions", "TeniacoDbGhaliany.dbo.Properties.PropertyDescriptions "));

        //            }
        //        }



        //        var list = teniacoApiDb.PropertiesAdvanceSearchVM.FromSqlRaw(sp).AsEnumerable().Distinct();

        //        #region load extra data

        //        #region ConsultatantUsers
        //        //اگر مشاور بود
        //        var levelNames = new List<string>();
        //        var user = consoleBusiness.CmsDb.Users.Where(c => c.UserId.Equals(ThisUserId)).FirstOrDefault();
        //        var ParentUserId = user.ParentUserId.Value;
        //        if (user != null)
        //        {
        //            if (user.UserId > 0)
        //            {
        //                var levelIds = consoleBusiness.CmsDb.UsersLevels.Where(c => c.UserId.Equals(user.UserId)).Select(c => c.LevelId).ToList();
        //                levelNames = consoleBusiness.CmsDb.Levels.Where(c => levelIds.Contains(c.LevelId)).Select(c => c.LevelName).ToList();
        //            }
        //        }

        //        #endregion

        //        #region ChildUsers
        //        if (platform.Count == 1)
        //        {
        //            if (platform.FirstOrDefault().Equals(1))//داخلی
        //            {
        //                #region ChildUsers
        //                if (childsUsersIds != null)
        //                {
        //                    if (childsUsersIds.Count > 1)
        //                    {
        //                        if (levelNames.Contains("مشاور"))
        //                        {
        //                            if (levelNames.Contains("مدیر املاک"))
        //                            {
        //                                //دیتاهایی که خودش و مشاورینش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                  c.ParentUserId.Equals(ThisUserId) ||
        //                                  c.UserIdCreator.Equals(ThisUserId) ||
        //                                  c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                           .Where(c => c.ConsultantUserId.HasValue)
        //                                           .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                           userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
        //                            {
        //                                //دیتاهایی که خودش و مشاورینش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                    c.ParentUserId.Equals(ThisUserId) ||
        //                                    c.UserIdCreator.Equals(ThisUserId) ||
        //                                    c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                            .Where(c => c.ConsultantUserId.HasValue)
        //                                            .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                            userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
        //                            {

        //                                //دیتاهایی که خودش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                    c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                          .Where(c => c.ConsultantUserId.HasValue)
        //                                          .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                          userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
        //                            {

        //                                //دیتاهایی که زیرگروهانش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                  c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                            .Where(c => c.ConsultantUserId.HasValue)
        //                                            .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                            userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
        //                            {
        //                                //دیتاهایی که والد آن زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است
        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                           .Where(c => c.ConsultantUserId.HasValue)
        //                                           .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                           userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                            }
        //                            else
        //                            {
        //                                //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                                //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                            }


        //                        }
        //                        else
        //                        {
        //                            list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                        }




        //                    }
        //                    else
        //                    {
        //                        if (childsUsersIds.Count == 1)
        //                        {
        //                            if (childsUsersIds.FirstOrDefault() > 0)
        //                            {

        //                                if (levelNames.Contains("مشاور"))
        //                                {
        //                                    if (levelNames.Contains("مدیر املاک"))
        //                                    {
        //                                        //دیتاهایی که خودش و مشاورینش زده است
        //                                        //دیتاهایی که خودش مشاور آن بوده است

        //                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                          c.ParentUserId.Equals(ThisUserId) ||
        //                                          c.UserIdCreator.Equals(ThisUserId) ||
        //                                          c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                        list = list.Where(c => c.UserIdCreator.HasValue)
        //                                           .Where(c => c.ConsultantUserId.HasValue)
        //                                           .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                           userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                    }
        //                                    else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
        //                                    {
        //                                        //دیتاهایی که خودش و مشاورینش زده است
        //                                        //دیتاهایی که خودش مشاور آن بوده است

        //                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                            c.ParentUserId.Equals(ThisUserId) ||
        //                                            c.UserIdCreator.Equals(ThisUserId) ||
        //                                            c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                        list = list.Where(c => c.UserIdCreator.HasValue)
        //                                          .Where(c => c.ConsultantUserId.HasValue)
        //                                          .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                          userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                    }
        //                                    else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
        //                                    {

        //                                        //دیتاهایی که خودش زده است
        //                                        //دیتاهایی که خودش مشاور آن بوده است

        //                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                            c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                        list = list.Where(c => c.UserIdCreator.HasValue)
        //                                          .Where(c => c.ConsultantUserId.HasValue)
        //                                          .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                          userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                    }
        //                                    else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
        //                                    {

        //                                        //دیتاهایی که زیرگروهانش زده است
        //                                        //دیتاهایی که خودش مشاور آن بوده است

        //                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                          c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);

        //                                        list = list.Where(c => c.UserIdCreator.HasValue)
        //                                         .Where(c => c.ConsultantUserId.HasValue)
        //                                         .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                         userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                    }
        //                                    else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
        //                                    {
        //                                        //دیتاهایی که والد آن زده است
        //                                        //دیتاهایی که خودش مشاور آن بوده است
        //                                        var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


        //                                        list = list.Where(c => c.UserIdCreator.HasValue)
        //                                            .Where(c => c.ConsultantUserId.HasValue)
        //                                            .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                            userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                                    }
        //                                    else
        //                                    {
        //                                        //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                                        //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                                        list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                                    }



        //                                }
        //                                else
        //                                {
        //                                    list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                                }
        //                            }

        //                        }
        //                        else if (childsUsersIds.Count == 0)
        //                        {

        //                            if (levelNames.Contains("مشاور"))
        //                            {
        //                                if (levelNames.Contains("مدیر املاک"))
        //                                {
        //                                    //دیتاهایی که خودش و مشاورینش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                      c.ParentUserId.Equals(ThisUserId) ||
        //                                      c.UserIdCreator.Equals(ThisUserId) ||
        //                                      c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                                  .Where(c => c.ConsultantUserId.HasValue)
        //                                                  .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                                  userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
        //                                {
        //                                    //دیتاهایی که خودش و مشاورینش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                        c.ParentUserId.Equals(ThisUserId) ||
        //                                        c.UserIdCreator.Equals(ThisUserId) ||
        //                                        c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                         .Where(c => c.ConsultantUserId.HasValue)
        //                                         .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                         userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
        //                                {

        //                                    //دیتاهایی که خودش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                        c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                         .Where(c => c.ConsultantUserId.HasValue)
        //                                         .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                         userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
        //                                {

        //                                    //دیتاهایی که زیرگروهانش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                      c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);

        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                         .Where(c => c.ConsultantUserId.HasValue)
        //                                         .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                         userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
        //                                {
        //                                    //دیتاهایی که والد آن زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است
        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                         .Where(c => c.ConsultantUserId.HasValue)
        //                                         .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                         userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                }
        //                                else
        //                                {
        //                                    //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                                    //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                                    list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                                }


        //                            }
        //                            else
        //                            {
        //                                list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                            }


        //                        }
        //                    }
        //                }
        //                #endregion

        //                #region ChildUsers - old 2
        //                //if (childsUsersIds != null)
        //                //{
        //                //    if (childsUsersIds.Count > 1)
        //                //    {

        //                //        if (levelNames.Contains("مشاور"))
        //                //        {
        //                //            var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //            //var listConsultatant = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).ToList();

        //                //            if (listOwner.Count() > 0)
        //                //            {
        //                //                //گاربر لاگین شده دیتا ثبت کرده است
        //                //                //دیتایی که مشاور آن است را لود میکند
        //                //                list = list.Where(p => p.ConsultantUserId == user.UserId || childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                //list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //            }
        //                //            else
        //                //            {
        //                //                //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                //                //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                //                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                //            }


        //                //        }
        //                //        else
        //                //        {
        //                //            list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //        }


        //                //    }
        //                //    else
        //                //    {
        //                //        if (childsUsersIds.Count == 1)
        //                //        {
        //                //            if (childsUsersIds.FirstOrDefault() > 0)
        //                //            {
        //                //                if (levelNames.Contains("مشاور"))
        //                //                {

        //                //                    var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                    if (listOwner.Count() > 0)
        //                //                    {
        //                //                        //گاربر لاگین شده دیتا ثبت کرده است
        //                //                        //دیتایی که مشاور آن است را لود میکند

        //                //                        list = list.Where(p => p.ConsultantUserId == user.UserId || childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                        //list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                        //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                    }
        //                //                    else
        //                //                    {
        //                //                        //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                //                        //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                //                        list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                //                    }


        //                //                }
        //                //                else
        //                //                {
        //                //                    list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                }

        //                //            }
        //                //        }
        //                //        else if (childsUsersIds.Count == 0)
        //                //        {
        //                //            if (levelNames.Contains("مشاور"))
        //                //            {
        //                //                var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                if (listOwner.Count() > 0)
        //                //                {
        //                //                    //گاربر لاگین شده دیتا ثبت کرده است
        //                //                    //دیتایی که مشاور آن است را لود میکند

        //                //                    list = list.Where(p => p.ConsultantUserId == user.UserId || childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                    //list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                    //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                }
        //                //                else
        //                //                {
        //                //                    //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                //                    //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                //                    list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                //                }


        //                //            }
        //                //            else
        //                //            {
        //                //                list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //            }
        //                //        }
        //                //    }
        //                //}
        //                #endregion

        //                #region ChildUsers - old
        //                //if (childsUsersIds != null)
        //                //{
        //                //    if (childsUsersIds.Count > 1)
        //                //    {

        //                //        if (levelNames.Contains("مشاور"))
        //                //        {
        //                //            var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //            if (listOwner.Count() > 0)
        //                //            {
        //                //                //گاربر لاگین شده دیتا ثبت کرده است
        //                //                //دیتایی که مشاور آن است را لود میکند
        //                //                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId) || childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //            }
        //                //            else
        //                //            {
        //                //                //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                //                //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                //                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                //            }


        //                //        }
        //                //        else
        //                //        {
        //                //            list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //        }


        //                //    }
        //                //    else
        //                //    {
        //                //        if (childsUsersIds.Count == 1)
        //                //        {
        //                //            if (childsUsersIds.FirstOrDefault() > 0)
        //                //            {
        //                //                if (levelNames.Contains("مشاور"))
        //                //                {
        //                //                    var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                    if (listOwner.Count() > 0)
        //                //                    {
        //                //                        //گاربر لاگین شده دیتا ثبت کرده است
        //                //                        //دیتایی که مشاور آن است را لود میکند

        //                //                        list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId) || childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                        //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

        //                //                    }
        //                //                    else
        //                //                    {
        //                //                        //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                //                        //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                //                        list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                //                    }


        //                //                }
        //                //                else
        //                //                {
        //                //                    list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                //                }

        //                //            }
        //                //        }
        //                //    }
        //                //}
        //                #endregion

        //            }
        //        }
        //        else if ((platform.Count > 1) || (platform.Count.Equals(0)))  //هردو هم داخلی هم ملکاوان
        //        {

        //            #region ChildUsers
        //            if (childsUsersIds != null)
        //            {
        //                if (childsUsersIds.Count > 1)
        //                {
        //                    if (levelNames.Contains("مشاور"))
        //                    {
        //                        if (levelNames.Contains("مدیر املاک"))
        //                        {
        //                            //دیتاهایی که خودش و مشاورینش زده است
        //                            //دیتاهایی که خودش مشاور آن بوده است

        //                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                              c.ParentUserId.Equals(ThisUserId) ||
        //                              c.UserIdCreator.Equals(ThisUserId) ||
        //                              c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                            list = list.Where(c => c.UserIdCreator.HasValue)
        //                                       .Where(c => c.ConsultantUserId.HasValue)
        //                                       .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                       userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                        }
        //                        else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
        //                        {
        //                            //دیتاهایی که خودش و مشاورینش زده است
        //                            //دیتاهایی که خودش مشاور آن بوده است

        //                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                c.ParentUserId.Equals(ThisUserId) ||
        //                                c.UserIdCreator.Equals(ThisUserId) ||
        //                                c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                            list = list.Where(c => c.UserIdCreator.HasValue)
        //                                        .Where(c => c.ConsultantUserId.HasValue)
        //                                        .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                        userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                        }
        //                        else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
        //                        {

        //                            //دیتاهایی که خودش زده است
        //                            //دیتاهایی که خودش مشاور آن بوده است

        //                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                            list = list.Where(c => c.UserIdCreator.HasValue)
        //                                      .Where(c => c.ConsultantUserId.HasValue)
        //                                      .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                      userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                        }
        //                        else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
        //                        {

        //                            //دیتاهایی که زیرگروهانش زده است
        //                            //دیتاهایی که خودش مشاور آن بوده است

        //                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                              c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                            list = list.Where(c => c.UserIdCreator.HasValue)
        //                                        .Where(c => c.ConsultantUserId.HasValue)
        //                                        .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                        userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                        }
        //                        else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
        //                        {
        //                            //دیتاهایی که والد آن زده است
        //                            //دیتاهایی که خودش مشاور آن بوده است
        //                            var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


        //                            list = list.Where(c => c.UserIdCreator.HasValue)
        //                                       .Where(c => c.ConsultantUserId.HasValue)
        //                                       .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                       userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                        }
        //                        else
        //                        {
        //                            //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                            //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                            list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                        }


        //                    }
        //                    else
        //                    {
        //                        list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                    }




        //                }
        //                else
        //                {
        //                    if (childsUsersIds.Count == 1)
        //                    {
        //                        if (childsUsersIds.FirstOrDefault() > 0)
        //                        {

        //                            if (levelNames.Contains("مشاور"))
        //                            {
        //                                if (levelNames.Contains("مدیر املاک"))
        //                                {
        //                                    //دیتاهایی که خودش و مشاورینش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                      c.ParentUserId.Equals(ThisUserId) ||
        //                                      c.UserIdCreator.Equals(ThisUserId) ||
        //                                      c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                       .Where(c => c.ConsultantUserId.HasValue)
        //                                       .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                       userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
        //                                {
        //                                    //دیتاهایی که خودش و مشاورینش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                        c.ParentUserId.Equals(ThisUserId) ||
        //                                        c.UserIdCreator.Equals(ThisUserId) ||
        //                                        c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                      .Where(c => c.ConsultantUserId.HasValue)
        //                                      .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                      userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
        //                                {

        //                                    //دیتاهایی که خودش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                        c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                      .Where(c => c.ConsultantUserId.HasValue)
        //                                      .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                      userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
        //                                {

        //                                    //دیتاهایی که زیرگروهانش زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است

        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                      c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);

        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                     .Where(c => c.ConsultantUserId.HasValue)
        //                                     .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                     userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                                }
        //                                else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
        //                                {
        //                                    //دیتاهایی که والد آن زده است
        //                                    //دیتاهایی که خودش مشاور آن بوده است
        //                                    var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


        //                                    list = list.Where(c => c.UserIdCreator.HasValue)
        //                                        .Where(c => c.ConsultantUserId.HasValue)
        //                                        .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                        userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                                }
        //                                else
        //                                {
        //                                    //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                                    //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                                    list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                                }



        //                            }
        //                            else
        //                            {
        //                                list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                            }
        //                        }

        //                    }
        //                    else if (childsUsersIds.Count == 0)
        //                    {

        //                        if (levelNames.Contains("مشاور"))
        //                        {
        //                            if (levelNames.Contains("مدیر املاک"))
        //                            {
        //                                //دیتاهایی که خودش و مشاورینش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                  c.ParentUserId.Equals(ThisUserId) ||
        //                                  c.UserIdCreator.Equals(ThisUserId) ||
        //                                  c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                              .Where(c => c.ConsultantUserId.HasValue)
        //                                              .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                              userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
        //                            {
        //                                //دیتاهایی که خودش و مشاورینش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                    c.ParentUserId.Equals(ThisUserId) ||
        //                                    c.UserIdCreator.Equals(ThisUserId) ||
        //                                    c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                     .Where(c => c.ConsultantUserId.HasValue)
        //                                     .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                     userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
        //                            {

        //                                //دیتاهایی که خودش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                    c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                     .Where(c => c.ConsultantUserId.HasValue)
        //                                     .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                     userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
        //                            {

        //                                //دیتاهایی که زیرگروهانش زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است

        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
        //                                  c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);

        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                     .Where(c => c.ConsultantUserId.HasValue)
        //                                     .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                     userIds.Contains(c.ConsultantUserId.Value)).ToList();

        //                            }
        //                            else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
        //                            {
        //                                //دیتاهایی که والد آن زده است
        //                                //دیتاهایی که خودش مشاور آن بوده است
        //                                var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


        //                                list = list.Where(c => c.UserIdCreator.HasValue)
        //                                     .Where(c => c.ConsultantUserId.HasValue)
        //                                     .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
        //                                     userIds.Contains(c.ConsultantUserId.Value)).ToList();


        //                            }
        //                            else
        //                            {
        //                                //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
        //                                //پس رگوردهایی که مشاور آن است را فقط لود میکند
        //                                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
        //                            }


        //                        }
        //                        else
        //                        {
        //                            list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
        //                        }


        //                    }
        //                }
        //            }
        //            #endregion


        //        }

        //        #endregion


        //        #region Names and Pagination


        //        try
        //        {
        //            if (string.IsNullOrEmpty(jtSorting))
        //            {
        //                listCount = list.Count();

        //                if (listCount > jtPageSize)
        //                {
        //                    list = list.OrderByDescending(s => s.AdvertisementId)
        //                             .Skip(jtStartIndex).Take(jtPageSize).ToList();
        //                }
        //                else
        //                {


        //                    list = list.OrderByDescending(s => s.AdvertisementId).ToList();
        //                }
        //            }
        //            else
        //            {
        //                listCount = list.Count();

        //                if (listCount > jtPageSize)
        //                {
        //                    switch (jtSorting)
        //                    {
        //                        case "AdvertisementTitle ASC":
        //                            list = list.OrderBy(l => l.AdvertisementTitle);
        //                            break;
        //                        case "AdvertisementTitle DESC":
        //                            list = list.OrderByDescending(l => l.AdvertisementTitle);
        //                            break;
        //                    }

        //                    if (string.IsNullOrEmpty(jtSorting))
        //                        propertiesAdvanceSearchVMList = list.OrderByDescending(s => s.AdvertisementId)
        //                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
        //                    else
        //                        propertiesAdvanceSearchVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
        //                }
        //                else
        //                {

        //                    propertiesAdvanceSearchVMList = list.ToList();
        //                }
        //            }




        //            var propertyIds = list.Select(p => p.AdvertisementId).ToList().Distinct();


        //            if (platform != null)
        //            {
        //                if (platform.Count == 1)
        //                {
        //                    if (platform.FirstOrDefault().Equals(1))//داخلی
        //                    {

        //                        countsp = @"select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as PropertyDataTypeCountId, PropertyId , DataType, 'Properties' RecordType, Count
        //                                      from

        //                                           (
        //                                           SELECT PropertyId, PropertyFileType as DataType, COUNT(PropertyFileType) as Count
        //                                             FROM [TeniacoDbGhaliany].[dbo].[PropertyFiles]
        //                                             group by PropertyId, PropertyFileType


        //                       		union all


        //                                             select PropertyId, 'price' DataType, count(PropertyPriceHistoryId) as Count
        //                                             from [TeniacoDbGhaliany].[dbo].[PropertiesPricesHistories]
        //                                               group by PropertyId
        //                                           ) as Counts";

        //                    }
        //                    else
        //                        if (platform.FirstOrDefault().Equals(0))//ملکاوان
        //                    {
        //                        countsp = @"select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as PropertyDataTypeCountId, PropertyId, DataType, 'Advertisement' RecordType, Count
        //                                      from

        //                                            (
        //                                            SELECT AdvertisementId as PropertyId, AdvertisementFileType as DataType, COUNT(AdvertisementFileType) as Count
        //                                              FROM [MelkavanDbGhaliany].[dbo].[AdvertisementFiles]
        //                                              group by AdvertisementId , AdvertisementFileType


        //                                              union all


        //                                              select AdvertisementId as PropertyId, 'price' DataType, count(AdvertisementPriceHistoryId) as Count
        //                                              from [MelkavanDbGhaliany].[dbo].[AdvertisementPricesHistories]
        //                                                group by AdvertisementId 
        //                                            ) as Counts";
        //                    }
        //                }
        //                else
        //                if ((platform.Count > 1) || (platform.Count.Equals(0))) //هردو هم داخلی هم ملکاوان
        //                {

        //                    countsp = @"
        //                                select distinct * from (

        //                                					select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as PropertyDataTypeCountId, PropertyId, DataType, 'Properties' RecordType, Count
        //                                						 from           
        //                                							  (
        //                                							  SELECT PropertyId, PropertyFileType as DataType, COUNT(PropertyFileType) as Count
        //                                								FROM [TeniacoDbGhaliany].[dbo].[PropertyFiles]
        //                                								group by PropertyId, PropertyFileType


        //                                								union all


        //                                								select PropertyId, 'price' DataType, count(PropertyPriceHistoryId) as Count
        //                                								from [TeniacoDbGhaliany].[dbo].[PropertiesPricesHistories]
        //                                								  group by PropertyId

        //                                							  ) as Counts


        //                                						union all


        //                                	select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as AdvertisementDataTypeCountId, AdvertisementId, DataType, 'Advertisement' RecordType, Count
        //                                						from

        //                                							  (
        //                                							  SELECT AdvertisementId, AdvertisementFileType as DataType, COUNT(AdvertisementFileType) as Count
        //                                								FROM [MelkavanDbGhaliany].[dbo].[AdvertisementFiles]
        //                                								group by AdvertisementId, AdvertisementFileType


        //                                								union all


        //                                								select AdvertisementId, 'price' DataType, count(AdvertisementPriceHistoryId) as Count
        //                                								from [MelkavanDbGhaliany].[dbo].[AdvertisementPricesHistories]
        //                                								  group by AdvertisementId

        //                                           ) as Counts
        //                                				) as tmp  ";
        //                }
        //            }


        //            var propertyDataTypeCounts = teniacoApiDb.PropertyDataTypeCounts.FromSqlRaw(countsp).Where(p => propertyIds.Contains(p.PropertyId)).ToList();

        //            #region Adress

        //            var stateIds = list.Where(p => p.StateId.HasValue).Select(p => p.StateId.Value).ToList();
        //            var states = publicApiDb.States.Where(s => stateIds.Contains(s.StateId)).ToList();

        //            var cityIds = list.Where(p => p.CityId.HasValue).Select(p => p.CityId.Value).ToList();
        //            var cities = publicApiDb.Cities.Where(s => cityIds.Contains(s.CityId)).ToList();

        //            var zoneIds = list.Where(p => p.ZoneId.HasValue).Select(p => p.ZoneId.Value).ToList();
        //            var zones = publicApiDb.Zones.Where(s => zoneIds.Contains(s.ZoneId)).ToList();

        //            var districtIds = list.Where(p => p.DistrictId.HasValue).Select(p => p.DistrictId.Value).ToList();
        //            var districts = publicApiDb.Districts.Where(s => districtIds.Contains(s.DistrictId)).ToList();

        //            #endregion

        //            #region PropertyOwners

        //            var PropertyOwners = teniacoApiDb.PropertyOwners.Where(p => propertyIds.Contains(p.PropertyId)).ToList();

        //            var personsIds = PropertyOwners.Where(c => c.OwnerType.Equals("persons")).Select(c => c.OwnerId).Distinct().ToList();

        //            var persons = publicApiDb.Persons.Where(p => personsIds.Contains(p.PersonId)).ToList();


        //            var userIds = PropertyOwners.Where(c => c.OwnerType.Equals("users")).Select(c => c.OwnerId).Distinct().ToList();

        //            var users = consoleBusiness.CmsDb.Users.Where(c => userIds.Contains(c.UserId)).Distinct().ToList();

        //            var usersProfile = consoleBusiness.CmsDb.UsersProfile.Where(c => userIds.Contains(c.UserId)).Distinct().ToList();

        //            #endregion

        //            #region AdvertisementOwners

        //            var AdvertisementOwners = melkavanApiDb.AdvertisementOwners.Where(p => propertyIds.Contains(p.AdvertisementId)).ToList();

        //            var userIdsOfAdvertisemet = AdvertisementOwners.Where(c => c.OwnerType.Equals("users")).Select(c => c.OwnerId).Distinct().ToList();

        //            var usersOfAdvertisement = consoleBusiness.CmsDb.Users.Where(c => userIdsOfAdvertisemet.Contains(c.UserId)).Distinct().ToList();

        //            var usersProfileOfAdvertisement = consoleBusiness.CmsDb.UsersProfile.Where(c => userIdsOfAdvertisemet.Contains(c.UserId)).Distinct().ToList();
        //            #endregion

        //            #region Consultants

        //            var consultantUserIds = list.Where(p => p.ConsultantUserId.HasValue).Select(p => p.ConsultantUserId).ToList().Distinct();
        //            var userProfilesOfConsultant = consoleBusiness.CmsDb.UsersProfile.Where(c => consultantUserIds.Contains(c.UserId)).ToList();

        //            #endregion

        //            #region Advertiser

        //            var advertiserIds = list.Where(p => p.AdvertiserId.HasValue).Select(p => p.AdvertiserId).ToList().Distinct();
        //            var usersProfileOfAdvertisers = consoleBusiness.CmsDb.UsersProfile.Where(c => advertiserIds.Contains(c.UserId)).ToList();

        //            #endregion

        //            #region PropertiesPriceHistories


        //            var PropertiesPriceHistories = teniacoApiDb.PropertiesPricesHistories.Where(p => propertyIds.Contains(p.PropertyId)).ToList();

        //            #endregion
        //            var tmpList = list.Distinct();

        //            foreach (var item in tmpList)
        //            {

        //                #region Count of Documents
        //                if (propertyDataTypeCounts.Where(p => p.PropertyId.Equals(item.AdvertisementId) && item.RecordType.Equals(p.RecordType)).Any())
        //                {
        //                    var propertyDataTypeCount = propertyDataTypeCounts.Where(p => p.PropertyId.Equals(item.AdvertisementId)).ToList();

        //                    item.CountOfDocs = propertyDataTypeCount.Where(p => p.DataType.Equals("docs")).FirstOrDefault()?.Count;
        //                    item.CountOfMaps = propertyDataTypeCount.Where(p => p.DataType.Equals("maps")).FirstOrDefault()?.Count;
        //                    item.CountOfMedia = propertyDataTypeCount.Where(p => p.DataType.Equals("media")).FirstOrDefault()?.Count;
        //                    item.CountOfPrices = propertyDataTypeCount.Where(p => p.DataType.Equals("price")).FirstOrDefault()?.Count;

        //                }
        //                #endregion

        //                #region Address

        //                var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
        //                if (state != null)
        //                {
        //                    item.StateName = state.StateName;
        //                }

        //                var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
        //                if (city != null)
        //                {
        //                    item.CityName = city.CityName;
        //                }

        //                if (item.ZoneId.HasValue)
        //                {
        //                    var zone = zones.Where(z => z.ZoneId.Equals(item.ZoneId.Value)).FirstOrDefault();
        //                    if (zone != null)
        //                    {
        //                        item.ZoneName = zone.ZoneName;
        //                    }
        //                }

        //                if (item.DistrictId.HasValue)
        //                {
        //                    var district = districts.Where(z => z.DistrictId.Equals(item.DistrictId.Value)).FirstOrDefault();
        //                    if (district != null)
        //                    {
        //                        item.DistrictName = district.DistrictName;

        //                    }
        //                }

        //                #endregion

        //                #region Consultatnt
        //                if (item.ConsultantUserId.HasValue)
        //                {

        //                    var consultatant = userProfilesOfConsultant.Where(c => c.UserId.Equals(item.ConsultantUserId.Value)).FirstOrDefault();

        //                    if (consultatant != null)
        //                    {
        //                        item.ConsultantName = consultatant.Family;

        //                    }
        //                }
        //                #endregion

        //                #region Advertiser
        //                if (item.AdvertiserId.HasValue)
        //                {

        //                    var advertiser = usersProfileOfAdvertisers.Where(c => c.UserId.Equals(item.AdvertiserId.Value)).FirstOrDefault();

        //                    if (advertiser != null)
        //                    {
        //                        item.AdvertiserName = advertiser.Family;

        //                    }
        //                }
        //                #endregion

        //                #region PropertyOwners
        //                if (item.RecordType == "Properties")
        //                {
        //                    if (PropertyOwners.Where(p => p.PropertyId.Equals(item.AdvertisementId)).Any())
        //                    {
        //                        item.PropertyOwnersVM = new List<PropertyOwnersVM>();


        //                        var propertyOwner = PropertyOwners.Where(p => p.PropertyId.Equals(item.AdvertisementId)).ToList();
        //                        var family = "";
        //                        foreach (var owner in propertyOwner)
        //                        {


        //                            item.PropertyOwnersVM = propertyOwner.Select(c => new PropertyOwnersVM
        //                            {
        //                                PropertyOwnerId = c.PropertyOwnerId,
        //                                OwnerId = c.OwnerId,
        //                                Share = c.Share,
        //                                SharePercent = c.SharePercent,
        //                                PropertyId = c.PropertyId,
        //                                OwnerType = c.OwnerType,

        //                                OwnerPersonFamily = persons.Where(p => p.PersonId.Equals(c.OwnerId)).Any() ?
        //                                   persons.Where(p => p.PersonId.Equals(c.OwnerId)).FirstOrDefault().Family : "",

        //                                OwnerUserFamily = usersProfile.Where(p => p.UserId.Equals(c.OwnerId)).Any() ?
        //                                   usersProfile.Where(p => p.UserId.Equals(c.OwnerId)).FirstOrDefault().Family : ""

        //                            }).ToList();

        //                        }

        //                    }
        //                }

        //                #endregion

        //                #region AdvertisementOwners

        //                if (item.RecordType == "Advertisement")
        //                {
        //                    if (AdvertisementOwners.Where(p => p.AdvertisementId.Equals(item.AdvertisementId)).Any())
        //                    {
        //                        item.AdvertisementOwnersVM = new List<AdvertisementOwnersVM>();


        //                        var advertisementOwner = AdvertisementOwners.Where(p => p.AdvertisementId.Equals(item.AdvertisementId)).ToList();
        //                        var family = "";
        //                        foreach (var owner in advertisementOwner)
        //                        {


        //                            item.AdvertisementOwnersVM = advertisementOwner.Select(c => new AdvertisementOwnersVM
        //                            {
        //                                AdvertisementOwnerId = c.AdvertisementOwnerId,
        //                                OwnerId = c.OwnerId,
        //                                Share = c.Share,
        //                                SharePercent = c.SharePercent,
        //                                AdvertisementId = c.AdvertisementId,
        //                                OwnerType = c.OwnerType,
        //                                OwnerUserFamily = usersProfileOfAdvertisement.Where(p => p.UserId.Equals(c.OwnerId)).Any() ?
        //                                   usersProfileOfAdvertisement.Where(p => p.UserId.Equals(c.OwnerId)).FirstOrDefault().Family : ""

        //                            }).ToList();

        //                        }

        //                    }

        //                }
        //                #endregion

        //                #region PropertiesPriceHistories


        //                if (item.RecordType == "Properties")
        //                {
        //                    var priceHistory = PropertiesPriceHistories.Where(s => s.PropertyId.Equals(item.AdvertisementId)).LastOrDefault();

        //                    if (priceHistory != null)
        //                    {
        //                        if (priceHistory.OfferPriceType.Equals(0)) // متری
        //                        {
        //                            item.LastPrice = priceHistory.CalculatedOfferPrice;
        //                        }
        //                        else if (priceHistory.OfferPriceType.Equals(1)) // کل
        //                        {
        //                            item.LastPrice = priceHistory.OfferPrice;
        //                        }
        //                    }
        //                }

        //                else if (item.RecordType == "Advertisement")
        //                {
        //                    var advertisementPriceHistories = melkavanApiDb.AdvertisementPricesHistories.Where(p => propertyIds.Contains(p.AdvertisementId)).ToList();

        //                    var priceHistory = advertisementPriceHistories.Where(s => s.AdvertisementId.Equals(item.AdvertisementId)).LastOrDefault();

        //                    if (priceHistory != null)
        //                    {
        //                        if (priceHistory.RentPrice.Equals(null)) // قیمت فروش
        //                        {
        //                            item.LastPrice = priceHistory.OfferPrice;
        //                        }
        //                        else // قیمت اجاره
        //                        {
        //                            item.LastPrice = null;
        //                        }
        //                    }
        //                }



        //                #endregion

        //            }

        //            propertiesAdvanceSearchVMList = tmpList.Distinct().ToList();

        //        }
        //        catch (Exception exc)
        //        { }
        //        #endregion

        //        #endregion



        //    }
        //    catch (Exception exc)
        //    { }

        //    return propertiesAdvanceSearchVMList;
        //}

        #endregion

        public List<PropertiesAdvanceSearchVM> GetListOfPropertiesAdvanceSearch(int jtStartIndex,
              int jtPageSize,
              ref int listCount,
              List<long> childsUsersIds,
              PublicApiContext publicApiDb,
              MelkavanApiContext melkavanApiDb,
              IConsoleBusiness consoleBusiness,
              List<int>? platform,
              int? propertyTypeId,
              int? slcPrice,
              double? priceFrom,
              double? priceTo,
              int? slcArea,
              double? areaFrom,
              double? areaTo,
              string? address,
              string? featuresAndDesc,
              int? typeOfUseId,
              int? documentTypeId,
              int? documentRootTypeId,
              int? documentOwnershipTypeId,
              string? propertyCodeName,
              long? consultantUserId,
              long? OwnerId,
              long? InvestorId,
              long? AdvertiserId,
              //List<string>?features,
              Dictionary<string, string>? features,
              long? stateId,
              long? cityId,
              long? zoneId,
              long? districtId,
              long? ThisUserId = null,
              bool? Participable = false,
              bool? Exchangeable = false,
              string jtSorting = null)
        {
            List<PropertiesAdvanceSearchVM> propertiesAdvanceSearchVMList = new List<PropertiesAdvanceSearchVM>();

            try
            {
                string sp = @"";
                string countsp = @"";

                if (platform != null)
                {
                    if (platform.Count.Equals(1))
                    {
                        if (platform.FirstOrDefault().Equals(1))//داخلی
                        {
                            sp = @"


                                select distinct * from (select 'Properties' RecordType,
                                		TeniacoDb.dbo.Properties.PropertyId as AdvertisementId,
                                        0 CountOfMaps,
                                        0 CountOfDocs,
                                        0 CountOfMedia ,
                                        0 CountOfPrices ,
                                        '' PropertyTypeTilte,
                                        '' TypeUseTitle,
                                        '' DocumentTypeTitle ,
                                        '' DocumentOwnershipTypeTitle ,
                                        '' DocumentRootTypeTitle ,
                                        '' StateName,
                                        '' CityName,
                                        '' ZoneName,
                                        '' DistrictName ,
                                        '' UserCreatorName,
                                        '' ConsultantName,
                                        ''AdvertiserName,
                                        TeniacoDb.dbo.Properties.IsActivated,
                                        TeniacoDb.dbo.Properties.IsDeleted,
                                        TeniacoDb.dbo.Properties.ConsultantUserId,
                                        TeniacoDb.dbo.Properties.AdvertiserId,
                                        TeniacoDb.dbo.Properties.EditEnDate,
                                        TeniacoDb.dbo.Properties.RebuiltInYearFa,
        	                            TeniacoDb.dbo.Properties.CreateEnDate, 
                                		TeniacoDb.dbo.Properties.PropertyTypeId, 
                                		TeniacoDb.dbo.Properties.TypeOfUseId, 
                                		TeniacoDb.dbo.Properties.DocumentOwnershipTypeId, 
                                		TeniacoDb.dbo.Properties.DocumentTypeId, 
                                		TeniacoDb.dbo.Properties.DocumentRootTypeId, 
                                		TeniacoDb.dbo.Properties.PropertyCodeName as AdvertisementTitle, 
                                		TeniacoDb.dbo.Properties.Area, 
                                		TeniacoDb.dbo.Properties.PropertyDescriptions as AdvertisementDescriptions, 
                                		TeniacoDb.dbo.Properties.UserIdCreator,
                                		TeniacoDb.dbo.Properties.ShowInMelkavan,
                                		TeniacoDb.dbo.PropertyOwners.OwnerId,
                                		TeniacoDb.dbo.PropertyAddress.CountryId,
                                		TeniacoDb.dbo.PropertyAddress.StateId,
                                		TeniacoDb.dbo.PropertyAddress.CityId,
                                		TeniacoDb.dbo.PropertyAddress.ZoneId,
                                		TeniacoDb.dbo.PropertyAddress.DistrictId, 
                                        TeniacoDb.dbo.PropertiesDetails.BuildingLifeId,
        	                            TeniacoDb.dbo.PropertiesDetails.Foundation,
                                        TeniacoDb.dbo.PropertiesDetails.Participable as  Participable,
                                        TeniacoDb.dbo.PropertiesDetails.Exchangeable as  Exchangeable,
                                        TeniacoDb.dbo.PropertiesDetails.SecondPropertyDescriptions

                                	from {1} 

                                	left join TeniacoDb.dbo.PropertyOwners on Properties.PropertyId = TeniacoDb.dbo.PropertyOwners.PropertyId 
                                	inner join TeniacoDb.dbo.PropertyAddress on Properties.PropertyId = TeniacoDb.dbo.PropertyAddress.PropertyId 
                                	inner join TeniacoDb.dbo.PropertiesDetails on Properties.PropertyId = TeniacoDb.dbo.PropertiesDetails.PropertyId

                                     {joinTeniacoFeatureValues}
                                     {0} {strTeniacoFeatureWhereClause} {strTeniacoDescriptionWhereClause} {strTeniacoLocationWhereClause} 

                                			) as tmp 
                                	order by CreateEnDate desc  ";
                        }
                        else
                            if (platform.FirstOrDefault().Equals(0))//ملکاوان
                        {
                            sp = @"

                                select distinct * from (select 'Advertisement' RecordType,
                                		MelkavanDb.dbo.Advertisement.AdvertisementId, 
                                        0 CountOfMaps,
                                        0 CountOfDocs,
                                        0 CountOfMedia ,
                                        0 CountOfPrices ,
                                        '' PropertyTypeTilte,
                                        '' TypeUseTitle,
                                        '' DocumentTypeTitle ,
                                        '' DocumentOwnershipTypeTitle ,
                                        '' DocumentRootTypeTitle ,
                                        '' StateName,
                                        '' CityName,
                                        '' ZoneName,
                                        '' DistrictName ,
                                        '' UserCreatorName,
                                        '' ConsultantName,
                                        ''AdvertiserName,
                                        MelkavanDb.dbo.Advertisement.IsActivated,
        	                            MelkavanDb.dbo.Advertisement.IsDeleted,
                                        MelkavanDb.dbo.Advertisement.ConsultantUserId,
                                        MelkavanDb.dbo.Advertisement.AdvertiserId,
                                        MelkavanDb.dbo.Advertisement.EditEnDate,
                                        MelkavanDb.dbo.Advertisement.RebuiltInYearFa,
                                        MelkavanDb.dbo.Advertisement.CreateEnDate, 
                                		MelkavanDb.dbo.Advertisement.PropertyTypeId, 
                                		MelkavanDb.dbo.Advertisement.TypeOfUseId, 
                                		MelkavanDb.dbo.Advertisement.DocumentOwnershipTypeId, 
                                		MelkavanDb.dbo.Advertisement.DocumentTypeId, 
                                		MelkavanDb.dbo.Advertisement.DocumentRootTypeId, 
                                		MelkavanDb.dbo.Advertisement.AdvertisementTitle, 
                                		MelkavanDb.dbo.Advertisement.Area, 
                                		MelkavanDb.dbo.Advertisement.AdvertisementDescriptions, 
                                		MelkavanDb.dbo.Advertisement.UserIdCreator,
                                		CAST('1' as bit) ShowInMelkavan,
                                		MelkavanDb.dbo.AdvertisementOwners.OwnerId as OwnerId,
                                		MelkavanDb.dbo.AdvertisementAddress.CountryId,
                                		MelkavanDb.dbo.AdvertisementAddress.StateId,
                                		MelkavanDb.dbo.AdvertisementAddress.CityId,
                                		MelkavanDb.dbo.AdvertisementAddress.ZoneId,
                                		MelkavanDb.dbo.AdvertisementAddress.DistrictId, 
                                        MelkavanDb.dbo.AdvertisementDetails.BuildingLifeId,
        	                            MelkavanDb.dbo.AdvertisementDetails.Foundation,
                                        MelkavanDb.dbo.AdvertisementDetails.Participable as Participable,
                                        MelkavanDb.dbo.AdvertisementDetails.Exchangeable as Exchangeable

                                	from {1} 

                                	left join MelkavanDb.dbo.AdvertisementOwners on Advertisement.AdvertisementId = MelkavanDb.dbo.AdvertisementOwners.AdvertisementId 
                                	inner join MelkavanDb.dbo.AdvertisementAddress on Advertisement.AdvertisementId = MelkavanDb.dbo.AdvertisementAddress.AdvertisementId 
                                    inner join MelkavanDb.dbo.AdvertisementDetails on Advertisement.AdvertisementId = MelkavanDb.dbo.AdvertisementDetails.AdvertisementId                                	    
                                            {joinMelkavanFeatureValues}
                                            {0} {strMelkavanFeatureWhereClause} {strMelkavanDescriptionWhereClause} {strMelkavanLocationWhereClause}

                                			) as tmp 
                                	order by CreateEnDate desc  ";
                        }
                    }
                    else
                    if ((platform.Count > 1) || (platform.Count.Equals(0))) // هردو هم داخلی هم ملکاوان
                    {
                        sp = @"


                            select distinct * from (select 'Advertisement' RecordType,
                            		MelkavanDb.dbo.Advertisement.AdvertisementId, 
                                    0 CountOfMaps,
                                    0 CountOfDocs,
                                    0 CountOfMedia ,
                                    0 CountOfPrices ,
                                    '' PropertyTypeTilte,
                                    '' TypeUseTitle,
                                    '' DocumentTypeTitle ,
                                    '' DocumentOwnershipTypeTitle ,
                                    '' DocumentRootTypeTitle ,
                                    '' StateName,
                                    '' CityName,
                                    '' ZoneName,
                                    '' DistrictName ,
                                    '' UserCreatorName, 
                                    '' ConsultantName,
                                    ''AdvertiserName,
                                    MelkavanDb.dbo.Advertisement.IsActivated,
        	                        MelkavanDb.dbo.Advertisement.IsDeleted,
                                    MelkavanDb.dbo.Advertisement.ConsultantUserId,
                                    MelkavanDb.dbo.Advertisement.AdvertiserId,
                                    MelkavanDb.dbo.Advertisement.EditEnDate,
                                    MelkavanDb.dbo.Advertisement.RebuiltInYearFa,
                                    MelkavanDb.dbo.Advertisement.CreateEnDate, 
                            		MelkavanDb.dbo.Advertisement.PropertyTypeId, 
                            		MelkavanDb.dbo.Advertisement.TypeOfUseId, 
                            		MelkavanDb.dbo.Advertisement.DocumentOwnershipTypeId, 
                            		MelkavanDb.dbo.Advertisement.DocumentTypeId, 
                            		MelkavanDb.dbo.Advertisement.DocumentRootTypeId, 
                            		MelkavanDb.dbo.Advertisement.AdvertisementTitle, 
                            		MelkavanDb.dbo.Advertisement.Area, 
                            		MelkavanDb.dbo.Advertisement.AdvertisementDescriptions, 
                            		MelkavanDb.dbo.Advertisement.UserIdCreator,
                            		'1' ShowInMelkavan,
                            		MelkavanDb.dbo.AdvertisementOwners.OwnerId as OwnerId,
                            		MelkavanDb.dbo.AdvertisementAddress.CountryId,
                            		MelkavanDb.dbo.AdvertisementAddress.StateId,
                            		MelkavanDb.dbo.AdvertisementAddress.CityId,
                            		MelkavanDb.dbo.AdvertisementAddress.ZoneId,
                            		MelkavanDb.dbo.AdvertisementAddress.DistrictId, 
                                    MelkavanDb.dbo.AdvertisementDetails.BuildingLifeId,
        	                        MelkavanDb.dbo.AdvertisementDetails.Foundation,
                                    MelkavanDb.dbo.AdvertisementDetails.Participable as  Participable,
                                    MelkavanDb.dbo.AdvertisementDetails.Exchangeable as Exchangeable,
                                    MelkavanDb.dbo.AdvertisementDetails.SecondAdvertisementDescriptions

                            	from {1} 
                            	left join MelkavanDb.dbo.AdvertisementOwners on Advertisement.AdvertisementId = MelkavanDb.dbo.AdvertisementOwners.AdvertisementId 
                            	inner join MelkavanDb.dbo.AdvertisementAddress on Advertisement.AdvertisementId = MelkavanDb.dbo.AdvertisementAddress.AdvertisementId 
                                inner join MelkavanDb.dbo.AdvertisementDetails on Advertisement.AdvertisementId = MelkavanDb.dbo.AdvertisementDetails.AdvertisementId

                                 {joinMelkavanFeatureValues}

                                 {0} {strMelkavanFeatureWhereClause} {strMelkavanDescriptionWhereClause} {strMelkavanLocationWhereClause} 

                            	union all 
                            	select 'Properties' RecordType,
                            		TeniacoDb.dbo.Properties.PropertyId as AdvertisementId, 
                                    0 CountOfMaps,
                                    0 CountOfDocs,
                                    0 CountOfMedia ,
                                    0 CountOfPrices ,
                                    '' PropertyTypeTilte,
                                    '' TypeUseTitle,
                                    '' DocumentTypeTitle ,
                                    '' DocumentOwnershipTypeTitle ,
                                    '' DocumentRootTypeTitle ,
                                    '' StateName,
                                    '' CityName,
                                    '' ZoneName,
                                    '' DistrictName,
                                    '' UserCreatorName,
                                    '' ConsultantName,
                                    ''AdvertiserName,
                                    TeniacoDb.dbo.Properties.IsActivated,
                                    TeniacoDb.dbo.Properties.IsDeleted,
                                    TeniacoDb.dbo.Properties.ConsultantUserId,
                                    TeniacoDb.dbo.Properties.AdvertiserId,
                                    TeniacoDb.dbo.Properties.EditEnDate,
                                    TeniacoDb.dbo.Properties.RebuiltInYearFa,
        	                        TeniacoDb.dbo.Properties.CreateEnDate, 
                            		TeniacoDb.dbo.Properties.PropertyTypeId, 
                            		TeniacoDb.dbo.Properties.TypeOfUseId, 
                            		TeniacoDb.dbo.Properties.DocumentOwnershipTypeId, 
                            		TeniacoDb.dbo.Properties.DocumentTypeId, 
                            		TeniacoDb.dbo.Properties.DocumentRootTypeId, 
                            		TeniacoDb.dbo.Properties.PropertyCodeName as AdvertisementTitle, 
                            		TeniacoDb.dbo.Properties.Area, 
                            		TeniacoDb.dbo.Properties.PropertyDescriptions as AdvertisementDescriptions, 
                            		TeniacoDb.dbo.Properties.UserIdCreator,
                            		TeniacoDb.dbo.Properties.ShowInMelkavan,
                            		TeniacoDb.dbo.PropertyOwners.OwnerId,
                            		TeniacoDb.dbo.PropertyAddress.CountryId,
                            		TeniacoDb.dbo.PropertyAddress.StateId,
                            		TeniacoDb.dbo.PropertyAddress.CityId,
                            		TeniacoDb.dbo.PropertyAddress.ZoneId,
                            		TeniacoDb.dbo.PropertyAddress.DistrictId, 
                                    TeniacoDb.dbo.PropertiesDetails.BuildingLifeId,
        	                        TeniacoDb.dbo.PropertiesDetails.Foundation,
                                    TeniacoDb.dbo.PropertiesDetails.Participable as  Participable,
                                    TeniacoDb.dbo.PropertiesDetails.Exchangeable as  Exchangeable,
                                    TeniacoDb.dbo.PropertiesDetails.SecondPropertyDescriptions

                            	from {2} 
                            	left join TeniacoDb.dbo.PropertyOwners on Properties.PropertyId = TeniacoDb.dbo.PropertyOwners.PropertyId 
                            	inner join TeniacoDb.dbo.PropertyAddress on Properties.PropertyId = TeniacoDb.dbo.PropertyAddress.PropertyId 
                                inner join TeniacoDb.dbo.PropertiesDetails on Properties.PropertyId = TeniacoDb.dbo.PropertiesDetails.PropertyId                                

                                {joinTeniacoFeatureValues}

                                {3} {strTeniacoFeatureWhereClause} {strTeniacoDescriptionWhereClause} {strTeniacoLocationWhereClause} 

                            			) as tmp 
                            	order by CreateEnDate desc  ";
                    }
                }



                #region where clause

                string priceWhereClause = " where ";
                string strMelkavanPrice = " MelkavanDb.dbo.Advertisement ";
                string strTeniacoPrice = " TeniacoDb.dbo.Properties ";


                #region Price
                if (slcPrice.HasValue)
                {
                    if (slcPrice.Value > 0)
                    {
                        strMelkavanPrice = @" (
                    		select AdvertisementId,  MAX(AdvertisementPriceHistoryId) as AdvertisementPriceHistoryId from MelkavanDb.dbo.AdvertisementPricesHistories tmpAdvertisementPricesHistories 
                    			{0} 
                    		    group by AdvertisementId ) tmpAdvertisementPricesHistories 
                    	        inner join MelkavanDb.dbo.Advertisement on Advertisement.AdvertisementId = tmpAdvertisementPricesHistories.AdvertisementId 
                    	        inner join MelkavanDb.dbo.AdvertisementPricesHistories on tmpAdvertisementPricesHistories.AdvertisementPriceHistoryId = MelkavanDb.dbo.AdvertisementPricesHistories.AdvertisementPriceHistoryId ";

                        strTeniacoPrice = @" (
                    		select PropertyId,  MAX(PropertyPriceHistoryId) as AdvertisementPriceHistoryId from TeniacoDb.dbo.PropertiesPricesHistories tmpAdvertisementPricesHistories 
                    			{0} 
                    		group by PropertyId) tmpAdvertisementPricesHistories 
                    	    inner join TeniacoDb.dbo.Properties on Properties.PropertyId = tmpAdvertisementPricesHistories.PropertyId 
                    	    inner join TeniacoDb.dbo.PropertiesPricesHistories on tmpAdvertisementPricesHistories.AdvertisementPriceHistoryId = TeniacoDb.dbo.PropertiesPricesHistories.PropertyPriceHistoryId ";
                    }

                    if (priceFrom.HasValue && priceTo.HasValue)
                        priceWhereClause += @" ((OfferPriceType = 0 and CAST(CalculatedOfferPrice AS bigint) >= " + priceFrom.Value.ToString() +
                                            @") and (OfferPriceType = 0 and CAST(CalculatedOfferPrice AS bigint)  <= " + priceTo.Value.ToString() + @")) or 
                                   ((OfferPriceType = 1 and CAST(OfferPrice AS bigint) >= " + priceFrom + ") and (OfferPriceType = 1 and CAST(OfferPrice AS bigint) <= " + priceTo.Value.ToString() + ")) ";
                    else
                    if (priceFrom.HasValue && !priceTo.HasValue)
                    {
                        priceWhereClause += @" (OfferPriceType = 0 and CAST(CalculatedOfferPrice AS bigint) >= " + priceFrom.Value.ToString() + @") or
                       (OfferPriceType = 1 and CAST(OfferPrice AS bigint) >= " + priceFrom + ") ";
                    }
                    else
                    if (!priceFrom.HasValue && priceTo.HasValue)
                    {
                        priceWhereClause += @" (OfferPriceType = 0 and CAST(CalculatedOfferPrice AS bigint) <= " + priceTo.Value.ToString() +
                            @") or
                       (OfferPriceType = 1 and CAST(OfferPrice AS bigint) <= " + priceTo + ") ";
                    }

                    strMelkavanPrice = string.Format(strMelkavanPrice, priceWhereClause);
                    strTeniacoPrice = string.Format(strTeniacoPrice, priceWhereClause);
                }
                #endregion

                #region Area

                string whereClause = " where ";
                if (slcArea.HasValue)
                {
                    if (areaFrom.HasValue)
                        if (areaFrom.Value > 0)
                        {
                            whereClause += " CAST(Area AS float) >= " + areaFrom.Value.ToString() + " ";
                        }


                    if (areaTo.HasValue)
                    {
                        if (areaTo.Value > 0)
                        {
                            if (!string.IsNullOrEmpty(whereClause))
                                whereClause += " and CAST(Area AS float) <= " + areaTo.Value.ToString() + " ";
                            else
                                whereClause += " CAST(Area AS float) <= " + areaTo.Value.ToString() + " ";
                        }

                    }
                }
                #endregion

                #region PropertyType
                //نوع ملک

                if (propertyTypeId.HasValue)
                {

                    if (propertyTypeId.Value > 0)
                    {
                        if (!string.IsNullOrEmpty(whereClause))
                        {
                            if (whereClause.Equals(" where "))
                            {
                                whereClause += " PropertyTypeId = " + propertyTypeId.Value.ToString();
                            }
                            else
                            {
                                whereClause += " and PropertyTypeId = " + propertyTypeId.Value.ToString();
                            }
                        }
                        else
                        {
                            whereClause += " PropertyTypeId = " + propertyTypeId.Value.ToString();
                        }

                    }

                }
                #endregion

                #region TypeOfUse
                //نوع کاربری

                if (typeOfUseId.HasValue)
                {
                    if (typeOfUseId.Value > 0)
                    {
                        if (!string.IsNullOrEmpty(whereClause))
                        {
                            if (whereClause.Equals(" where "))
                            {
                                whereClause += " TypeOfUseId = " + typeOfUseId.Value.ToString();
                            }
                            else
                            {
                                whereClause += " and TypeOfUseId = " + typeOfUseId.Value.ToString();
                            }

                        }
                        else
                        {
                            whereClause += " TypeOfUseId = " + typeOfUseId.Value.ToString();
                        }

                    }
                }

                #endregion

                #region DocumentOwnerShip
                //نوع مالکیت سند
                if (documentOwnershipTypeId.HasValue)
                {
                    if (documentOwnershipTypeId.Value > 0)
                    {
                        if (!string.IsNullOrEmpty(whereClause))
                        {
                            if (whereClause.Equals(" where "))
                            {
                                whereClause += " DocumentOwnershipTypeId = " + documentOwnershipTypeId.Value.ToString();
                            }
                            else
                            {
                                whereClause += " and DocumentOwnershipTypeId = " + documentOwnershipTypeId.Value.ToString();
                            }
                        }
                        else
                        {
                            whereClause += " DocumentOwnershipTypeId = " + documentOwnershipTypeId.Value.ToString();
                        }

                    }
                }

                #endregion

                #region DocumentType
                //نوع سند
                if (documentTypeId.HasValue)
                {
                    if (documentTypeId.Value > 0)
                    {
                        if (!string.IsNullOrEmpty(whereClause))
                        {
                            if (whereClause.Equals(" where "))
                            {
                                whereClause += " DocumentTypeId = " + documentTypeId.Value.ToString();
                            }
                            else
                            {
                                whereClause += " and DocumentTypeId = " + documentTypeId.Value.ToString();
                            }
                        }
                        else
                        {
                            whereClause += " DocumentTypeId = " + documentTypeId.Value.ToString();
                        }

                    }
                }

                #endregion

                #region DocumentRootType
                //نوع ریشه سند

                if (documentRootTypeId.HasValue)
                {
                    if (documentRootTypeId.Value > 0)
                    {
                        if (!string.IsNullOrEmpty(whereClause))
                        {
                            if (whereClause.Equals(" where "))
                            {
                                whereClause += " DocumentRootTypeId = " + documentRootTypeId.Value.ToString();
                            }
                            else
                            {
                                whereClause += " and DocumentRootTypeId = " + documentRootTypeId.Value.ToString();
                            }
                        }
                        else
                        {
                            whereClause += " DocumentRootTypeId = " + documentRootTypeId.Value.ToString();
                        }

                    }
                }
                #endregion

                #region PropertyCodeName
                //کد اختصاصی
                //if (!string.IsNullOrEmpty(propertyCodeName))
                //{
                //    if (!string.IsNullOrEmpty(propertyCodeName))
                //        whereClause += " and AdvertisementTitle like N'%" + propertyCodeName + "%' ";
                //    else
                //        whereClause += " AdvertisementTitle like N'%" + propertyCodeName + "%' ";
                //}
                #endregion


                #region PropertyCodeName
                //کد اختصاصی
                if (!string.IsNullOrEmpty(propertyCodeName))
                {

                    if (!string.IsNullOrEmpty(whereClause))
                    {
                        if (whereClause.Equals(" where "))
                        {
                            whereClause += " AdvertisementTitle like N'%" + propertyCodeName + "%' ";
                        }
                        else
                        {
                            whereClause += " and AdvertisementTitle like N'%" + propertyCodeName + "%' ";
                        }
                    }
                    else
                    {
                        whereClause += " AdvertisementTitle like N'%" + propertyCodeName + "%' ";
                    }


                }
                #endregion

                #region OwnerId
                //مالک (اشخاص(
                if (OwnerId.HasValue)
                {
                    if (OwnerId.Value > 0)
                    {
                        if (!string.IsNullOrEmpty(whereClause))
                        {
                            if (whereClause.Equals(" where "))
                            {
                                whereClause += " OwnerId = " + OwnerId.Value.ToString();
                            }
                            else
                            {
                                whereClause += " and OwnerId = " + OwnerId.Value.ToString();
                            }
                        }
                        else
                        {
                            whereClause += " OwnerId = " + OwnerId.Value.ToString();
                        }

                    }
                }
                #endregion

                #region InvestorId
                //مالک (سرمایه گذار)
                if (InvestorId.HasValue)
                {
                    if (InvestorId.Value > 0)
                    {
                        if (!string.IsNullOrEmpty(whereClause))
                        {
                            if (whereClause.Equals(" where "))
                            {
                                whereClause += " OwnerId = " + InvestorId.Value.ToString();
                            }
                            else
                            {
                                whereClause += " and OwnerId = " + InvestorId.Value.ToString();
                            }
                        }
                        else
                        {
                            whereClause += " OwnerId = " + InvestorId.Value.ToString();
                        }

                    }
                }
                #endregion

                #region AdvertiserId
                //آگهی دهنده
                if (AdvertiserId.HasValue)
                {
                    if (AdvertiserId.Value > 0)
                    {
                        if (!string.IsNullOrEmpty(whereClause))
                        {
                            if (whereClause.Equals(" where "))
                            {
                                whereClause += " AdvertiserId = " + AdvertiserId.Value.ToString();
                            }
                            else
                            {
                                whereClause += " and AdvertiserId = " + AdvertiserId.Value.ToString();
                            }
                        }
                        else
                        {
                            whereClause += " AdvertiserId = " + AdvertiserId.Value.ToString();
                        }

                    }
                }
                #endregion

                #region ConsultantUserId
                //مشاور

                if (consultantUserId.HasValue)
                {
                    if (consultantUserId.Value > 0)
                    {
                        if (!string.IsNullOrEmpty(whereClause))
                        {
                            if (whereClause.Equals(" where "))
                            {
                                whereClause += " ConsultantUserId = " + consultantUserId.Value.ToString();
                            }
                            else
                            {
                                whereClause += " and ConsultantUserId = " + consultantUserId.Value.ToString();
                            }
                        }
                        else
                        {
                            whereClause += " ConsultantUserId = " + consultantUserId.Value.ToString();
                        }

                    }
                }
                #endregion

                #region Features and Description
                //امکانات و توضیحات


                int counter = 0;

                string strMelkavanFeatureWhereClause = "";
                string strTeniacoFeatureWhereClause = "";


                string joinTeniacoFeatureValues = "";
                string joinMelkavanFeatureValues = "";

                string strMelkavanDescriptionWhereClause = "";
                string strTeniacoDescriptionWhereClause = "";

                if (string.IsNullOrEmpty(featuresAndDesc))
                {


                    if (features != null)
                    {

                        if (features.Count > 0)
                        {
                            joinTeniacoFeatureValues += @" inner join TeniacoDb.dbo.FeaturesValues on Properties.PropertyId = TeniacoDb.dbo.FeaturesValues.PropertyId";
                            joinMelkavanFeatureValues = @"inner join MelkavanDb.dbo.AdvertisementFeaturesValues on Advertisement.AdvertisementId = MelkavanDb.dbo.AdvertisementFeaturesValues.AdvertisementId ";


                            foreach (var item in features)
                            {

                                if (counter.Equals(0))
                                {
                                    strMelkavanFeatureWhereClause +=
                                       "(MelkavanDb.dbo.Advertisement.AdvertisementId in (select distinct AdvertisementId from MelkavanDb.dbo.AdvertisementFeaturesValues where AdvertisementId in " +
                                       "(select AdvertisementId from MelkavanDb.dbo.AdvertisementFeaturesValues where FeatureValue like N'%" + item.Value + "%' and FeatureId = " + item.Key + ")))";


                                }
                                else
                                {

                                    strMelkavanFeatureWhereClause +=
                                        "and (MelkavanDb.dbo.Advertisement.AdvertisementId in (select distinct AdvertisementId from MelkavanDb.dbo.AdvertisementFeaturesValues where AdvertisementId in " +
                                        "(select AdvertisementId from MelkavanDb.dbo.AdvertisementFeaturesValues where FeatureValue like N'%" + item.Value + "%' and FeatureId = " + item.Key + ")))";



                                }

                                counter++;
                            }



                            strTeniacoFeatureWhereClause = strMelkavanFeatureWhereClause.Replace("MelkavanDb.dbo.Advertisement.AdvertisementId", "TeniacoDb.dbo.Properties.PropertyId ")
                           .Replace("MelkavanDb.dbo.AdvertisementFeaturesValues", "TeniacoDb.dbo.FeaturesValues").Replace("AdvertisementId", "PropertyId");



                            joinTeniacoFeatureValues = string.Format(joinTeniacoFeatureValues, strTeniacoFeatureWhereClause, strTeniacoDescriptionWhereClause);
                            joinMelkavanFeatureValues = string.Format(joinMelkavanFeatureValues, strMelkavanFeatureWhereClause, strMelkavanDescriptionWhereClause);
                        }

                    }

                }
                else
                {
                    string[] tmpFeature = featuresAndDesc.Split("-");

                    joinTeniacoFeatureValues += @"inner join TeniacoDb.dbo.FeaturesValues on Properties.PropertyId = TeniacoDb.dbo.FeaturesValues.PropertyId " +
                        "INNER JOIN TeniacoDb.dbo.Features ON FeaturesValues.FeatureId = Features.FeatureId " +
                        "INNER JOIN TeniacoDb.dbo.FeaturesCategories ON Features.FeatureCategoryId = FeaturesCategories.FeatureCategoryId";


                    joinMelkavanFeatureValues = @"inner join MelkavanDb.dbo.AdvertisementFeaturesValues on Advertisement.AdvertisementId = MelkavanDb.dbo.AdvertisementFeaturesValues.AdvertisementId " +
                        "INNER JOIN TeniacoDb.dbo.Features ON AdvertisementFeaturesValues.FeatureId = Features.FeatureId " +
                        "INNER JOIN TeniacoDb.dbo.FeaturesCategories ON Features.FeatureCategoryId = FeaturesCategories.FeatureCategoryId";


                    foreach (var item in tmpFeature)
                    {
                        if (counter.Equals(0))
                        {
                            strMelkavanFeatureWhereClause +=
                                "Advertisement.AdvertisementId IN \r\n    (SELECT DISTINCT AdvertisementId \r\n     FROM MelkavanDb.dbo.AdvertisementFeaturesValues\r\n     CROSS APPLY STRING_SPLIT(MelkavanDb.dbo.AdvertisementFeaturesValues.FeatureValue, ',') AS SplitValues\r\n     INNER JOIN TeniacoDb.dbo.FeaturesOptions\r\n        ON TeniacoDb.dbo.FeaturesOptions.FeatureId = MelkavanDb.dbo.AdvertisementFeaturesValues.FeatureId \r\n        AND TeniacoDb.dbo.FeaturesOptions.FeatureOptionValue = SplitValues.value\r\n     WHERE TeniacoDb.dbo.FeaturesOptions.FeatureOptionText LIKE N'%" + item + "%')\r\n    OR AdvertisementDescriptions LIKE N'%" + item + "%'\r\n    OR FeatureCategoryTitle LIKE N'%" + item + "%'\r\n    OR FeatureTitle LIKE N'%" + item + "%'";

                            //strMelkavanDescriptionWhereClause += "or MelkavanDb.dbo.Advertisement.AdvertisementDescriptions like '%" + item + "%'";
                        }
                        else
                        {
                            strMelkavanFeatureWhereClause +=
                                "or (Advertisement.AdvertisementId IN \r\n    (SELECT DISTINCT AdvertisementId \r\n     FROM MelkavanDb.dbo.AdvertisementFeaturesValues\r\n     CROSS APPLY STRING_SPLIT(MelkavanDb.dbo.AdvertisementFeaturesValues.FeatureValue, ',') AS SplitValues\r\n     INNER JOIN TeniacoDb.dbo.FeaturesOptions\r\n        ON TeniacoDb.dbo.FeaturesOptions.FeatureId = MelkavanDb.dbo.AdvertisementFeaturesValues.FeatureId \r\n        AND TeniacoDb.dbo.FeaturesOptions.FeatureOptionValue = SplitValues.value\r\n     WHERE TeniacoDb.dbo.FeaturesOptions.FeatureOptionText LIKE N'%" + item + "%'))\r\n       OR AdvertisementDescriptions LIKE N'%" + item + "%'\r\n       OR FeatureCategoryTitle LIKE N'%" + item + "%'\r\n OR FeatureTitle LIKE N'%" + item + "%'";

                            //strMelkavanDescriptionWhereClause += "or MelkavanDb.dbo.Advertisement.AdvertisementDescriptions like '%" + item + "%'";
                        }

                        counter++;
                    }

                    strTeniacoFeatureWhereClause = strMelkavanFeatureWhereClause.Replace("Advertisement.AdvertisementId", "Properties.PropertyId")
                        .Replace("MelkavanDb.dbo.AdvertisementFeaturesValues", "TeniacoDb.dbo.FeaturesValues").Replace("AdvertisementId", "PropertyId").Replace("AdvertisementDescriptions", "PropertyDescriptions");



                    // strTeniacoDescriptionWhereClause = strMelkavanDescriptionWhereClause.Replace("MelkavanDb.dbo.Advertisement.AdvertisementDescriptions", "TeniacoDb.dbo.Properties.PropertyDescriptions");

                    joinTeniacoFeatureValues = string.Format(joinTeniacoFeatureValues, strTeniacoFeatureWhereClause);
                    joinMelkavanFeatureValues = string.Format(joinMelkavanFeatureValues, strMelkavanFeatureWhereClause);

                }

                #endregion

                #region Address
                //موقعیت
                //آدرس

                string strMelkavanLocationWhereClause = "";
                string strTeniacoLocationWhereClause = "";
                if (string.IsNullOrEmpty(address))
                {
                    if (stateId.HasValue)
                    {
                        if (stateId.Value > 0)
                        {
                            if (!string.IsNullOrEmpty(whereClause))
                            {
                                if (whereClause.Equals(" where "))
                                {
                                    whereClause += " StateId = " + stateId.Value.ToString();
                                }
                                else
                                {
                                    whereClause += " and StateId = " + stateId.Value.ToString();
                                }
                            }
                            else
                            {
                                whereClause += " StateId = " + stateId.Value.ToString();
                            }

                        }

                    }

                    if (cityId.HasValue)
                    {
                        if (cityId.Value > 0)
                        {
                            if (!string.IsNullOrEmpty(whereClause))
                            {
                                if (whereClause.Equals(" where "))
                                {
                                    whereClause += " CityId = " + cityId.Value.ToString();
                                }
                                else
                                {
                                    whereClause += " and CityId = " + cityId.Value.ToString();
                                }
                            }
                            else
                            {
                                whereClause += " CityId = " + cityId.Value.ToString();
                            }

                        }

                    }

                    if (zoneId.HasValue)
                    {
                        if (zoneId.Value > 0)
                        {
                            if (!string.IsNullOrEmpty(whereClause))
                            {
                                if (whereClause.Equals(" where "))
                                {
                                    whereClause += " ZoneId = " + zoneId.Value.ToString();
                                }
                                else
                                {
                                    whereClause += " and ZoneId = " + zoneId.Value.ToString();
                                }

                            }
                            else
                            {
                                whereClause += " ZoneId = " + zoneId.Value.ToString();
                            }

                        }

                    }

                    if (districtId.HasValue)
                    {
                        if (districtId.Value > 0)
                        {
                            if (!string.IsNullOrEmpty(whereClause))
                            {
                                if (whereClause.Equals(" where "))
                                {
                                    whereClause += " DistrictId = " + districtId.Value.ToString();
                                }
                                else
                                {
                                    whereClause += " and DistrictId = " + districtId.Value.ToString();
                                }
                            }
                            else
                            {
                                whereClause += " DistrictId = " + districtId.Value.ToString();
                            }

                        }
                    }

                }
                else
                {
                    string[] tmpAddress = address.Split("-");



                    foreach (var item in tmpAddress)
                    {
                        if (counter.Equals(0))
                        {

                            strMelkavanLocationWhereClause += "(MelkavanDb.dbo.AdvertisementAddress.StateId in (select StateId from PublicDb.dbo.States where StateName like N'%" + item + "%') or " +
                                            "MelkavanDb.dbo.AdvertisementAddress.CityId in (select CityId from PublicDb.dbo.Cities where CityName like N'%" + item + "%') or " +
                                            "MelkavanDb.dbo.AdvertisementAddress.ZoneId in (select ZoneId from PublicDb.dbo.Zones where ZoneName like N'%" + item + "%') or " +
                                            "MelkavanDb.dbo.AdvertisementAddress.DistrictId in(select DistrictId from PublicDb.dbo.Districts where DistrictName like N'%" + item + "%'))";

                        }
                        else
                        {
                            strMelkavanLocationWhereClause += "and (MelkavanDb.dbo.AdvertisementAddress.StateId in (select StateId from PublicDb.dbo.States where StateName like N'%" + item + "%') or " +
                                       "MelkavanDb.dbo.AdvertisementAddress.CityId in (select CityId from PublicDb.dbo.Cities where CityName like N'%" + item + "%') or " +
                                       "MelkavanDb.dbo.AdvertisementAddress.ZoneId in (select ZoneId from PublicDb.dbo.Zones where ZoneName like N'%" + item + "%') or " +
                                       "MelkavanDb.dbo.AdvertisementAddress.DistrictId in(select DistrictId from PublicDb.dbo.Districts where DistrictName like N'%" + item + "%'))";


                        }


                        counter++;
                    }

                    strTeniacoLocationWhereClause = strMelkavanLocationWhereClause.Replace("MelkavanDb.dbo.AdvertisementAddress", "TeniacoDb.dbo.PropertyAddress");
                }




                if (whereClause.Equals(" where "))
                {


                    if (string.IsNullOrEmpty(strMelkavanLocationWhereClause) && string.IsNullOrEmpty(strTeniacoLocationWhereClause)
                            && string.IsNullOrEmpty(strMelkavanFeatureWhereClause) && string.IsNullOrEmpty(strTeniacoFeatureWhereClause) && string.IsNullOrEmpty(strMelkavanDescriptionWhereClause) &&
                            string.IsNullOrEmpty(strTeniacoDescriptionWhereClause))
                    {
                        whereClause = "";
                    }

                }
                else
                {
                    if (!whereClause.Equals(" where "))
                    {
                        if (!string.IsNullOrEmpty(strMelkavanLocationWhereClause))
                            strMelkavanLocationWhereClause = " and " + strMelkavanLocationWhereClause;

                        if (!string.IsNullOrEmpty(strTeniacoLocationWhereClause))
                            strTeniacoLocationWhereClause = " and " + strTeniacoLocationWhereClause;


                        if (!string.IsNullOrEmpty(strMelkavanFeatureWhereClause))
                            strMelkavanFeatureWhereClause = " and " + strMelkavanFeatureWhereClause;

                        if (!string.IsNullOrEmpty(strTeniacoFeatureWhereClause))
                            strTeniacoFeatureWhereClause = " and " + strTeniacoFeatureWhereClause;


                        //if (!string.IsNullOrEmpty(strTeniacoDescriptionWhereClause))
                        //    strTeniacoDescriptionWhereClause = " and " + strTeniacoDescriptionWhereClause;
                    }
                }

                #endregion

                #region Participable

                //قابل مشارکت
                if (Participable != null)
                {
                    if (!Participable.Equals(false))
                    {
                        if (whereClause.Equals(" where "))
                        {
                            whereClause += " Participable =  'true' ";
                        }
                        else
                        {
                            whereClause += " and Participable = 'true' ";
                        }
                    }


                }


                #endregion

                #region Exchangeable

                //قابل معاوضه
                if (Exchangeable != null)
                {
                    if (!Exchangeable.Equals(false))
                    {
                        if (whereClause.Equals(" where "))
                        {
                            whereClause += " Exchangeable = 'true' ";
                        }
                        else
                        {
                            whereClause += " and Exchangeable =  'true' ";
                        }
                    }


                }


                #endregion


                #endregion

                if (platform != null)
                {
                    if (platform.Count == 1)
                    {
                        if (platform.FirstOrDefault().Equals(1))//داخلی
                        {
                            if (!string.IsNullOrEmpty(joinTeniacoFeatureValues))
                            {
                                sp = sp.Replace("{joinTeniacoFeatureValues}", joinTeniacoFeatureValues);
                            }
                            else
                            {
                                sp = sp.Replace("{joinTeniacoFeatureValues}", "");
                            }


                            if (!string.IsNullOrEmpty(strTeniacoFeatureWhereClause))
                            {
                                sp = sp.Replace("{strTeniacoFeatureWhereClause}", strTeniacoFeatureWhereClause);
                            }
                            else
                            {
                                sp = sp.Replace("{strTeniacoFeatureWhereClause}", "");
                            }

                            if (!string.IsNullOrEmpty(strTeniacoDescriptionWhereClause))
                            {
                                sp = sp.Replace("{strTeniacoDescriptionWhereClause}", strTeniacoDescriptionWhereClause);
                            }
                            else
                            {
                                sp = sp.Replace("{strTeniacoDescriptionWhereClause}", "");
                            }


                            if (!string.IsNullOrEmpty(strTeniacoLocationWhereClause))
                            {
                                sp = sp.Replace("{strTeniacoLocationWhereClause}", strTeniacoLocationWhereClause);
                            }
                            else
                            {
                                sp = sp.Replace("{strTeniacoLocationWhereClause}", "");
                            }


                            sp = string.Format(sp, whereClause, strTeniacoPrice, whereClause.Replace("AdvertisementTitle", "PropertyCodeName").Replace("AdvertisementDescriptions", "PropertyDescriptions"));


                        }
                        else
                            if (platform.FirstOrDefault().Equals(0))//ملکاوان
                        {

                            if (!string.IsNullOrEmpty(joinMelkavanFeatureValues))
                            {
                                sp = sp.Replace("{joinMelkavanFeatureValues}", joinMelkavanFeatureValues);
                            }
                            else
                            {
                                sp = sp.Replace("{joinMelkavanFeatureValues}", "");
                            }


                            if (!string.IsNullOrEmpty(strMelkavanFeatureWhereClause))
                            {
                                sp = sp.Replace("{strMelkavanFeatureWhereClause}", strMelkavanFeatureWhereClause);
                            }
                            else
                            {
                                sp = sp.Replace("{strMelkavanFeatureWhereClause}", "");
                            }


                            if (!string.IsNullOrEmpty(strMelkavanDescriptionWhereClause))
                            {
                                sp = sp.Replace("{strMelkavanDescriptionWhereClause}", strMelkavanDescriptionWhereClause);
                            }
                            else
                            {
                                sp = sp.Replace("{strMelkavanDescriptionWhereClause}", "");
                            }

                            if (!string.IsNullOrEmpty(strMelkavanLocationWhereClause))
                            {
                                sp = sp.Replace("{strMelkavanLocationWhereClause}", strMelkavanLocationWhereClause);
                            }
                            else
                            {
                                sp = sp.Replace("{strMelkavanLocationWhereClause}", "");
                            }


                            sp = string.Format(sp, whereClause, strMelkavanPrice, whereClause.Replace("AdvertisementTitle", "PropertyCodeName").Replace("AdvertisementDescriptions", "PropertyDescriptions"));

                        }
                    }
                    else
                    if ((platform.Count > 1) || (platform.Count.Equals(0))) //هردو هم داخلی هم ملکاوان
                    {

                        if (!string.IsNullOrEmpty(joinTeniacoFeatureValues) || !string.IsNullOrEmpty(joinMelkavanFeatureValues))
                        {
                            sp = sp.Replace("{joinTeniacoFeatureValues}", joinTeniacoFeatureValues).Replace("{joinMelkavanFeatureValues}", joinMelkavanFeatureValues);
                        }
                        else
                        {
                            sp = sp.Replace("{joinTeniacoFeatureValues}", "").Replace("{joinMelkavanFeatureValues}", "");
                        }



                        if (!string.IsNullOrEmpty(strMelkavanFeatureWhereClause) || !string.IsNullOrEmpty(strTeniacoFeatureWhereClause))
                        {
                            sp = sp.Replace("{strMelkavanFeatureWhereClause}", strMelkavanFeatureWhereClause).Replace("{strTeniacoFeatureWhereClause}", strTeniacoFeatureWhereClause);
                        }
                        else
                        {
                            sp = sp.Replace("{strMelkavanFeatureWhereClause}", "").Replace("{strTeniacoFeatureWhereClause}", "");
                        }



                        if (!string.IsNullOrEmpty(strMelkavanDescriptionWhereClause) || !string.IsNullOrEmpty(strTeniacoDescriptionWhereClause))
                        {
                            sp = sp.Replace("{strMelkavanDescriptionWhereClause}", strMelkavanDescriptionWhereClause).Replace("{strTeniacoDescriptionWhereClause}", strTeniacoDescriptionWhereClause);
                        }
                        else
                        {
                            sp = sp.Replace("{strMelkavanDescriptionWhereClause}", "").Replace("{strTeniacoDescriptionWhereClause}", "");
                        }


                        if (!string.IsNullOrEmpty(strMelkavanLocationWhereClause) || !string.IsNullOrEmpty(strTeniacoLocationWhereClause))
                        {
                            sp = sp.Replace("{strMelkavanLocationWhereClause}", strMelkavanLocationWhereClause).Replace("{strTeniacoLocationWhereClause}", strTeniacoLocationWhereClause);
                        }
                        else
                        {
                            sp = sp.Replace("{strMelkavanLocationWhereClause}", "").Replace("{strTeniacoLocationWhereClause}", "");
                        }

                        sp = string.Format(sp, whereClause, strMelkavanPrice, strTeniacoPrice, whereClause.Replace("AdvertisementTitle", "PropertyCodeName").Replace("AdvertisementDescriptions", "PropertyDescriptions"));


                        //sp = string.Format(sp, whereClause, strMelkavanPrice, strTeniacoPrice, whereClause.Replace("AdvertisementTitle", "PropertyCodeName").Replace("MelkavanDb.dbo.Advertisement.AdvertisementDescriptions", "TeniacoDb.dbo.Properties.PropertyDescriptions "));

                    }
                }



                var list = teniacoApiDb.PropertiesAdvanceSearchVM.FromSqlRaw(sp).AsEnumerable().Distinct();

                #region load extra data

                #region ConsultatantUsers
                //اگر مشاور بود
                var levelNames = new List<string>();
                var user = consoleBusiness.CmsDb.Users.Where(c => c.UserId.Equals(ThisUserId)).FirstOrDefault();
                var ParentUserId = user.ParentUserId.Value;
                if (user != null)
                {
                    if (user.UserId > 0)
                    {
                        var levelIds = consoleBusiness.CmsDb.UsersLevels.Where(c => c.UserId.Equals(user.UserId)).Select(c => c.LevelId).ToList();
                        levelNames = consoleBusiness.CmsDb.Levels.Where(c => levelIds.Contains(c.LevelId)).Select(c => c.LevelName).ToList();
                    }
                }

                #endregion

                #region ChildUsers
                if (platform.Count == 1)
                {
                    if (platform.FirstOrDefault().Equals(1))//داخلی
                    {
                        #region ChildUsers
                        if (childsUsersIds != null)
                        {
                            if (childsUsersIds.Count > 1)
                            {
                                if (levelNames.Contains("مشاور"))
                                {
                                    if (levelNames.Contains("مدیر املاک"))
                                    {
                                        //دیتاهایی که خودش و مشاورینش زده است
                                        //دیتاهایی که خودش مشاور آن بوده است

                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                          c.ParentUserId.Equals(ThisUserId) ||
                                          c.UserIdCreator.Equals(ThisUserId) ||
                                          c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                        list = list.Where(c => c.UserIdCreator.HasValue)
                                                   .Where(c => c.ConsultantUserId.HasValue)
                                                   .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                   userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                    }
                                    else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                                    {
                                        //دیتاهایی که خودش و مشاورینش زده است
                                        //دیتاهایی که خودش مشاور آن بوده است

                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                            c.ParentUserId.Equals(ThisUserId) ||
                                            c.UserIdCreator.Equals(ThisUserId) ||
                                            c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                        list = list.Where(c => c.UserIdCreator.HasValue)
                                                    .Where(c => c.ConsultantUserId.HasValue)
                                                    .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                    userIds.Contains(c.ConsultantUserId.Value)).ToList();

                                    }
                                    else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                                    {

                                        //دیتاهایی که خودش زده است
                                        //دیتاهایی که خودش مشاور آن بوده است

                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                            c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                        list = list.Where(c => c.UserIdCreator.HasValue)
                                                  .Where(c => c.ConsultantUserId.HasValue)
                                                  .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                  userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                    }
                                    else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                                    {

                                        //دیتاهایی که زیرگروهانش زده است
                                        //دیتاهایی که خودش مشاور آن بوده است

                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                          c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                        list = list.Where(c => c.UserIdCreator.HasValue)
                                                    .Where(c => c.ConsultantUserId.HasValue)
                                                    .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                    userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                    }
                                    else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                                    {
                                        //دیتاهایی که والد آن زده است
                                        //دیتاهایی که خودش مشاور آن بوده است
                                        var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


                                        list = list.Where(c => c.UserIdCreator.HasValue)
                                                   .Where(c => c.ConsultantUserId.HasValue)
                                                   .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                   userIds.Contains(c.ConsultantUserId.Value)).ToList();

                                    }
                                    else
                                    {
                                        //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
                                        //پس رگوردهایی که مشاور آن است را فقط لود میکند
                                        list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
                                    }


                                }
                                else
                                {
                                    list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                                }




                            }
                            else
                            {
                                if (childsUsersIds.Count == 1)
                                {
                                    if (childsUsersIds.FirstOrDefault() > 0)
                                    {

                                        if (levelNames.Contains("مشاور"))
                                        {
                                            if (levelNames.Contains("مدیر املاک"))
                                            {
                                                //دیتاهایی که خودش و مشاورینش زده است
                                                //دیتاهایی که خودش مشاور آن بوده است

                                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                                  c.ParentUserId.Equals(ThisUserId) ||
                                                  c.UserIdCreator.Equals(ThisUserId) ||
                                                  c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                                list = list.Where(c => c.UserIdCreator.HasValue)
                                                   .Where(c => c.ConsultantUserId.HasValue)
                                                   .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                   userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                            }
                                            else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                                            {
                                                //دیتاهایی که خودش و مشاورینش زده است
                                                //دیتاهایی که خودش مشاور آن بوده است

                                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                                    c.ParentUserId.Equals(ThisUserId) ||
                                                    c.UserIdCreator.Equals(ThisUserId) ||
                                                    c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                                list = list.Where(c => c.UserIdCreator.HasValue)
                                                  .Where(c => c.ConsultantUserId.HasValue)
                                                  .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                  userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                            }
                                            else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                                            {

                                                //دیتاهایی که خودش زده است
                                                //دیتاهایی که خودش مشاور آن بوده است

                                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                                    c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                                list = list.Where(c => c.UserIdCreator.HasValue)
                                                  .Where(c => c.ConsultantUserId.HasValue)
                                                  .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                  userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                            }
                                            else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                                            {

                                                //دیتاهایی که زیرگروهانش زده است
                                                //دیتاهایی که خودش مشاور آن بوده است

                                                var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                                  c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);

                                                list = list.Where(c => c.UserIdCreator.HasValue)
                                                 .Where(c => c.ConsultantUserId.HasValue)
                                                 .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                 userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                            }
                                            else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                                            {
                                                //دیتاهایی که والد آن زده است
                                                //دیتاهایی که خودش مشاور آن بوده است
                                                var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


                                                list = list.Where(c => c.UserIdCreator.HasValue)
                                                    .Where(c => c.ConsultantUserId.HasValue)
                                                    .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                    userIds.Contains(c.ConsultantUserId.Value)).ToList();

                                            }
                                            else
                                            {
                                                //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
                                                //پس رگوردهایی که مشاور آن است را فقط لود میکند
                                                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
                                            }



                                        }
                                        else
                                        {
                                            list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                                        }
                                    }

                                }
                                else if (childsUsersIds.Count == 0)
                                {

                                    if (levelNames.Contains("مشاور"))
                                    {
                                        if (levelNames.Contains("مدیر املاک"))
                                        {
                                            //دیتاهایی که خودش و مشاورینش زده است
                                            //دیتاهایی که خودش مشاور آن بوده است

                                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                              c.ParentUserId.Equals(ThisUserId) ||
                                              c.UserIdCreator.Equals(ThisUserId) ||
                                              c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                            list = list.Where(c => c.UserIdCreator.HasValue)
                                                          .Where(c => c.ConsultantUserId.HasValue)
                                                          .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                          userIds.Contains(c.ConsultantUserId.Value)).ToList();

                                        }
                                        else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                                        {
                                            //دیتاهایی که خودش و مشاورینش زده است
                                            //دیتاهایی که خودش مشاور آن بوده است

                                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                                c.ParentUserId.Equals(ThisUserId) ||
                                                c.UserIdCreator.Equals(ThisUserId) ||
                                                c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                            list = list.Where(c => c.UserIdCreator.HasValue)
                                                 .Where(c => c.ConsultantUserId.HasValue)
                                                 .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                 userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                        }
                                        else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                                        {

                                            //دیتاهایی که خودش زده است
                                            //دیتاهایی که خودش مشاور آن بوده است

                                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                                c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                            list = list.Where(c => c.UserIdCreator.HasValue)
                                                 .Where(c => c.ConsultantUserId.HasValue)
                                                 .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                 userIds.Contains(c.ConsultantUserId.Value)).ToList();

                                        }
                                        else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                                        {

                                            //دیتاهایی که زیرگروهانش زده است
                                            //دیتاهایی که خودش مشاور آن بوده است

                                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                              c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);

                                            list = list.Where(c => c.UserIdCreator.HasValue)
                                                 .Where(c => c.ConsultantUserId.HasValue)
                                                 .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                 userIds.Contains(c.ConsultantUserId.Value)).ToList();

                                        }
                                        else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                                        {
                                            //دیتاهایی که والد آن زده است
                                            //دیتاهایی که خودش مشاور آن بوده است
                                            var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


                                            list = list.Where(c => c.UserIdCreator.HasValue)
                                                 .Where(c => c.ConsultantUserId.HasValue)
                                                 .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                 userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                        }
                                        else
                                        {
                                            //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
                                            //پس رگوردهایی که مشاور آن است را فقط لود میکند
                                            list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
                                        }


                                    }
                                    else
                                    {
                                        list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                                    }


                                }
                            }
                        }
                        #endregion

                        #region ChildUsers - old 2
                        //if (childsUsersIds != null)
                        //{
                        //    if (childsUsersIds.Count > 1)
                        //    {

                        //        if (levelNames.Contains("مشاور"))
                        //        {
                        //            var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

                        //            //var listConsultatant = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).ToList();

                        //            if (listOwner.Count() > 0)
                        //            {
                        //                //گاربر لاگین شده دیتا ثبت کرده است
                        //                //دیتایی که مشاور آن است را لود میکند
                        //                list = list.Where(p => p.ConsultantUserId == user.UserId || childsUsersIds.Contains(p.UserIdCreator.Value));

                        //                //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

                        //                //list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                        //                //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

                        //            }
                        //            else
                        //            {
                        //                //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
                        //                //پس رگوردهایی که مشاور آن است را فقط لود میکند
                        //                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
                        //            }


                        //        }
                        //        else
                        //        {
                        //            list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                        //        }


                        //    }
                        //    else
                        //    {
                        //        if (childsUsersIds.Count == 1)
                        //        {
                        //            if (childsUsersIds.FirstOrDefault() > 0)
                        //            {
                        //                if (levelNames.Contains("مشاور"))
                        //                {

                        //                    var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

                        //                    if (listOwner.Count() > 0)
                        //                    {
                        //                        //گاربر لاگین شده دیتا ثبت کرده است
                        //                        //دیتایی که مشاور آن است را لود میکند

                        //                        list = list.Where(p => p.ConsultantUserId == user.UserId || childsUsersIds.Contains(p.UserIdCreator.Value));
                        //                        //list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                        //                        //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

                        //                    }
                        //                    else
                        //                    {
                        //                        //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
                        //                        //پس رگوردهایی که مشاور آن است را فقط لود میکند
                        //                        list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
                        //                    }


                        //                }
                        //                else
                        //                {
                        //                    list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                        //                }

                        //            }
                        //        }
                        //        else if (childsUsersIds.Count == 0)
                        //        {
                        //            if (levelNames.Contains("مشاور"))
                        //            {
                        //                var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

                        //                if (listOwner.Count() > 0)
                        //                {
                        //                    //گاربر لاگین شده دیتا ثبت کرده است
                        //                    //دیتایی که مشاور آن است را لود میکند

                        //                    list = list.Where(p => p.ConsultantUserId == user.UserId || childsUsersIds.Contains(p.UserIdCreator.Value));
                        //                    //list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                        //                    //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

                        //                }
                        //                else
                        //                {
                        //                    //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
                        //                    //پس رگوردهایی که مشاور آن است را فقط لود میکند
                        //                    list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
                        //                }


                        //            }
                        //            else
                        //            {
                        //                list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                        //            }
                        //        }
                        //    }
                        //}
                        #endregion

                        #region ChildUsers - old
                        //if (childsUsersIds != null)
                        //{
                        //    if (childsUsersIds.Count > 1)
                        //    {

                        //        if (levelNames.Contains("مشاور"))
                        //        {
                        //            var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

                        //            if (listOwner.Count() > 0)
                        //            {
                        //                //گاربر لاگین شده دیتا ثبت کرده است
                        //                //دیتایی که مشاور آن است را لود میکند
                        //                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId) || childsUsersIds.Contains(p.UserIdCreator.Value));
                        //                //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

                        //            }
                        //            else
                        //            {
                        //                //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
                        //                //پس رگوردهایی که مشاور آن است را فقط لود میکند
                        //                list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
                        //            }


                        //        }
                        //        else
                        //        {
                        //            list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                        //        }


                        //    }
                        //    else
                        //    {
                        //        if (childsUsersIds.Count == 1)
                        //        {
                        //            if (childsUsersIds.FirstOrDefault() > 0)
                        //            {
                        //                if (levelNames.Contains("مشاور"))
                        //                {
                        //                    var listOwner = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

                        //                    if (listOwner.Count() > 0)
                        //                    {
                        //                        //گاربر لاگین شده دیتا ثبت کرده است
                        //                        //دیتایی که مشاور آن است را لود میکند

                        //                        list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId) || childsUsersIds.Contains(p.UserIdCreator.Value));
                        //                        //list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId)).Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));

                        //                    }
                        //                    else
                        //                    {
                        //                        //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
                        //                        //پس رگوردهایی که مشاور آن است را فقط لود میکند
                        //                        list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
                        //                    }


                        //                }
                        //                else
                        //                {
                        //                    list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                        //                }

                        //            }
                        //        }
                        //    }
                        //}
                        #endregion

                    }
                }
                else if ((platform.Count > 1) || (platform.Count.Equals(0)))  //هردو هم داخلی هم ملکاوان
                {

                    #region ChildUsers
                    if (childsUsersIds != null)
                    {
                        if (childsUsersIds.Count > 1)
                        {
                            if (levelNames.Contains("مشاور"))
                            {
                                if (levelNames.Contains("مدیر املاک"))
                                {
                                    //دیتاهایی که خودش و مشاورینش زده است
                                    //دیتاهایی که خودش مشاور آن بوده است

                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                      c.ParentUserId.Equals(ThisUserId) ||
                                      c.UserIdCreator.Equals(ThisUserId) ||
                                      c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                    list = list.Where(c => c.UserIdCreator.HasValue)
                                               .Where(c => c.ConsultantUserId.HasValue)
                                               .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                               userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                }
                                else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                                {
                                    //دیتاهایی که خودش و مشاورینش زده است
                                    //دیتاهایی که خودش مشاور آن بوده است

                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                        c.ParentUserId.Equals(ThisUserId) ||
                                        c.UserIdCreator.Equals(ThisUserId) ||
                                        c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                    list = list.Where(c => c.UserIdCreator.HasValue)
                                                .Where(c => c.ConsultantUserId.HasValue)
                                                .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                userIds.Contains(c.ConsultantUserId.Value)).ToList();

                                }
                                else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                                {

                                    //دیتاهایی که خودش زده است
                                    //دیتاهایی که خودش مشاور آن بوده است

                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                        c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                    list = list.Where(c => c.UserIdCreator.HasValue)
                                              .Where(c => c.ConsultantUserId.HasValue)
                                              .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                              userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                }
                                else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                                {

                                    //دیتاهایی که زیرگروهانش زده است
                                    //دیتاهایی که خودش مشاور آن بوده است

                                    var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                      c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                    list = list.Where(c => c.UserIdCreator.HasValue)
                                                .Where(c => c.ConsultantUserId.HasValue)
                                                .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                }
                                else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                                {
                                    //دیتاهایی که والد آن زده است
                                    //دیتاهایی که خودش مشاور آن بوده است
                                    var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


                                    list = list.Where(c => c.UserIdCreator.HasValue)
                                               .Where(c => c.ConsultantUserId.HasValue)
                                               .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                               userIds.Contains(c.ConsultantUserId.Value)).ToList();

                                }
                                else
                                {
                                    //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
                                    //پس رگوردهایی که مشاور آن است را فقط لود میکند
                                    list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
                                }


                            }
                            else
                            {
                                list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                            }




                        }
                        else
                        {
                            if (childsUsersIds.Count == 1)
                            {
                                if (childsUsersIds.FirstOrDefault() > 0)
                                {

                                    if (levelNames.Contains("مشاور"))
                                    {
                                        if (levelNames.Contains("مدیر املاک"))
                                        {
                                            //دیتاهایی که خودش و مشاورینش زده است
                                            //دیتاهایی که خودش مشاور آن بوده است

                                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                              c.ParentUserId.Equals(ThisUserId) ||
                                              c.UserIdCreator.Equals(ThisUserId) ||
                                              c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                            list = list.Where(c => c.UserIdCreator.HasValue)
                                               .Where(c => c.ConsultantUserId.HasValue)
                                               .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                               userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                        }
                                        else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                                        {
                                            //دیتاهایی که خودش و مشاورینش زده است
                                            //دیتاهایی که خودش مشاور آن بوده است

                                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                                c.ParentUserId.Equals(ThisUserId) ||
                                                c.UserIdCreator.Equals(ThisUserId) ||
                                                c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                            list = list.Where(c => c.UserIdCreator.HasValue)
                                              .Where(c => c.ConsultantUserId.HasValue)
                                              .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                              userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                        }
                                        else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                                        {

                                            //دیتاهایی که خودش زده است
                                            //دیتاهایی که خودش مشاور آن بوده است

                                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                                c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                            list = list.Where(c => c.UserIdCreator.HasValue)
                                              .Where(c => c.ConsultantUserId.HasValue)
                                              .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                              userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                        }
                                        else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                                        {

                                            //دیتاهایی که زیرگروهانش زده است
                                            //دیتاهایی که خودش مشاور آن بوده است

                                            var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                              c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);

                                            list = list.Where(c => c.UserIdCreator.HasValue)
                                             .Where(c => c.ConsultantUserId.HasValue)
                                             .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                             userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                        }
                                        else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                                        {
                                            //دیتاهایی که والد آن زده است
                                            //دیتاهایی که خودش مشاور آن بوده است
                                            var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


                                            list = list.Where(c => c.UserIdCreator.HasValue)
                                                .Where(c => c.ConsultantUserId.HasValue)
                                                .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                userIds.Contains(c.ConsultantUserId.Value)).ToList();

                                        }
                                        else
                                        {
                                            //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
                                            //پس رگوردهایی که مشاور آن است را فقط لود میکند
                                            list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
                                        }



                                    }
                                    else
                                    {
                                        list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                                    }
                                }

                            }
                            else if (childsUsersIds.Count == 0)
                            {

                                if (levelNames.Contains("مشاور"))
                                {
                                    if (levelNames.Contains("مدیر املاک"))
                                    {
                                        //دیتاهایی که خودش و مشاورینش زده است
                                        //دیتاهایی که خودش مشاور آن بوده است

                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                          c.ParentUserId.Equals(ThisUserId) ||
                                          c.UserIdCreator.Equals(ThisUserId) ||
                                          c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                        list = list.Where(c => c.UserIdCreator.HasValue)
                                                      .Where(c => c.ConsultantUserId.HasValue)
                                                      .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                                      userIds.Contains(c.ConsultantUserId.Value)).ToList();

                                    }
                                    else if (levelNames.Contains("مشاور املاک - کاربر و زیر گروه ها"))
                                    {
                                        //دیتاهایی که خودش و مشاورینش زده است
                                        //دیتاهایی که خودش مشاور آن بوده است

                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                            c.ParentUserId.Equals(ThisUserId) ||
                                            c.UserIdCreator.Equals(ThisUserId) ||
                                            c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                        list = list.Where(c => c.UserIdCreator.HasValue)
                                             .Where(c => c.ConsultantUserId.HasValue)
                                             .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                             userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                    }
                                    else if (levelNames.Contains("مشاور املاک - فقط خود کاربر"))
                                    {

                                        //دیتاهایی که خودش زده است
                                        //دیتاهایی که خودش مشاور آن بوده است

                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                            c.UserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);


                                        list = list.Where(c => c.UserIdCreator.HasValue)
                                             .Where(c => c.ConsultantUserId.HasValue)
                                             .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                             userIds.Contains(c.ConsultantUserId.Value)).ToList();

                                    }
                                    else if (levelNames.Contains("مشاور املاک - فقط زیر گروه ها"))
                                    {

                                        //دیتاهایی که زیرگروهانش زده است
                                        //دیتاهایی که خودش مشاور آن بوده است

                                        var userIds = consoleBusiness.CmsDb.Users.Where(c =>
                                          c.ParentUserId.Equals(ThisUserId)).ToList().Select(c => c.UserId);

                                        list = list.Where(c => c.UserIdCreator.HasValue)
                                             .Where(c => c.ConsultantUserId.HasValue)
                                             .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                             userIds.Contains(c.ConsultantUserId.Value)).ToList();

                                    }
                                    else if (levelNames.Contains("مشاور املاک - والد و زیر گروه ها"))
                                    {
                                        //دیتاهایی که والد آن زده است
                                        //دیتاهایی که خودش مشاور آن بوده است
                                        var userIds = consoleBusiness.CmsDb.Users.Where(c => c.ParentUserId.Equals(ParentUserId)).ToList().Select(c => c.UserId);


                                        list = list.Where(c => c.UserIdCreator.HasValue)
                                             .Where(c => c.ConsultantUserId.HasValue)
                                             .Where(c => userIds.Contains(c.UserIdCreator.Value) ||
                                             userIds.Contains(c.ConsultantUserId.Value)).ToList();


                                    }
                                    else
                                    {
                                        //کاربر لاگین شده هیچ دیتا ای ثبت نکرده است
                                        //پس رگوردهایی که مشاور آن است را فقط لود میکند
                                        list = list.Where(p => p.ConsultantUserId.HasValue).Where(p => p.ConsultantUserId.Equals(user.UserId));
                                    }


                                }
                                else
                                {
                                    list = list.Where(p => p.UserIdCreator.HasValue).Where(p => childsUsersIds.Contains(p.UserIdCreator.Value));
                                }


                            }
                        }
                    }
                    #endregion


                }

                #endregion


                #region Names and Pagination


                try
                {
                    if (string.IsNullOrEmpty(jtSorting))
                    {
                        listCount = list.Count();

                        if (listCount > jtPageSize)
                        {
                            list = list.OrderByDescending(s => s.AdvertisementId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        }
                        else
                        {


                            list = list.OrderByDescending(s => s.AdvertisementId).ToList();
                        }
                    }
                    else
                    {
                        listCount = list.Count();

                        if (listCount > jtPageSize)
                        {
                            switch (jtSorting)
                            {
                                case "AdvertisementTitle ASC":
                                    list = list.OrderBy(l => l.AdvertisementTitle);
                                    break;
                                case "AdvertisementTitle DESC":
                                    list = list.OrderByDescending(l => l.AdvertisementTitle);
                                    break;
                            }

                            if (string.IsNullOrEmpty(jtSorting))
                                propertiesAdvanceSearchVMList = list.OrderByDescending(s => s.AdvertisementId)
                                         .Skip(jtStartIndex).Take(jtPageSize).ToList();
                            else
                                propertiesAdvanceSearchVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                        }
                        else
                        {

                            propertiesAdvanceSearchVMList = list.ToList();
                        }
                    }




                    var propertyIds = list.Select(p => p.AdvertisementId).ToList().Distinct();


                    if (platform != null)
                    {
                        if (platform.Count == 1)
                        {
                            if (platform.FirstOrDefault().Equals(1))//داخلی
                            {

                                countsp = @"select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as PropertyDataTypeCountId, PropertyId , DataType, 'Properties' RecordType, Count
                                              from

                                                   (
                                                   SELECT PropertyId, PropertyFileType as DataType, COUNT(PropertyFileType) as Count
                                                     FROM [TeniacoDb].[dbo].[PropertyFiles]
                                                     group by PropertyId, PropertyFileType


                               		union all


                                                     select PropertyId, 'price' DataType, count(PropertyPriceHistoryId) as Count
                                                     from [TeniacoDb].[dbo].[PropertiesPricesHistories]
                                                       group by PropertyId
                                                   ) as Counts";

                            }
                            else
                                if (platform.FirstOrDefault().Equals(0))//ملکاوان
                            {
                                countsp = @"select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as PropertyDataTypeCountId, PropertyId, DataType, 'Advertisement' RecordType, Count
                                              from

                                                    (
                                                    SELECT AdvertisementId as PropertyId, AdvertisementFileType as DataType, COUNT(AdvertisementFileType) as Count
                                                      FROM [MelkavanDb].[dbo].[AdvertisementFiles]
                                                      group by AdvertisementId , AdvertisementFileType


                                                      union all


                                                      select AdvertisementId as PropertyId, 'price' DataType, count(AdvertisementPriceHistoryId) as Count
                                                      from [MelkavanDb].[dbo].[AdvertisementPricesHistories]
                                                        group by AdvertisementId 
                                                    ) as Counts";
                            }
                        }
                        else
                        if ((platform.Count > 1) || (platform.Count.Equals(0))) //هردو هم داخلی هم ملکاوان
                        {

                            countsp = @"
                                        select distinct * from (

                                        					select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as PropertyDataTypeCountId, PropertyId, DataType, 'Properties' RecordType, Count
                                        						 from           
                                        							  (
                                        							  SELECT PropertyId, PropertyFileType as DataType, COUNT(PropertyFileType) as Count
                                        								FROM [TeniacoDb].[dbo].[PropertyFiles]
                                        								group by PropertyId, PropertyFileType


                                        								union all


                                        								select PropertyId, 'price' DataType, count(PropertyPriceHistoryId) as Count
                                        								from [TeniacoDb].[dbo].[PropertiesPricesHistories]
                                        								  group by PropertyId

                                        							  ) as Counts


                                        						union all


                                        	select ROW_NUMBER() OVER (ORDER BY (SELECT 1)) as AdvertisementDataTypeCountId, AdvertisementId, DataType, 'Advertisement' RecordType, Count
                                        						from

                                        							  (
                                        							  SELECT AdvertisementId, AdvertisementFileType as DataType, COUNT(AdvertisementFileType) as Count
                                        								FROM [MelkavanDb].[dbo].[AdvertisementFiles]
                                        								group by AdvertisementId, AdvertisementFileType


                                        								union all


                                        								select AdvertisementId, 'price' DataType, count(AdvertisementPriceHistoryId) as Count
                                        								from [MelkavanDb].[dbo].[AdvertisementPricesHistories]
                                        								  group by AdvertisementId

                                                   ) as Counts
                                        				) as tmp  ";
                        }
                    }


                    var propertyDataTypeCounts = teniacoApiDb.PropertyDataTypeCounts.FromSqlRaw(countsp).Where(p => propertyIds.Contains(p.PropertyId)).ToList();

                    #region Adress

                    var stateIds = list.Where(p => p.StateId.HasValue).Select(p => p.StateId.Value).ToList();
                    var states = publicApiDb.States.Where(s => stateIds.Contains(s.StateId)).ToList();

                    var cityIds = list.Where(p => p.CityId.HasValue).Select(p => p.CityId.Value).ToList();
                    var cities = publicApiDb.Cities.Where(s => cityIds.Contains(s.CityId)).ToList();

                    var zoneIds = list.Where(p => p.ZoneId.HasValue).Select(p => p.ZoneId.Value).ToList();
                    var zones = publicApiDb.Zones.Where(s => zoneIds.Contains(s.ZoneId)).ToList();

                    var districtIds = list.Where(p => p.DistrictId.HasValue).Select(p => p.DistrictId.Value).ToList();
                    var districts = publicApiDb.Districts.Where(s => districtIds.Contains(s.DistrictId)).ToList();

                    #endregion

                    #region PropertyOwners

                    var PropertyOwners = teniacoApiDb.PropertyOwners.Where(p => propertyIds.Contains(p.PropertyId)).ToList();

                    var personsIds = PropertyOwners.Where(c => c.OwnerType.Equals("persons")).Select(c => c.OwnerId).Distinct().ToList();

                    var persons = publicApiDb.Persons.Where(p => personsIds.Contains(p.PersonId)).ToList();


                    var userIds = PropertyOwners.Where(c => c.OwnerType.Equals("users")).Select(c => c.OwnerId).Distinct().ToList();

                    var users = consoleBusiness.CmsDb.Users.Where(c => userIds.Contains(c.UserId)).Distinct().ToList();

                    var usersProfile = consoleBusiness.CmsDb.UsersProfile.Where(c => userIds.Contains(c.UserId)).Distinct().ToList();

                    #endregion

                    #region AdvertisementOwners

                    var AdvertisementOwners = melkavanApiDb.AdvertisementOwners.Where(p => propertyIds.Contains(p.AdvertisementId)).ToList();

                    var userIdsOfAdvertisemet = AdvertisementOwners.Where(c => c.OwnerType.Equals("users")).Select(c => c.OwnerId).Distinct().ToList();

                    var usersOfAdvertisement = consoleBusiness.CmsDb.Users.Where(c => userIdsOfAdvertisemet.Contains(c.UserId)).Distinct().ToList();

                    var usersProfileOfAdvertisement = consoleBusiness.CmsDb.UsersProfile.Where(c => userIdsOfAdvertisemet.Contains(c.UserId)).Distinct().ToList();
                    #endregion

                    #region Consultants

                    var consultantUserIds = list.Where(p => p.ConsultantUserId.HasValue).Select(p => p.ConsultantUserId).ToList().Distinct();
                    var userProfilesOfConsultant = consoleBusiness.CmsDb.UsersProfile.Where(c => consultantUserIds.Contains(c.UserId)).ToList();

                    #endregion

                    #region Advertiser

                    var advertiserIds = list.Where(p => p.AdvertiserId.HasValue).Select(p => p.AdvertiserId).ToList().Distinct();
                    var usersProfileOfAdvertisers = consoleBusiness.CmsDb.UsersProfile.Where(c => advertiserIds.Contains(c.UserId)).ToList();

                    #endregion

                    #region PropertiesPriceHistories


                    var PropertiesPriceHistories = teniacoApiDb.PropertiesPricesHistories.Where(p => propertyIds.Contains(p.PropertyId)).ToList();

                    #endregion
                    var tmpList = list.Distinct();

                    foreach (var item in tmpList)
                    {

                        #region Count of Documents
                        if (propertyDataTypeCounts.Where(p => p.PropertyId.Equals(item.AdvertisementId) && item.RecordType.Equals(p.RecordType)).Any())
                        {
                            var propertyDataTypeCount = propertyDataTypeCounts.Where(p => p.PropertyId.Equals(item.AdvertisementId)).ToList();

                            item.CountOfDocs = propertyDataTypeCount.Where(p => p.DataType.Equals("docs")).FirstOrDefault()?.Count;
                            item.CountOfMaps = propertyDataTypeCount.Where(p => p.DataType.Equals("maps")).FirstOrDefault()?.Count;
                            item.CountOfMedia = propertyDataTypeCount.Where(p => p.DataType.Equals("media")).FirstOrDefault()?.Count;
                            item.CountOfPrices = propertyDataTypeCount.Where(p => p.DataType.Equals("price")).FirstOrDefault()?.Count;

                        }
                        #endregion

                        #region Address

                        var state = states.Where(s => s.StateId.Equals(item.StateId)).FirstOrDefault();
                        if (state != null)
                        {
                            item.StateName = state.StateName;
                        }

                        var city = cities.Where(c => c.CityId.Equals(item.CityId)).FirstOrDefault();
                        if (city != null)
                        {
                            item.CityName = city.CityName;
                        }

                        if (item.ZoneId.HasValue)
                        {
                            var zone = zones.Where(z => z.ZoneId.Equals(item.ZoneId.Value)).FirstOrDefault();
                            if (zone != null)
                            {
                                item.ZoneName = zone.ZoneName;
                            }
                        }

                        if (item.DistrictId.HasValue)
                        {
                            var district = districts.Where(z => z.DistrictId.Equals(item.DistrictId.Value)).FirstOrDefault();
                            if (district != null)
                            {
                                item.DistrictName = district.DistrictName;

                            }
                        }

                        #endregion

                        #region Consultatnt
                        if (item.ConsultantUserId.HasValue)
                        {

                            var consultatant = userProfilesOfConsultant.Where(c => c.UserId.Equals(item.ConsultantUserId.Value)).FirstOrDefault();

                            if (consultatant != null)
                            {
                                item.ConsultantName = consultatant.Family;

                            }
                        }
                        #endregion

                        #region Advertiser
                        if (item.AdvertiserId.HasValue)
                        {

                            var advertiser = usersProfileOfAdvertisers.Where(c => c.UserId.Equals(item.AdvertiserId.Value)).FirstOrDefault();

                            if (advertiser != null)
                            {
                                item.AdvertiserName = advertiser.Family;

                            }
                        }
                        #endregion

                        #region PropertyOwners
                        if (item.RecordType == "Properties")
                        {
                            if (PropertyOwners.Where(p => p.PropertyId.Equals(item.AdvertisementId)).Any())
                            {
                                item.PropertyOwnersVM = new List<PropertyOwnersVM>();


                                var propertyOwner = PropertyOwners.Where(p => p.PropertyId.Equals(item.AdvertisementId)).ToList();
                                var family = "";
                                foreach (var owner in propertyOwner)
                                {


                                    item.PropertyOwnersVM = propertyOwner.Select(c => new PropertyOwnersVM
                                    {
                                        PropertyOwnerId = c.PropertyOwnerId,
                                        OwnerId = c.OwnerId,
                                        Share = c.Share,
                                        SharePercent = c.SharePercent,
                                        PropertyId = c.PropertyId,
                                        OwnerType = c.OwnerType,

                                        OwnerPersonFamily = persons.Where(p => p.PersonId.Equals(c.OwnerId)).Any() ?
                                           persons.Where(p => p.PersonId.Equals(c.OwnerId)).FirstOrDefault().Family : "",

                                        OwnerUserFamily = usersProfile.Where(p => p.UserId.Equals(c.OwnerId)).Any() ?
                                           usersProfile.Where(p => p.UserId.Equals(c.OwnerId)).FirstOrDefault().Family : ""

                                    }).ToList();

                                }

                            }
                        }

                        #endregion

                        #region AdvertisementOwners

                        if (item.RecordType == "Advertisement")
                        {
                            if (AdvertisementOwners.Where(p => p.AdvertisementId.Equals(item.AdvertisementId)).Any())
                            {
                                item.AdvertisementOwnersVM = new List<AdvertisementOwnersVM>();


                                var advertisementOwner = AdvertisementOwners.Where(p => p.AdvertisementId.Equals(item.AdvertisementId)).ToList();
                                var family = "";
                                foreach (var owner in advertisementOwner)
                                {


                                    item.AdvertisementOwnersVM = advertisementOwner.Select(c => new AdvertisementOwnersVM
                                    {
                                        AdvertisementOwnerId = c.AdvertisementOwnerId,
                                        OwnerId = c.OwnerId,
                                        Share = c.Share,
                                        SharePercent = c.SharePercent,
                                        AdvertisementId = c.AdvertisementId,
                                        OwnerType = c.OwnerType,
                                        OwnerUserFamily = usersProfileOfAdvertisement.Where(p => p.UserId.Equals(c.OwnerId)).Any() ?
                                           usersProfileOfAdvertisement.Where(p => p.UserId.Equals(c.OwnerId)).FirstOrDefault().Family : ""

                                    }).ToList();

                                }

                            }

                        }
                        #endregion

                        #region PropertiesPriceHistories


                        if (item.RecordType == "Properties")
                        {
                            var priceHistory = PropertiesPriceHistories.Where(s => s.PropertyId.Equals(item.AdvertisementId)).LastOrDefault();

                            if (priceHistory != null)
                            {
                                if (priceHistory.OfferPriceType.Equals(0)) // متری
                                {
                                    item.LastPrice = priceHistory.CalculatedOfferPrice;
                                }
                                else if (priceHistory.OfferPriceType.Equals(1)) // کل
                                {
                                    item.LastPrice = priceHistory.OfferPrice;
                                }
                            }
                        }

                        else if (item.RecordType == "Advertisement")
                        {
                            var advertisementPriceHistories = melkavanApiDb.AdvertisementPricesHistories.Where(p => propertyIds.Contains(p.AdvertisementId)).ToList();

                            var priceHistory = advertisementPriceHistories.Where(s => s.AdvertisementId.Equals(item.AdvertisementId)).LastOrDefault();

                            if (priceHistory != null)
                            {
                                if (priceHistory.RentPrice.Equals(null)) // قیمت فروش
                                {
                                    item.LastPrice = priceHistory.OfferPrice;
                                }
                                else // قیمت اجاره
                                {
                                    item.LastPrice = null;
                                }
                            }
                        }



                        #endregion

                    }

                    propertiesAdvanceSearchVMList = tmpList.Distinct().ToList();

                }
                catch (Exception exc)
                { }
                #endregion

                #endregion



            }
            catch (Exception exc)
            { }

            return propertiesAdvanceSearchVMList;
        }



        public long AddToProperties(PropertiesVM propertiesVM,
            IPublicApiBusiness publicApiBusiness)
        {
            using (var transaction = teniacoApiDb.Database.BeginTransaction())
            {
                try
                {
                    Entities.Properties properties = _mapper.Map<PropertiesVM, Entities.Properties>(propertiesVM);

                    teniacoApiDb.Properties.Add(properties);
                    teniacoApiDb.SaveChanges();

                    if (propertiesVM.PropertyAddressVM != null)
                    {
                        PropertyAddress propertyAddress = _mapper.Map<PropertyAddressVM, PropertyAddress>(propertiesVM.PropertyAddressVM);
                        propertyAddress.PropertyId = properties.PropertyId;

                        teniacoApiDb.PropertyAddress.Add(propertyAddress);
                        teniacoApiDb.SaveChanges();
                    }
                    else
                    {
                        PropertyAddress propertyAddress = new PropertyAddress();
                        propertyAddress.PropertyId = properties.PropertyId;
                        propertyAddress.CreateEnDate = properties.CreateEnDate.Value;
                        propertyAddress.CreateTime = properties.CreateTime;
                        propertyAddress.UserIdCreator = properties.UserIdCreator.Value;
                        propertyAddress.IsActivated = true;
                        propertyAddress.IsDeleted = false;
                        propertyAddress.StateId = 0;
                        propertyAddress.CityId = 0;
                        propertyAddress.ZoneId = 0;



                        teniacoApiDb.PropertyAddress.Add(propertyAddress);
                        teniacoApiDb.SaveChanges();
                    }

                    PropertiesPricesHistories propertiesPricesHistories = new PropertiesPricesHistories();
                    propertiesPricesHistories.OfferPrice = propertiesVM.OfferPrice.HasValue ? propertiesVM.OfferPrice.Value : 0;
                    propertiesPricesHistories.OfferPriceType = propertiesVM.OfferPriceType.HasValue ? propertiesVM.OfferPriceType.Value : 0;
                    propertiesPricesHistories.CalculatedOfferPrice = propertiesVM.CalculatedOfferPrice.HasValue ? propertiesVM.CalculatedOfferPrice.Value : 0;
                    propertiesPricesHistories.PropertyId = properties.PropertyId;

                    propertiesPricesHistories.CreateEnDate = properties.CreateEnDate.Value;
                    propertiesPricesHistories.CreateTime = properties.CreateTime;
                    propertiesPricesHistories.UserIdCreator = properties.UserIdCreator.Value;
                    propertiesPricesHistories.IsActivated = true;
                    propertiesPricesHistories.IsDeleted = false;

                    teniacoApiDb.PropertiesPricesHistories.Add(propertiesPricesHistories);
                    teniacoApiDb.SaveChanges();


                    #region comments

                    //if (propertiesVM.PropertiesPricesHistoriesVM != null)
                    //    if (propertiesVM.PropertiesPricesHistoriesVM.Count > 0)
                    //    {
                    //        PropertiesPricesHistories propertiesPricesHistoriesVM = _mapper.Map<PropertiesPricesHistoriesVM,
                    //            PropertiesPricesHistories>(propertiesVM.PropertiesPricesHistoriesVM.FirstOrDefault());
                    //        propertiesPricesHistoriesVM.PropertyId = properties.PropertyId;

                    //        teniacoApiDb.PropertiesPricesHistories.Add(propertiesPricesHistoriesVM);
                    //        teniacoApiDb.SaveChanges();
                    //    }

                    //string zoneName = "";

                    //try
                    //{
                    //    if (properties.PropertyAddress.ZoneId.HasValue)
                    //    {
                    //        var zone = publicApiBusiness.GetZoneWithZoneId(properties.PropertyAddress.ZoneId.Value);
                    //        properties.PropertyCodeName = properties.PropertyId.ToString() + "-" + zoneName;
                    //    }
                    //}
                    //catch (Exception exc)
                    //{ }

                    //teniacoApiDb.Entry<Properties>(properties).State = EntityState.Modified;
                    //teniacoApiDb.SaveChanges();

                    #endregion


                    if (propertiesVM.PropertyBuyersVM != null)
                    {

                        //var newPropertyBuyersList = _mapper.Map<List<PropertyBuyersVM>,
                        //            List<PropertyBuyers>>(propertiesVM.PropertyBuyersVM); اتو مپر ارور میدهد در نتیجه دستی مپ کردم

                        List<PropertyBuyers> newPropertyBuyersList = new();

                        foreach (var buyer in propertiesVM.PropertyBuyersVM)
                        {
                            PropertyBuyers newBuyer = new()
                            {
                                PersonId = buyer.PersonId,
                                BuyerDescription = buyer.BuyerDescription,
                                PropertyId = properties.PropertyId,
                                UserIdCreator = propertiesVM.UserIdCreator,
                                CreateEnDate = DateTime.Now,
                                CreateTime = PersianDate.TimeNow,
                                IsActivated = true,
                                IsDeleted = false
                            };
                            newPropertyBuyersList.Add(newBuyer);
                        }

                        teniacoApiDb.PropertyBuyers.AddRange(newPropertyBuyersList);
                        teniacoApiDb.SaveChanges();
                    }


                    if (propertiesVM.PropertyOwnersVM != null)
                    {

                        var newPropertyOwnersList = _mapper.Map<List<PropertyOwnersVM>,
                                    List<PropertyOwners>>(propertiesVM.PropertyOwnersVM);

                        foreach (var item in newPropertyOwnersList)
                        {
                            item.PropertyId = properties.PropertyId;
                        }

                        teniacoApiDb.PropertyOwners.AddRange(newPropertyOwnersList);
                        teniacoApiDb.SaveChanges();
                    }


                    if (propertiesVM.PropertiesDetailsVM != null)
                    {
                        var newPropertyDetails = _mapper.Map<PropertiesDetailsVM,
                                    PropertiesDetails>(propertiesVM.PropertiesDetailsVM);

                        newPropertyDetails.PropertyId = properties.PropertyId;
                        newPropertyDetails.UserIdCreator = properties.UserIdCreator.Value;
                        newPropertyDetails.IsDeleted = false;
                        newPropertyDetails.IsActivated = true;


                        teniacoApiDb.PropertiesDetails.Add(newPropertyDetails);
                        teniacoApiDb.SaveChanges();
                    }

                    transaction.Commit();

                    return properties.PropertyId;

                }
                catch (Exception exc)
                {
                    transaction.Rollback();
                }
            }
            return 0;
        }

        public PropertiesVM GetPropertyWithPropertyId(long propertyId,
            List<long> childsUsersIds,
            PublicApiContext publicApiDb)
        {
            PropertiesVM propertiesVM = new PropertiesVM();

            try
            {

                #region Properties

                propertiesVM = _mapper.Map<Entities.Properties,
               PropertiesVM>(teniacoApiDb.Properties.Where(e => e.PropertyId.Equals(propertyId)).FirstOrDefault());

                #endregion

                if (propertiesVM != null)
                {
                    #region PropertyAddress

                    propertiesVM.PropertyAddressVM = new PropertyAddressVM();

                    propertiesVM.PropertyAddressVM = _mapper.Map<PropertyAddress,
                        PropertyAddressVM>(teniacoApiDb.PropertyAddress
                        .Where(e => e.PropertyId.Equals(propertyId)).FirstOrDefault());




                    if (propertiesVM.PropertyAddressVM != null)
                    {
                        //States
                        var stateIds = publicApiDb.States.Select(s => s.StateId).ToList();
                        var states = publicApiDb.States.Where(p => stateIds.Contains(p.StateId)).ToList();

                        if (states != null)
                        {
                            if (states.Where(p => p.StateId.Equals(propertiesVM.PropertyAddressVM.StateId)).Any())
                            {
                                var state = states.Where(p => p.StateId.Equals(propertiesVM.PropertyAddressVM.StateId)).FirstOrDefault();
                                propertiesVM.PropertyAddressVM.StateId = state.StateId;
                                propertiesVM.PropertyAddressVM.StateName = state.StateName;
                            }
                        }



                        //Cities
                        var cityIds = publicApiDb.Cities.Select(s => s.CityId).ToList();
                        var cities = publicApiDb.Cities.Where(p => cityIds.Contains(p.CityId)).ToList();

                        if (cities != null)
                        {
                            if (cities.Where(c => c.CityId.Equals(propertiesVM.PropertyAddressVM.CityId)).Any())
                            {
                                var city = cities.Where(c => c.CityId.Equals(propertiesVM.PropertyAddressVM.CityId)).FirstOrDefault();
                                propertiesVM.PropertyAddressVM.CityId = city.CityId;
                                propertiesVM.PropertyAddressVM.CityName = city.CityName;
                            }
                        }



                        //Zones
                        var zoneIds = publicApiDb.Zones.Select(s => s.ZoneId).ToList();
                        var zones = publicApiDb.Zones.Where(p => zoneIds.Contains(p.ZoneId)).ToList();

                        if (zones != null)
                        {
                            if (zones.Where(c => c.ZoneId.Equals(propertiesVM.PropertyAddressVM.ZoneId)).Any())
                            {
                                var zone = zones.Where(c => c.ZoneId.Equals(propertiesVM.PropertyAddressVM.ZoneId)).FirstOrDefault();
                                propertiesVM.PropertyAddressVM.ZoneId = zone.ZoneId;
                                propertiesVM.PropertyAddressVM.ZoneName = zone.ZoneName;
                            }
                        }

                    }

                    #endregion

                    #region PropertiesDetails

                    propertiesVM.PropertiesDetailsVM = new PropertiesDetailsVM();

                    propertiesVM.PropertiesDetailsVM = _mapper.Map<PropertiesDetails,
                        PropertiesDetailsVM>(teniacoApiDb.PropertiesDetails.Where(e => e.PropertyId.Equals(propertyId)).FirstOrDefault());

                    #endregion

                    #region PropertiesPriceHistories

                    propertiesVM.PropertiesPricesHistoriesVM = new List<PropertiesPricesHistoriesVM>();

                    propertiesVM.PropertiesPricesHistoriesVM.Add(_mapper.Map<PropertiesPricesHistories,
                        PropertiesPricesHistoriesVM>(teniacoApiDb.PropertiesPricesHistories
                       .Where(h => h.PropertyId.Equals(propertyId)).OrderByDescending(c => c.CreateEnDate)
                        .ThenByDescending(c => c.CreateTime).FirstOrDefault()));

                    #endregion

                    #region PropertyOwners

                    propertiesVM.PropertyOwnersVM = _mapper.Map<List<PropertyOwners>,
                        List<PropertyOwnersVM>>(teniacoApiDb.PropertyOwners.Where(o => propertiesVM.PropertyId.Equals(o.PropertyId)).ToList());

                    #endregion

                    #region PropertyBuyers

                    propertiesVM.PropertyBuyersVM = new List<PropertyBuyersVM>();

                    if (teniacoApiDb.PropertyBuyers
                       .Where(h => h.PropertyId.Equals(propertyId)).Any())
                    {
                        propertiesVM.PropertyBuyersVM.AddRange(teniacoApiDb.PropertyBuyers
                        .Where(h => h.PropertyId.Equals(propertyId)).Select(a => new PropertyBuyersVM
                        {
                            PropertyBuyerId = a.PropertyBuyerId,
                            PropertyId = a.PropertyId,
                            PersonId = a.PersonId,
                            BuyerDescription = a.BuyerDescription,
                            UserIdCreator = a.UserIdCreator,
                            CreateEnDate = a.CreateEnDate,
                            CreateTime = a.CreateTime,
                            EditEnDate = a.EditEnDate,
                            EditTime = a.EditTime,
                            UserIdEditor = a.UserIdEditor.Value,
                            RemoveEnDate = a.RemoveEnDate,
                            RemoveTime = a.EditTime,
                            UserIdRemover = a.UserIdRemover.Value,
                            IsActivated = a.IsActivated,
                            IsDeleted = a.IsDeleted,

                        }).ToList());
                    }
                    #endregion

                    #region PropertyFiles

                    propertiesVM.PropertyFilesVM = new List<PropertyFilesVM>();

                    if (teniacoApiDb.PropertyFiles
                       .Where(h => h.PropertyId.Equals(propertyId)).Any())
                    {
                        propertiesVM.PropertyFilesVM.AddRange(teniacoApiDb.PropertyFiles
                        .Where(h => h.PropertyId.Equals(propertyId)).Select(a => new PropertyFilesVM
                        {
                            PropertyId = a.PropertyId,
                            PropertyFileExt = a.PropertyFileExt,
                            PropertyFileId = a.PropertyFileId,
                            PropertyFileOrder = a.PropertyFileOrder,
                            PropertyFilePath = a.PropertyFilePath,
                            PropertyFileTitle = a.PropertyFileTitle,
                            PropertyFileType = a.PropertyFileType,
                            UserIdCreator = a.UserIdCreator,
                            CreateEnDate = a.CreateEnDate,
                            CreateTime = a.CreateTime,
                            EditEnDate = a.EditEnDate,
                            EditTime = a.EditTime,
                            UserIdEditor = a.UserIdEditor.Value,
                            RemoveEnDate = a.RemoveEnDate,
                            RemoveTime = a.EditTime,
                            UserIdRemover = a.UserIdRemover.Value,
                            IsActivated = a.IsActivated,
                            IsDeleted = a.IsDeleted,

                        }).ToList());
                    }
                    #endregion

                    #region PropertySelectedCallers

                    propertiesVM.PropertySelectedCallersVM = new PropertySelectedCallersVM();

                    propertiesVM.PropertySelectedCallersVM = _mapper.Map<PropertySelectedCallers,
                        PropertySelectedCallersVM>(teniacoApiDb.PropertySelectedCallers.Where(e => e.PropertyId.Equals(propertyId)).FirstOrDefault());

                    #endregion
                }

                #region comments

                //var p = teniacoApiDb.Properties
                //    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                //    .Where(e => e.PropertyId.Equals(propertyId)).FirstOrDefault();


                //propertiesVM = _mapper.Map<Entities.Properties,
                //    PropertiesVM>(teniacoApiDb.Properties
                //    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                //    .Where(e => e.PropertyId.Equals(propertyId)).FirstOrDefault());


                //propertiesVM.PropertyAddressVM = _mapper.Map<PropertyAddress,
                //    PropertyAddressVM>(teniacoApiDb.PropertyAddress
                //    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                //    .Where(e => e.PropertyId.Equals(propertyId)).FirstOrDefault());

                //propertiesVM.PropertiesDetailsVM = _mapper.Map<PropertiesDetails,
                //    PropertiesDetailsVM>(teniacoApiDb.PropertiesDetails
                //    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                //    .Where(e => e.PropertyId.Equals(propertyId)).FirstOrDefault());
                #endregion

            }
            catch (Exception exc)
            { }

            return propertiesVM;
        }

        public long UpdateProperties(ref PropertiesVM propertiesVM,
            List<long> childsUsersIds)
        {
            long propertyId = propertiesVM.PropertyId;


            if (teniacoApiDb.Properties.Where(x => x.PropertyId.Equals(propertyId)).Any())
            {
                using (var transaction = teniacoApiDb.Database.BeginTransaction())
                {
                    try
                    {
                        Properties properties = (from c in teniacoApiDb.Properties
                                                 where c.PropertyId == propertyId
                                                 select c).FirstOrDefault();

                        if (teniacoApiDb.PropertyOwners.Where(o => o.PropertyId.Equals(propertyId)).Any())
                        {
                            #region remove old PropertyOwners

                            var oldPropertyOwnersList = teniacoApiDb.PropertyOwners.Where(o => o.PropertyId.Equals(propertyId)).ToList();
                            teniacoApiDb.PropertyOwners.RemoveRange(oldPropertyOwnersList);
                            teniacoApiDb.SaveChanges();

                            #endregion

                            #region add new PropertyOwners

                            if (propertiesVM.PropertyOwnersVM != null)
                            {
                                var newPropertyOwnersList = _mapper.Map<List<PropertyOwnersVM>,
                                    List<PropertyOwners>>(propertiesVM.PropertyOwnersVM);


                                foreach (var item in newPropertyOwnersList)
                                {
                                    item.PropertyId = properties.PropertyId;
                                }
                                teniacoApiDb.PropertyOwners.AddRange(newPropertyOwnersList);
                                teniacoApiDb.SaveChanges();
                            }

                            #endregion
                        }

                        properties.PropertyTypeId = propertiesVM.PropertyTypeId;
                        properties.PropertyCodeName = propertiesVM.PropertyCodeName;
                        properties.TypeOfUseId = propertiesVM.TypeOfUseId.HasValue ? propertiesVM.TypeOfUseId.Value : (int?)0;
                        properties.DocumentOwnershipTypeId = propertiesVM.DocumentOwnershipTypeId.HasValue ? propertiesVM.DocumentOwnershipTypeId.Value : (int?)0;
                        properties.DocumentRootTypeId = propertiesVM.DocumentRootTypeId.HasValue ? propertiesVM.DocumentRootTypeId.Value : (int?)0;
                        properties.DocumentTypeId = propertiesVM.DocumentTypeId.HasValue ? propertiesVM.DocumentTypeId.Value : (int?)0;
                        properties.Area = propertiesVM.Area;
                        properties.ConsultantUserId = propertiesVM.ConsultantUserId.HasValue ? propertiesVM.ConsultantUserId.Value : (long?)0;
                        //properties.OwnerId = propertiesVM.OwnerId.HasValue ? propertiesVM.OwnerId.Value : (long?)0;
                        properties.RebuiltInYearFa = propertiesVM.RebuiltInYearFa.HasValue ? propertiesVM.RebuiltInYearFa.Value : 0;

                        properties.EditEnDate = DateTime.Now;
                        properties.EditTime = PersianDate.TimeNow;
                        properties.UserIdEditor = propertiesVM.UserIdEditor.Value;
                        properties.IsActivated = properties.IsActivated.HasValue ? properties.IsActivated.Value : (bool?)true;
                        properties.IsDeleted = properties.IsDeleted.HasValue ? properties.IsDeleted.Value : (bool?)false;
                        properties.PropertyDescriptions = propertiesVM.NewPropertyDescriptions;

                        teniacoApiDb.Entry<Entities.Properties>(properties).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();


                        #region PropertyAddress

                        //PropertyAddress propertyAddress = (from c in teniacoApiDb.PropertyAddress
                        //                                   where c.PropertyId == propertyId
                        //                                   select c).FirstOrDefault();

                        //propertyAddress.Address = propertiesVM.PropertyAddressVM.Address;
                        //propertyAddress.EditEnDate = DateTime.Now;
                        //propertyAddress.EditTime = PersianDate.TimeNow;
                        //propertyAddress.IsActivated = propertiesVM.PropertyAddressVM.IsActivated.HasValue ? propertiesVM.PropertyAddressVM.IsActivated.Value : (bool?)true;
                        //propertyAddress.IsDeleted = propertiesVM.PropertyAddressVM.IsDeleted.HasValue ? propertiesVM.PropertyAddressVM.IsDeleted.Value : (bool?)true;
                        //propertyAddress.LocationLat = propertiesVM.PropertyAddressVM.LocationLat.HasValue ? propertiesVM.PropertyAddressVM.LocationLat.Value : (double?)0;
                        //propertyAddress.LocationLon = propertiesVM.PropertyAddressVM.LocationLon.HasValue ? propertiesVM.PropertyAddressVM.LocationLon.Value : (double?)0;
                        //propertyAddress.UserIdEditor = properties.UserIdEditor.Value;
                        //propertyAddress.StateId = propertiesVM.PropertyAddressVM.StateId;
                        //propertyAddress.CityId = propertiesVM.PropertyAddressVM.CityId;
                        //propertyAddress.ZoneId = propertiesVM.PropertyAddressVM.ZoneId.HasValue ? propertiesVM.PropertyAddressVM.ZoneId.Value : 0;

                        //teniacoApiDb.Entry<PropertyAddress>(propertyAddress).State = EntityState.Modified;
                        //teniacoApiDb.SaveChanges();
                        #endregion

                        #region propertiesPricesHistories


                        if (propertiesVM.PriceTypeRegister == 0)//اصلاح قیمت قبلی
                        {
                            PropertiesPricesHistories propertiesPricesHistories = (from h in teniacoApiDb.PropertiesPricesHistories
                                                                                   where h.PropertyId == propertyId
                                                                                   select h).OrderByDescending(c => c.CreateEnDate)
                                                                                    .ThenByDescending(c => c.CreateTime)
                                                                                    .FirstOrDefault();


                            propertiesPricesHistories.OfferPrice = propertiesVM.OfferPrice;
                            propertiesPricesHistories.OfferPriceType = propertiesVM.OfferPriceType;
                            propertiesPricesHistories.CalculatedOfferPrice = propertiesVM.CalculatedOfferPrice;
                            propertiesPricesHistories.PriceTypeRegister = propertiesVM.PriceTypeRegister;
                            propertiesPricesHistories.EditEnDate = DateTime.Now;
                            propertiesPricesHistories.EditTime = PersianDate.TimeNow;
                            propertiesPricesHistories.IsActivated = true;
                            propertiesPricesHistories.IsDeleted = false;

                            teniacoApiDb.Entry<PropertiesPricesHistories>(propertiesPricesHistories).State = EntityState.Modified;
                            teniacoApiDb.SaveChanges();
                        }
                        else//ثبت قیمت جدید
                        {
                            PropertiesPricesHistories propertiesPricesHistories = new PropertiesPricesHistories();
                            propertiesPricesHistories.OfferPrice = propertiesVM.OfferPrice.HasValue ? propertiesVM.OfferPrice.Value : 0;
                            propertiesPricesHistories.OfferPriceType = propertiesVM.OfferPriceType.HasValue ? propertiesVM.OfferPriceType.Value : 0;
                            propertiesPricesHistories.CalculatedOfferPrice = propertiesVM.CalculatedOfferPrice.HasValue ? propertiesVM.CalculatedOfferPrice.Value : 0;
                            propertiesPricesHistories.PriceTypeRegister = propertiesVM.PriceTypeRegister;
                            propertiesPricesHistories.PropertyId = properties.PropertyId;

                            propertiesPricesHistories.CreateEnDate = DateTime.Now;
                            propertiesPricesHistories.CreateTime = PersianDate.TimeNow;

                            propertiesPricesHistories.UserIdCreator = properties.UserIdCreator.Value;
                            propertiesPricesHistories.IsActivated = true;
                            propertiesPricesHistories.IsDeleted = false;

                            teniacoApiDb.PropertiesPricesHistories.Add(propertiesPricesHistories);
                            teniacoApiDb.SaveChanges();


                        }
                        #endregion

                        #region PropertyBuyers

                        if (propertiesVM.PropertyBuyersVM != null)
                        {

                            //for deleting
                            foreach (var OldBuyer in teniacoApiDb.PropertyBuyers.Where(pb => pb.PropertyId == propertyId).ToList())
                            {
                                if (!propertiesVM.PropertyBuyersVM.Where(pb => pb.PropertyId == propertyId && pb.PersonId == OldBuyer.PersonId).Any())
                                {
                                    teniacoApiDb.Entry<Entities.PropertyBuyers>(OldBuyer).State = EntityState.Deleted;
                                    teniacoApiDb.SaveChanges();
                                }
                            }


                            //for adding and updating buyers
                            foreach (var buyer in propertiesVM.PropertyBuyersVM)
                            {

                                if (teniacoApiDb.PropertyBuyers.Where(pb => pb.PersonId == buyer.PersonId && pb.PropertyId == buyer.PropertyId).Any())
                                {
                                    PropertyBuyers BuyerToUpdate = teniacoApiDb.PropertyBuyers.Where(pb => pb.PersonId == buyer.PersonId && pb.PropertyId == buyer.PropertyId).FirstOrDefault();
                                    BuyerToUpdate.BuyerDescription = buyer.BuyerDescription;
                                    teniacoApiDb.Entry<Entities.PropertyBuyers>(BuyerToUpdate).State = EntityState.Modified;
                                    teniacoApiDb.SaveChanges();
                                }
                                else
                                {
                                    PropertyBuyers newBuyer = new()
                                    {
                                        PersonId = buyer.PersonId,
                                        BuyerDescription = buyer.BuyerDescription,
                                        PropertyId = properties.PropertyId,
                                        UserIdCreator = propertiesVM.UserIdCreator,
                                        CreateEnDate = DateTime.Now,
                                        CreateTime = PersianDate.TimeNow,
                                        IsActivated = true,
                                        IsDeleted = false
                                    };
                                    teniacoApiDb.PropertyBuyers.Add(newBuyer);
                                    teniacoApiDb.SaveChanges();

                                }
                            }


                        }

                        #endregion

                        #region PropertiesDetails

                        if (propertiesVM.PropertiesDetailsVM != null)
                        {
                            PropertiesDetails propertiesDetails = (from ad in teniacoApiDb.PropertiesDetails
                                                                   where ad.PropertyId == propertyId
                                                                   select ad).FirstOrDefault();


                            propertiesDetails.PropertyId = propertyId;
                            propertiesDetails.BuildingLifeId = propertiesVM.PropertiesDetailsVM.BuildingLifeId;
                            propertiesDetails.Foundation = propertiesVM.PropertiesDetailsVM.Foundation;
                            propertiesDetails.Exchangeable = propertiesVM.PropertiesDetailsVM.Exchangeable;
                            propertiesDetails.Participable = propertiesVM.PropertiesDetailsVM.Participable;


                            propertiesDetails.EditEnDate = DateTime.Now;
                            propertiesDetails.EditTime = PersianDate.TimeNow;
                            propertiesDetails.UserIdEditor = propertiesVM.UserIdEditor.Value;
                            propertiesDetails.IsActivated = propertiesDetails.IsActivated.HasValue ? propertiesDetails.IsActivated.Value : (bool?)true;
                            propertiesDetails.IsDeleted = propertiesDetails.IsDeleted.HasValue ? propertiesDetails.IsDeleted.Value : (bool?)false;

                            teniacoApiDb.Entry<PropertiesDetails>(propertiesDetails).State = EntityState.Modified;
                            teniacoApiDb.SaveChanges();

                        }
                        else
                        {
                            PropertiesDetails propertiesDetails = new PropertiesDetails();



                            propertiesDetails.PropertyId = properties.PropertyId;

                            propertiesDetails.BuildingLifeId = propertiesVM.PropertiesDetailsVM.BuildingLifeId.HasValue ? propertiesVM.PropertiesDetailsVM.BuildingLifeId.Value : 0;
                            propertiesDetails.Foundation = propertiesVM.PropertiesDetailsVM.Foundation;

                            propertiesDetails.CreateEnDate = DateTime.Now;
                            propertiesDetails.CreateTime = PersianDate.TimeNow;

                            propertiesDetails.UserIdCreator = properties.UserIdCreator.Value;
                            propertiesDetails.IsActivated = true;
                            propertiesDetails.IsDeleted = false;


                            teniacoApiDb.PropertiesDetails.Add(propertiesDetails);
                            teniacoApiDb.SaveChanges();
                        }
                        #endregion


                        transaction.Commit();

                        propertiesVM.UserIdCreator = properties.UserIdCreator.Value;

                        return properties.PropertyId;
                    }
                    catch (Exception exc)
                    {
                        transaction.Rollback();
                    }



                }
            }

            return 0;
        }

        public bool ToggleActivationProperties(long propertyId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                var properties = (from c in teniacoApiDb.Properties
                                  where c.PropertyId == propertyId &&
                                  childsUsersIds.Contains(c.UserIdCreator.Value)
                                  select c).FirstOrDefault();

                if (properties != null)
                {
                    properties.IsActivated = !properties.IsActivated;
                    properties.EditEnDate = DateTime.Now;
                    properties.EditTime = PersianDate.TimeNow;
                    properties.UserIdEditor = userId;

                    teniacoApiDb.Entry<Entities.Properties>(properties).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;
        }

        public bool TemporaryDeleteProperties(long propertyId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                var properties = (from c in teniacoApiDb.Properties
                                  where c.PropertyId == propertyId &&
                                  childsUsersIds.Contains(c.UserIdCreator.Value)
                                  select c).FirstOrDefault();

                if (properties != null)
                {
                    properties.IsDeleted = !properties.IsDeleted;
                    properties.EditEnDate = DateTime.Now;
                    properties.EditTime = PersianDate.TimeNow;
                    properties.UserIdEditor = userId;

                    teniacoApiDb.Entry<Entities.Properties>(properties).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;
        }

        public bool CompleteDeleteProperties(long propertyId,
            List<long> childsUsersIds)
        {
            try
            {
                var properties = (from c in teniacoApiDb.Properties
                                  where c.PropertyId == propertyId &&
                                  childsUsersIds.Contains(c.UserIdCreator.Value)
                                  select c).FirstOrDefault();

                if (properties != null)
                {
                    using (var transaction = teniacoApiDb.Database.BeginTransaction())
                    {
                        #region Codes for complete delete all property tables
                        #region PropertiesAddress 


                        try
                        {
                            var PropertiesAddress = teniacoApiDb.PropertyAddress.Where(
                                a => a.PropertyId == propertyId).FirstOrDefault();

                            if (PropertiesAddress != null)
                            {

                                teniacoApiDb.PropertyAddress.Remove(PropertiesAddress);
                                teniacoApiDb.SaveChanges();
                            }

                        }
                        catch (Exception exc)
                        {
                            transaction.Rollback();
                            return false;
                        }

                        #endregion

                        #region PropertiesDetails 


                        try
                        {
                            var PropertiesDetails = teniacoApiDb.PropertiesDetails.Where(
                                ad => ad.PropertyId == propertyId).FirstOrDefault();

                            if (PropertiesDetails != null)
                            {
                                teniacoApiDb.PropertiesDetails.Remove(PropertiesDetails);
                                teniacoApiDb.SaveChanges();
                            }



                        }
                        catch (Exception exc)
                        {
                            transaction.Rollback();
                            return false;
                        }



                        #endregion

                        #region PropertiesPriceHistories



                        var PropertiesPriceHistories = teniacoApiDb.PropertiesPricesHistories.Where(
                            p => p.PropertyId == propertyId).ToList();

                        try
                        {

                            if (PropertiesPriceHistories != null && PropertiesPriceHistories.Count > 0)
                            {
                                teniacoApiDb.PropertiesPricesHistories.RemoveRange(PropertiesPriceHistories);
                                teniacoApiDb.SaveChanges();
                            }

                        }
                        catch (Exception)
                        {
                            transaction.Rollback();
                            return false;
                        }


                        #endregion

                        #region PropertiesFavourite 



                        try
                        {
                            var PropertiesFavourite = teniacoApiDb.PropertiesFavorites.Where(
                                a => a.PropertyId == propertyId).FirstOrDefault();

                            if (PropertiesFavourite != null)
                            {

                                teniacoApiDb.PropertiesFavorites.Remove(PropertiesFavourite);
                                teniacoApiDb.SaveChanges();
                            }

                        }
                        catch (Exception exc)
                        {
                            transaction.Rollback();
                            return false;
                        }

                        #endregion

                        #region PropertiesSelectedCaller



                        try
                        {
                            var PropertiesSelectedCaller = teniacoApiDb.PropertySelectedCallers.Where(
                                a => a.PropertyId == propertyId).FirstOrDefault();

                            if (PropertiesSelectedCaller != null)
                            {
                                teniacoApiDb.PropertySelectedCallers.Remove(PropertiesSelectedCaller);
                                teniacoApiDb.SaveChanges();
                            }


                        }
                        catch (Exception exc)
                        {
                            transaction.Rollback();
                            return false;
                        }

                        #endregion

                        #region PropertiesCaller



                        var PropertiesCaller = teniacoApiDb.PropertiesCallers.Where(
                            p => p.PropertyId == propertyId).ToList();

                        try
                        {
                            if (PropertiesCaller != null && PropertiesCaller.Count > 0)
                            {
                                teniacoApiDb.PropertiesCallers.RemoveRange(PropertiesCaller);
                                teniacoApiDb.SaveChanges();
                            }


                        }
                        catch (Exception)
                        {
                            transaction.Rollback();
                            return false;
                        }

                        #endregion

                        #region PropertiesFeaturesValues



                        var PropertiesFeaturesValue = teniacoApiDb.FeaturesValues.Where(
                            p => p.PropertyId == propertyId).ToList();

                        try
                        {
                            if (PropertiesFeaturesValue != null && PropertiesFeaturesValue.Count > 0)
                            {
                                teniacoApiDb.FeaturesValues.RemoveRange(PropertiesFeaturesValue);
                                teniacoApiDb.SaveChanges();
                            }


                        }
                        catch (Exception)
                        {
                            transaction.Rollback();
                            return false;
                        }


                        #endregion

                        #region PropertiesFiles



                        var PropertiesFile = teniacoApiDb.PropertyFiles.Where(
                            p => p.PropertyId == propertyId).ToList();

                        try
                        {
                            if (PropertiesFile != null && PropertiesFile.Count > 0)
                            {

                                teniacoApiDb.PropertyFiles.RemoveRange(PropertiesFile);
                                teniacoApiDb.SaveChanges();
                            }


                        }
                        catch (Exception)
                        {
                            transaction.Rollback();
                            return false;
                        }


                        #endregion

                        #region PropertiesViewers



                        var PropertiesViewer = teniacoApiDb.PropertiesViewers.Where(
                            p => p.PropertyId == propertyId).ToList();

                        try
                        {
                            if (PropertiesViewer != null && PropertiesViewer.Count > 0)
                            {
                                teniacoApiDb.PropertiesViewers.RemoveRange(PropertiesViewer);
                                teniacoApiDb.SaveChanges();
                            }


                        }
                        catch (Exception)
                        {
                            transaction.Rollback();
                            return false;
                        }


                        #endregion

                        #region PropertiesOwners



                        var PropertiesOwner = teniacoApiDb.PropertyOwners.Where(
                            p => p.PropertyId == propertyId).ToList();

                        try
                        {
                            if (PropertiesOwner != null && PropertiesOwner.Count > 0)
                            {
                                teniacoApiDb.PropertyOwners.RemoveRange(PropertiesOwner);
                                teniacoApiDb.SaveChanges();
                            }


                        }
                        catch (Exception)
                        {
                            transaction.Rollback();
                            return false;
                        }

                        #endregion

                        #region PropertiesBuyers



                        var PropertiesBuyers = teniacoApiDb.PropertyBuyers.Where(
                            p => p.PropertyId == propertyId).ToList();

                        try
                        {
                            if (PropertiesBuyers != null && PropertiesBuyers.Count > 0)
                            {
                                teniacoApiDb.PropertyBuyers.RemoveRange(PropertiesBuyers);
                                teniacoApiDb.SaveChanges();
                            }


                        }
                        catch (Exception)
                        {
                            transaction.Rollback();
                            return false;
                        }

                        #endregion

                        #region Properties

                        try
                        {
                            teniacoApiDb.Properties.Remove(properties);
                            teniacoApiDb.SaveChanges();
                        }
                        catch (Exception exc)
                        {
                            transaction.Rollback();
                            return false;
                        }

                        #endregion
                        #endregion


                        #region old codes commented by sina
                        //var propertyAddress = (from c in teniacoApiDb.PropertyAddress
                        //                       where c.PropertyId == propertyId &&
                        //                       childsUsersIds.Contains(c.UserIdCreator.Value)
                        //                       select c).FirstOrDefault();

                        //teniacoApiDb.PropertyAddress.Remove(propertyAddress);
                        //teniacoApiDb.SaveChanges();

                        //teniacoApiDb.Properties.Remove(properties);
                        //teniacoApiDb.SaveChanges();

                        //transaction.Commit();
                        #endregion

                        transaction.Commit();
                        return true;

                    }
                }
            }
            catch (Exception exc)
            { }

            return false;
        }


        public bool TemporaryDeletePropertiesWithChild(long propertyId,
           List<long> childsUsersIds)
        {
            using (var transaction = teniacoApiDb.Database.BeginTransaction())
            {
                try
                {
                    var query = teniacoApiDb.PropertyFiles.Where(a => a.PropertyId == propertyId && childsUsersIds.Contains(a.UserIdCreator.Value)).ToList();
                    query.ForEach(a => a.IsDeleted = true);
                    teniacoApiDb.PropertyFiles.UpdateRange(query);

                    var queryhistorty = teniacoApiDb.PropertiesPricesHistories.Where(a => a.PropertyId == propertyId && childsUsersIds.Contains(a.UserIdCreator.Value)).ToList();
                    queryhistorty.ForEach(a => a.IsDeleted = true);
                    teniacoApiDb.PropertiesPricesHistories.UpdateRange(queryhistorty);

                    var property = teniacoApiDb.Properties.First(a => a.PropertyId == propertyId);
                    property.IsDeleted = true;

                    teniacoApiDb.SaveChanges();
                    transaction.Commit();
                    return true;
                }
                catch
                {

                }
            }
            return false;
        }

        public List<PropertiesVM> GetAllPropertiesListWithoutAddress(List<long> childsUsersIds)
        {

            List<PropertiesVM> propertiesVMList = new List<PropertiesVM>();
            try
            {
                var list = (from p in teniacoApiDb.Properties
                            select new PropertiesVM
                            {
                                Area = p.Area,
                                BuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                                BuiltInYearFa = p.BuiltInYearFa.HasValue ? p.BuiltInYearFa.Value : (int?)0,
                                ConsultantUserId = p.ConsultantUserId.HasValue ? p.ConsultantUserId.Value : (long?)null,
                                //OwnerId = p.OwnerId.HasValue ? p.OwnerId.Value : (long?)null,
                                PropertyCodeName = p.PropertyCodeName,
                                PropertyId = p.PropertyId,
                                PropertyTypeId = p.PropertyTypeId,
                                RebuiltInYear = p.BuiltInYear.HasValue ? p.BuiltInYear.Value : (int?)0,
                                RebuiltInYearFa = p.RebuiltInYearFa.HasValue ? p.RebuiltInYearFa.Value : (int?)0,
                                TypeOfUseId = p.TypeOfUseId.HasValue ? p.TypeOfUseId.Value : (int?)0,
                                DocumentTypeId = p.DocumentTypeId.HasValue ? p.DocumentTypeId.Value : (int?)0,
                                DocumentOwnershipTypeId = p.DocumentOwnershipTypeId.HasValue ? p.DocumentOwnershipTypeId.Value : (int?)0,
                                DocumentRootTypeId = p.DocumentRootTypeId.HasValue ? p.DocumentRootTypeId.Value : (int?)0,
                                PropertyDescriptions = !string.IsNullOrEmpty(p.PropertyDescriptions) ? p.PropertyDescriptions : "",
                                UserIdCreator = p.UserIdCreator.Value,
                                CreateEnDate = p.CreateEnDate,
                                CreateTime = p.CreateTime,
                                EditEnDate = p.EditEnDate,
                                EditTime = p.EditTime,
                                UserIdEditor = p.UserIdEditor.Value,
                                RemoveEnDate = p.RemoveEnDate,
                                RemoveTime = p.EditTime,
                                UserIdRemover = p.UserIdRemover.Value,
                                IsActivated = p.IsActivated,
                                IsDeleted = p.IsDeleted,
                                PropertyAddressVM = new PropertyAddressVM()

                            })
                            .AsQueryable();



                if (childsUsersIds != null)
                {
                    if (childsUsersIds.Count > 1)
                    {
                        list = list.Where(c => childsUsersIds.Contains(c.UserIdCreator.Value));
                    }
                    else
                    {
                        if (childsUsersIds.Count == 1)
                        {
                            if (childsUsersIds.FirstOrDefault() > 0)
                            {
                                list = list.Where(c => childsUsersIds.Contains(c.UserIdCreator.Value));
                            }
                        }
                    }
                }


                propertiesVMList = list.OrderByDescending(s => s.PropertyId).ToList();

                var propertyAddressList = new List<PropertyAddress>();

                var propertyIds = propertiesVMList.Select(a => a.PropertyId).ToList();


                if (teniacoApiDb.PropertyAddress.Where(a => propertyIds.Contains(a.PropertyId)).Any())
                {
                    propertyAddressList = teniacoApiDb.PropertyAddress.Where(a => propertyIds.Contains(a.PropertyId)).ToList();

                    foreach (var item in propertiesVMList)
                    {
                        if (propertyAddressList.Where(a => a.PropertyId == item.PropertyId).Any())
                        {
                            var pa = propertyAddressList.Where(a => a.PropertyId == item.PropertyId).FirstOrDefault();
                            item.PropertyAddressVM = new PropertyAddressVM
                            {
                                StateId = pa.StateId.Value,
                                CityId = pa.CityId.Value,
                                ZoneId = pa.ZoneId,
                                DistrictId = pa.DistrictId,
                                CityName = "",//x.CityName,
                                StateName = "",//x.StateName,
                                TownName = "",//x.TownName,
                                VillageName = "",//x.VillageName,
                                ZoneName = "",//x.ZoneName,
                                DistrictName = "",
                                //Abbreviation = "",//x.Abbreviation,
                                Address = !string.IsNullOrEmpty(pa.Address) ? pa.Address : "",
                                //Address = pa.Address,
                                LocationLat = pa.LocationLat,
                                LocationLon = pa.LocationLon,
                                PropertyId = pa.PropertyId,
                                UserIdCreator = pa.UserIdCreator,
                                CreateEnDate = pa.CreateEnDate,
                                CreateTime = pa.CreateTime,
                                EditEnDate = pa.EditEnDate,
                                EditTime = pa.EditTime,
                                UserIdEditor = pa.UserIdEditor,
                                RemoveEnDate = pa.RemoveEnDate,
                                RemoveTime = pa.EditTime,
                                UserIdRemover = pa.UserIdRemover,
                                IsActivated = pa.IsActivated,
                                IsDeleted = pa.IsDeleted,
                            };
                        }


                    }
                }




            }
            catch (Exception exc)
            { }

            return propertiesVMList;
        }

        public bool ToggleActivationShowInMelkavan(long propertyId,
              long userId)
        {
            try
            {
                var properties = (from c in teniacoApiDb.Properties
                                  where c.PropertyId == propertyId
                                  select c).FirstOrDefault();

                if (properties != null)
                {
                    //properties.ShowInMelkavan = !properties.ShowInMelkavan;
                    properties.ShowInMelkavan = false;
                    properties.EditEnDate = DateTime.Now;
                    properties.EditTime = PersianDate.TimeNow;
                    properties.UserIdEditor = userId;

                    teniacoApiDb.Entry<Entities.Properties>(properties).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;
        }

        #region old - AddPropertiesInMelkavan


        //public long AddPropertiesInMelkavan(ref PropertiesInMelkavanVM propertiesVM,
        //      List<long> childsUsersIds,
        //      IConsoleBusiness consoleBusiness)
        //{
        //    long propertyId = propertiesVM.PropertyId;
        //    string userName = propertiesVM.UserName;
        //    long userId = 0;

        //    if (teniacoApiDb.Properties.Where(n => childsUsersIds.Contains(n.UserIdCreator.Value))
        //                .Where(x => x.PropertyId.Equals(propertyId)).Any())
        //    {
        //        using (var transaction = teniacoApiDb.Database.BeginTransaction())
        //        {
        //            try
        //            {

        //                #region Properties

        //                Properties properties = (from c in teniacoApiDb.Properties
        //                                         where c.PropertyId == propertyId
        //                                         select c).FirstOrDefault();

        //                properties.PropertyCodeName = propertiesVM.PropertyCodeName;

        //                properties.EditEnDate = DateTime.Now;
        //                properties.EditTime = PersianDate.TimeNow;
        //                properties.UserIdEditor = propertiesVM.UserIdEditor.Value;
        //                properties.IsActivated = properties.IsActivated.HasValue ? properties.IsActivated.Value : (bool?)true;
        //                properties.IsDeleted = properties.IsDeleted.HasValue ? properties.IsDeleted.Value : (bool?)false;
        //                properties.ShowInMelkavan = true;


        //                teniacoApiDb.Entry<Entities.Properties>(properties).State = EntityState.Modified;
        //                teniacoApiDb.SaveChanges();

        //                #endregion

        //                #region Users

        //                var getLevelId = consoleBusiness.GetLevelDetailWithLevelName("آگهی دهنده");
        //                var getUsersRoleId = consoleBusiness.GetRoleIdWithRoleName("Users");
        //                //var getDomainSettingId = consoleBusiness.GetDomainsSettingsWithDomainName("melkavan.com");
        //                var getDomainSettingId = consoleBusiness.GetDomainsSettingsWithDomainName("localhost");

        //                var usersIdsInUserLevels = consoleBusiness.CmsDb.UsersLevels.Where(u => u.LevelId.Equals(getLevelId.LevelId)).Select(f => f.UserId).ToList();

        //                var userIdsInUserRoles = consoleBusiness.CmsDb.UsersRoles.Where(f => f.RoleId.Equals(getUsersRoleId) && usersIdsInUserLevels.Contains(f.UserId)).Select(f => f.UserId).ToList();

        //                //کاربری که دسترسی آگهی دهنده دارند
        //                // و نقش user
        //                //و با دامنه ی ملکاوان وارد شدند

        //                var user = consoleBusiness.CmsDb.Users.Where(u => u.DomainSettingId.Equals(getDomainSettingId.DomainSettingId) &&
        //                userIdsInUserRoles.Contains(u.UserId) &&
        //                u.UserName.Equals(userName)).FirstOrDefault();

        //                //اگر این کاربر وجود داشته باشد
        //                if (user != null)
        //                {
        //                    userId = user.UserId;
        //                    if (propertiesVM.Family != null)
        //                    {
        //                        if (propertiesVM.Family != "null")
        //                        {
        //                            if (propertiesVM.Family != "")
        //                            {
        //                                userId = user.UserId;

        //                                // update user profile

        //                                if (consoleBusiness.CmsDb.UsersProfile.Where(u => u.UserId.Equals(userId)).Any())
        //                                {
        //                                    var userProfile = consoleBusiness.CmsDb.UsersProfile.Where(u => u.UserId.Equals(userId)).FirstOrDefault();

        //                                    userProfile.Family = propertiesVM.Family;
        //                                    userProfile.EditEnDate = DateTime.Now;
        //                                    userProfile.EditTime = PersianDate.TimeNow;
        //                                    userProfile.UserIdEditor = userId;

        //                                    consoleBusiness.CmsDb.Entry<UsersProfile>(userProfile).State = EntityState.Modified;
        //                                    consoleBusiness.CmsDb.SaveChanges();

        //                                }
        //                            }
        //                        }

        //                    }


        //                }
        //                //اگر این کاربر وجود نداشته باشد
        //                else
        //                {
        //                    using (var transaction2 = consoleBusiness.CmsDb.Database.BeginTransaction())
        //                    {

        //                        try
        //                        {
        //                            //Add user
        //                            Users users = new Users();
        //                            users.UserName = propertiesVM.UserName;
        //                            users.Password = FrameWork.MD5Hash.GetMD5Hash(propertiesVM.UserName);
        //                            users.DomainSettingId = getDomainSettingId.DomainSettingId;
        //                            users.UserIdCreator = consoleBusiness.GetDomainsSettingsWithDomainName("melkavan.com").UserIdCreator;
        //                            users.IsActivated = true;
        //                            users.IsDeleted = false;
        //                            users.ParentUserId = propertiesVM.UserIdEditor.Value; //this.userId ==> کسی که لاگین کرده در سمت وب ماژول هندل میشود
        //                            users.Email = "user@user.com";

        //                            consoleBusiness.CmsDb.Users.Add(users);
        //                            consoleBusiness.CmsDb.SaveChanges();

        //                            userId = users.UserId;

        //                            UsersProfile usersProfile = new UsersProfile()
        //                            {
        //                                UserId = userId,
        //                                Address = "",
        //                                Age = 0,
        //                                BirthDateTimeEn = DateTime.Now,
        //                                CertificateId = "" +
        //                                "",
        //                                CreateEnDate = DateTime.Now,
        //                                CreateTime = PersianDate.TimeNow,
        //                                CreditCardNumber = "",
        //                                Email = "a@a.com",
        //                                Family = propertiesVM.Family != "" || propertiesVM.Family != null ? propertiesVM.Family : propertiesVM.UserName,
        //                                HasModified = false,
        //                                IsActivated = true,
        //                                IsDeleted = false,
        //                                Mobile = propertiesVM.UserName,
        //                                Name = "",
        //                                NationalCode = "",
        //                                Phone = propertiesVM.UserName,
        //                                Picture = "",
        //                                PostalCode = "",
        //                                Sexuality = false,
        //                                SocialNetworkAddress = "",
        //                                UniqueKey = "",
        //                                UserIdCreator = users.UserIdCreator.Value,
        //                            };

        //                            consoleBusiness.CmsDb.UsersProfile.Add(usersProfile);
        //                            consoleBusiness.CmsDb.SaveChanges();



        //                            UsersLevels usersLevels = new UsersLevels()
        //                            {
        //                                LevelId = getLevelId.LevelId,
        //                                UserId = userId,
        //                                CreateEnDate = DateTime.Now,
        //                                CreateTime = PersianDate.TimeNow,
        //                                UserIdCreator = users.UserIdCreator.Value,
        //                                IsActivated = true,
        //                                IsDeleted = false,
        //                            };

        //                            consoleBusiness.CmsDb.UsersLevels.Add(usersLevels);
        //                            consoleBusiness.CmsDb.SaveChanges();

        //                            UsersRoles usersRoles = new UsersRoles()
        //                            {
        //                                RoleId = getUsersRoleId,
        //                                UserId = userId,
        //                                CreateEnDate = DateTime.Now,
        //                                CreateTime = PersianDate.TimeNow,
        //                                UserIdCreator = users.UserIdCreator.Value,
        //                                IsActivated = true,
        //                                IsDeleted = false,
        //                            };

        //                            consoleBusiness.CmsDb.UsersRoles.Add(usersRoles);
        //                            consoleBusiness.CmsDb.SaveChanges();

        //                            transaction2.Commit();
        //                        }
        //                        catch (Exception)
        //                        {

        //                            transaction.Rollback();
        //                            transaction2.Rollback();

        //                            return 0;
        //                        }


        //                    }


        //                }

        //                properties.UserIdCreator = userId;
        //                teniacoApiDb.SaveChanges();

        //                #endregion

        //                #region propertiesPricesHistories


        //                if (propertiesVM.PriceTypeRegister == 0)//اصلاح قیمت قبلی
        //                {
        //                    PropertiesPricesHistories propertiesPricesHistories = (from h in teniacoApiDb.PropertiesPricesHistories
        //                                                                           where h.PropertyId == propertyId
        //                                                                           select h).OrderByDescending(c => c.CreateEnDate)
        //                                                                            .ThenByDescending(c => c.CreateTime)
        //                                                                            .FirstOrDefault();


        //                    propertiesPricesHistories.OfferPrice = propertiesVM.OfferPrice;
        //                    propertiesPricesHistories.OfferPriceType = propertiesVM.OfferPriceType;
        //                    propertiesPricesHistories.CalculatedOfferPrice = propertiesVM.CalculatedOfferPrice;
        //                    propertiesPricesHistories.RentPrice = propertiesVM.RentPrice;
        //                    propertiesPricesHistories.DepositPrice = propertiesVM.DepositPrice;
        //                    propertiesPricesHistories.PriceTypeRegister = propertiesVM.PriceTypeRegister;
        //                    propertiesPricesHistories.EditEnDate = DateTime.Now;
        //                    propertiesPricesHistories.EditTime = PersianDate.TimeNow;
        //                    propertiesPricesHistories.IsActivated = true;
        //                    propertiesPricesHistories.IsDeleted = false;

        //                    teniacoApiDb.Entry<PropertiesPricesHistories>(propertiesPricesHistories).State = EntityState.Modified;
        //                    teniacoApiDb.SaveChanges();
        //                }
        //                else//ثبت قیمت جدید
        //                {
        //                    PropertiesPricesHistories propertiesPricesHistories = new PropertiesPricesHistories();
        //                    propertiesPricesHistories.OfferPrice = propertiesVM.OfferPrice.HasValue ? propertiesVM.OfferPrice.Value : 0;
        //                    propertiesPricesHistories.OfferPriceType = propertiesVM.OfferPriceType.HasValue ? propertiesVM.OfferPriceType.Value : 0;
        //                    propertiesPricesHistories.CalculatedOfferPrice = propertiesVM.CalculatedOfferPrice.HasValue ? propertiesVM.CalculatedOfferPrice.Value : 0;
        //                    propertiesPricesHistories.RentPrice = propertiesVM.RentPrice.HasValue ? propertiesVM.RentPrice.Value : 0;
        //                    propertiesPricesHistories.DepositPrice = propertiesVM.DepositPrice.HasValue ? propertiesVM.DepositPrice.Value : 0;
        //                    propertiesPricesHistories.PriceTypeRegister = propertiesVM.PriceTypeRegister;
        //                    propertiesPricesHistories.PropertyId = properties.PropertyId;

        //                    propertiesPricesHistories.CreateEnDate = DateTime.Now;
        //                    propertiesPricesHistories.CreateTime = PersianDate.TimeNow;

        //                    propertiesPricesHistories.UserIdCreator = properties.UserIdCreator.Value;
        //                    propertiesPricesHistories.IsActivated = true;
        //                    propertiesPricesHistories.IsDeleted = false;

        //                    teniacoApiDb.PropertiesPricesHistories.Add(propertiesPricesHistories);
        //                    teniacoApiDb.SaveChanges();


        //                }
        //                #endregion

        //                #region PropertiesDetails


        //                PropertiesDetails propertiesDetails = (from ad in teniacoApiDb.PropertiesDetails
        //                                                       where ad.PropertyId == propertyId
        //                                                       select ad).FirstOrDefault();


        //                propertiesDetails.PropertyId = propertyId;
        //                propertiesDetails.AdvertisementTypeId = propertiesVM.AdvertisementTypeId;
        //                propertiesDetails.MaritalStatusId = propertiesVM.MaritalStatusId;
        //                propertiesDetails.Convertable = propertiesVM.Convertable.HasValue ? propertiesVM.Convertable.Value : true;
        //                propertiesDetails.BuildingLifeId = 0;
        //                propertiesDetails.Foundation = 0;

        //                propertiesDetails.EditEnDate = DateTime.Now;
        //                propertiesDetails.EditTime = PersianDate.TimeNow;
        //                propertiesDetails.UserIdEditor = propertiesVM.UserIdEditor.Value;
        //                propertiesDetails.IsActivated = propertiesDetails.IsActivated.HasValue ? propertiesDetails.IsActivated.Value : (bool?)true;
        //                propertiesDetails.IsDeleted = propertiesDetails.IsDeleted.HasValue ? propertiesDetails.IsDeleted.Value : (bool?)false;

        //                teniacoApiDb.Entry<PropertiesDetails>(propertiesDetails).State = EntityState.Modified;
        //                teniacoApiDb.SaveChanges();



        //                #endregion

        //                #region PropertiesAddress


        //                PropertyAddress propertyAddress = (from ad in teniacoApiDb.PropertyAddress
        //                                                   where ad.PropertyId == propertyId
        //                                                   select ad).FirstOrDefault();


        //                propertyAddress.PropertyId = propertyId;
        //                propertyAddress.StateId = propertiesVM.StateId;
        //                propertyAddress.CityId = propertiesVM.CityId;
        //                propertyAddress.ZoneId = propertiesVM.ZoneId;
        //                propertyAddress.TownName = propertiesVM.TownName;
        //                propertyAddress.LocationLat = propertiesVM.LocationLat;
        //                propertyAddress.LocationLon = propertiesVM.LocationLon;




        //                propertyAddress.EditEnDate = DateTime.Now;
        //                propertyAddress.EditTime = PersianDate.TimeNow;
        //                propertyAddress.UserIdEditor = propertiesVM.UserIdEditor.Value;
        //                propertyAddress.IsActivated = propertyAddress.IsActivated.HasValue ? propertyAddress.IsActivated.Value : (bool?)true;
        //                propertyAddress.IsDeleted = propertyAddress.IsDeleted.HasValue ? propertyAddress.IsDeleted.Value : (bool?)false;

        //                teniacoApiDb.Entry<PropertyAddress>(propertyAddress).State = EntityState.Modified;
        //                teniacoApiDb.SaveChanges();




        //                #endregion

        //                transaction.Commit();



        //                return properties.PropertyId;
        //            }
        //            catch (Exception exc)
        //            {
        //                transaction.Rollback();
        //            }



        //        }
        //    }

        //    return 0;
        //}

        #endregion

        public long AddPropertiesInMelkavan(ref PropertiesInMelkavanVM propertiesVM,
              List<long> childsUsersIds,
              IConsoleBusiness consoleBusiness)
        {
            long propertyId = propertiesVM.PropertyId;
            long userId = 0;

            if (teniacoApiDb.Properties.Where(n => childsUsersIds.Contains(n.UserIdCreator.Value))
                        .Where(x => x.PropertyId.Equals(propertyId)).Any())
            {
                using (var transaction = teniacoApiDb.Database.BeginTransaction())
                {
                    try
                    {

                        #region Properties

                        Properties properties = (from c in teniacoApiDb.Properties
                                                 where c.PropertyId == propertyId
                                                 select c).FirstOrDefault();

                        userId = propertiesVM.AdvertiserId.Value;

                        properties.PropertyCodeName = propertiesVM.PropertyCodeName;
                        properties.PropertyDescriptions = propertiesVM.PropertyDescriptions;
                        properties.CreateEnDate = DateTime.Now;
                        properties.CreateTime = PersianDate.TimeNow;
                        properties.EditEnDate = DateTime.Now;
                        properties.EditTime = PersianDate.TimeNow;
                        properties.UserIdEditor = propertiesVM.UserIdEditor.Value;
                        properties.IsActivated = properties.IsActivated.HasValue ? properties.IsActivated.Value : (bool?)true;
                        properties.IsDeleted = properties.IsDeleted.HasValue ? properties.IsDeleted.Value : (bool?)false;
                        properties.ShowInMelkavan = true;
                        properties.AdvertiserId = userId;

                        teniacoApiDb.Entry<Entities.Properties>(properties).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();

                        #endregion


                        // در تیک ملکاوان قیمت عوض نمیشود در نتیجه تایپ رجیستر نال پر میشود و قیمت نه اصلاح میشود و نه جدید ثبت میشود
                        #region propertiesPricesHistories


                        if (propertiesVM.PriceTypeRegister == 0)//اصلاح قیمت قبلی
                        {
                            PropertiesPricesHistories propertiesPricesHistories = (from h in teniacoApiDb.PropertiesPricesHistories
                                                                                   where h.PropertyId == propertyId
                                                                                   select h).OrderByDescending(c => c.CreateEnDate)
                                                                                    .ThenByDescending(c => c.CreateTime)
                                                                                    .FirstOrDefault();


                            propertiesPricesHistories.OfferPrice = propertiesVM.OfferPrice;
                            propertiesPricesHistories.OfferPriceType = propertiesVM.OfferPriceType;
                            propertiesPricesHistories.CalculatedOfferPrice = propertiesVM.CalculatedOfferPrice;
                            propertiesPricesHistories.RentPrice = propertiesVM.RentPrice;
                            propertiesPricesHistories.DepositPrice = propertiesVM.DepositPrice;
                            propertiesPricesHistories.PriceTypeRegister = propertiesVM.PriceTypeRegister;
                            propertiesPricesHistories.EditEnDate = DateTime.Now;
                            propertiesPricesHistories.EditTime = PersianDate.TimeNow;
                            propertiesPricesHistories.IsActivated = true;
                            propertiesPricesHistories.IsDeleted = false;

                            teniacoApiDb.Entry<PropertiesPricesHistories>(propertiesPricesHistories).State = EntityState.Modified;
                            teniacoApiDb.SaveChanges();
                        }
                        else if (propertiesVM.PriceTypeRegister == 1)//ثبت قیمت جدید
                        {
                            PropertiesPricesHistories propertiesPricesHistories = new PropertiesPricesHistories();
                            propertiesPricesHistories.OfferPrice = propertiesVM.OfferPrice.HasValue ? propertiesVM.OfferPrice.Value : 0;
                            propertiesPricesHistories.OfferPriceType = propertiesVM.OfferPriceType.HasValue ? propertiesVM.OfferPriceType.Value : 0;
                            propertiesPricesHistories.CalculatedOfferPrice = propertiesVM.CalculatedOfferPrice.HasValue ? propertiesVM.CalculatedOfferPrice.Value : 0;
                            propertiesPricesHistories.RentPrice = propertiesVM.RentPrice.HasValue ? propertiesVM.RentPrice.Value : 0;
                            propertiesPricesHistories.DepositPrice = propertiesVM.DepositPrice.HasValue ? propertiesVM.DepositPrice.Value : 0;
                            propertiesPricesHistories.PriceTypeRegister = propertiesVM.PriceTypeRegister;
                            propertiesPricesHistories.PropertyId = properties.PropertyId;

                            propertiesPricesHistories.CreateEnDate = DateTime.Now;
                            propertiesPricesHistories.CreateTime = PersianDate.TimeNow;

                            propertiesPricesHistories.UserIdCreator = properties.UserIdCreator.Value;
                            propertiesPricesHistories.IsActivated = true;
                            propertiesPricesHistories.IsDeleted = false;

                            teniacoApiDb.PropertiesPricesHistories.Add(propertiesPricesHistories);
                            teniacoApiDb.SaveChanges();


                        }
                        #endregion

                        #region PropertiesDetails


                        PropertiesDetails propertiesDetails = (from ad in teniacoApiDb.PropertiesDetails
                                                               where ad.PropertyId == propertyId
                                                               select ad).FirstOrDefault();


                        propertiesDetails.PropertyId = propertyId;
                        propertiesDetails.AdvertisementTypeId = propertiesVM.AdvertisementTypeId;
                        propertiesDetails.MaritalStatusId = propertiesVM.MaritalStatusId;
                        propertiesDetails.Convertable = propertiesVM.Convertable.HasValue ? propertiesVM.Convertable.Value : true;
                        propertiesDetails.BuildingLifeId = 0;
                        propertiesDetails.Foundation = null;
                        propertiesDetails.SecondPropertyDescriptions = propertiesVM.SecondPropertyDescriptions;
                        propertiesDetails.EditEnDate = DateTime.Now;
                        propertiesDetails.EditTime = PersianDate.TimeNow;
                        propertiesDetails.CreateEnDate = DateTime.Now;
                        propertiesDetails.CreateTime = PersianDate.TimeNow;
                        propertiesDetails.UserIdEditor = propertiesVM.UserIdEditor.Value;
                        propertiesDetails.IsActivated = propertiesDetails.IsActivated.HasValue ? propertiesDetails.IsActivated.Value : (bool?)true;
                        propertiesDetails.IsDeleted = propertiesDetails.IsDeleted.HasValue ? propertiesDetails.IsDeleted.Value : (bool?)false;

                        teniacoApiDb.Entry<PropertiesDetails>(propertiesDetails).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();



                        #endregion

                        #region PropertiesAddress


                        PropertyAddress propertyAddress = (from ad in teniacoApiDb.PropertyAddress
                                                           where ad.PropertyId == propertyId
                                                           select ad).FirstOrDefault();


                        propertyAddress.PropertyId = propertyId;
                        propertyAddress.StateId = propertiesVM.StateId;
                        propertyAddress.CityId = propertiesVM.CityId;
                        propertyAddress.ZoneId = propertiesVM.ZoneId;
                        propertyAddress.TownName = propertiesVM.TownName;
                        propertyAddress.LocationLat = propertiesVM.LocationLat;
                        propertyAddress.LocationLon = propertiesVM.LocationLon;




                        propertyAddress.EditEnDate = DateTime.Now;
                        propertyAddress.EditTime = PersianDate.TimeNow;
                        propertyAddress.CreateEnDate = DateTime.Now;
                        propertyAddress.CreateTime = PersianDate.TimeNow;
                        propertyAddress.UserIdEditor = propertiesVM.UserIdEditor.Value;
                        propertyAddress.IsActivated = propertyAddress.IsActivated.HasValue ? propertyAddress.IsActivated.Value : (bool?)true;
                        propertyAddress.IsDeleted = propertyAddress.IsDeleted.HasValue ? propertyAddress.IsDeleted.Value : (bool?)false;

                        teniacoApiDb.Entry<PropertyAddress>(propertyAddress).State = EntityState.Modified;
                        teniacoApiDb.SaveChanges();




                        #endregion

                        #region PropertySelectedCallers

                        #region Remove the old records


                        var propertiesSelectedCallers = teniacoApiDb.PropertySelectedCallers.Where(c => c.PropertyId.Equals(propertyId)).ToList();


                        if (propertiesSelectedCallers != null)
                        {
                            teniacoApiDb.PropertySelectedCallers.RemoveRange(propertiesSelectedCallers);
                            teniacoApiDb.SaveChanges();

                        }

                        #endregion


                        #region Add new records


                        PropertySelectedCallers propertySelectedCallers = new PropertySelectedCallers();

                        if (propertiesVM.AdvertiserNumType != null)
                        {
                            if (propertiesVM.AdvertiserNumType.Equals(0))
                            {
                                propertySelectedCallers.PropertyId = properties.PropertyId;

                                propertySelectedCallers.CallerType = "Agency";

                                #region Agency

                                userId = propertiesVM.AdvertiserId.Value;

                                AgencyStaffs agencyStaffs = (from ad in teniacoApiDb.AgencyStaffs
                                                             where ad.UserId == userId
                                                             select ad).FirstOrDefault();

                                if (agencyStaffs != null)
                                {
                                    var agencyTelephone = teniacoApiDb.Agencies.Where(c => c.AgencyId.Equals(agencyStaffs.AgencyId)).FirstOrDefault().Telephone;
                                    propertySelectedCallers.AgencyNumber = agencyTelephone;
                                }
                                else
                                {
                                    propertySelectedCallers.AgencyNumber = "";
                                }


                                #endregion

                                #region propertySelectedCallers


                                propertySelectedCallers.CreateEnDate = DateTime.Now;
                                propertySelectedCallers.CreateTime = PersianDate.TimeNow;

                                propertySelectedCallers.UserIdCreator = properties.UserIdCreator.Value;
                                propertySelectedCallers.IsActivated = true;
                                propertySelectedCallers.IsDeleted = false;


                                teniacoApiDb.PropertySelectedCallers.Add(propertySelectedCallers);
                                teniacoApiDb.SaveChanges();

                                #endregion

                            }
                            else if (propertiesVM.AdvertiserNumType.Equals(1))
                            {
                                propertySelectedCallers.PropertyId = properties.PropertyId;

                                propertySelectedCallers.CallerType = "Advertiser";

                                #region Consultant
                                userId = propertiesVM.AdvertiserId.Value;

                                var userProfile = consoleBusiness.CmsDb.UsersProfile.Where(c => c.UserId.Equals(userId)).FirstOrDefault();

                                if (userProfile != null)
                                {
                                    propertySelectedCallers.AdvertiserNumber = userProfile.Mobile;
                                }
                                else
                                {
                                    propertySelectedCallers.AdvertiserNumber = "";
                                }

                                #endregion

                                #region propertySelectedCallers


                                propertySelectedCallers.CreateEnDate = DateTime.Now;
                                propertySelectedCallers.CreateTime = PersianDate.TimeNow;

                                propertySelectedCallers.UserIdCreator = properties.UserIdCreator.Value;
                                propertySelectedCallers.IsActivated = true;
                                propertySelectedCallers.IsDeleted = false;


                                teniacoApiDb.PropertySelectedCallers.Add(propertySelectedCallers);
                                teniacoApiDb.SaveChanges();

                                #endregion


                            }
                            else if (propertiesVM.AdvertiserNumType.Equals(2))
                            {
                                propertySelectedCallers.PropertyId = properties.PropertyId;
                                propertySelectedCallers.CallerType = "Both";

                                #region Agency

                                userId = propertiesVM.AdvertiserId.Value;

                                AgencyStaffs agencyStaffs = (from ad in teniacoApiDb.AgencyStaffs
                                                             where ad.UserId == userId
                                                             select ad).FirstOrDefault();

                                if (agencyStaffs != null)
                                {
                                    var agencyTelephone = teniacoApiDb.Agencies.Where(c => c.AgencyId.Equals(agencyStaffs.AgencyId)).FirstOrDefault().Telephone;
                                    propertySelectedCallers.AgencyNumber = agencyTelephone;
                                }
                                else
                                {
                                    propertySelectedCallers.AgencyNumber = "";
                                }


                                #endregion

                                #region Consultant
                                userId = propertiesVM.AdvertiserId.Value;

                                var userProfile = consoleBusiness.CmsDb.UsersProfile.Where(c => c.UserId.Equals(userId)).FirstOrDefault();

                                if (userProfile != null)
                                {
                                    propertySelectedCallers.AdvertiserNumber = userProfile.Mobile;
                                }
                                else
                                {
                                    propertySelectedCallers.AdvertiserNumber = "";
                                }

                                #endregion

                                #region propertySelectedCallers


                                propertySelectedCallers.CreateEnDate = DateTime.Now;
                                propertySelectedCallers.CreateTime = PersianDate.TimeNow;

                                propertySelectedCallers.UserIdCreator = properties.UserIdCreator.Value;
                                propertySelectedCallers.IsActivated = true;
                                propertySelectedCallers.IsDeleted = false;


                                teniacoApiDb.PropertySelectedCallers.Add(propertySelectedCallers);
                                teniacoApiDb.SaveChanges();

                                #endregion
                            }
                        }

                        #endregion
                        #endregion

                        transaction.Commit();

                        return properties.PropertyId;
                    }
                    catch (Exception exc)
                    {
                        transaction.Rollback();
                    }



                }
            }

            return 0;
        }

        #endregion

        #region Methods For Work With PropertyAddress
        #endregion

        #region Methods For Work With Propertylocation

        public bool UpdatePropertylocation(long userId,
            long propertyId,
            int stateId,
            int cityId,
            int zoneId,
            string townName,
            string address,
            double locationLat,
            double locationLon)
        {
            try
            {

                PropertyAddress? propertyAddress = teniacoApiDb.PropertyAddress.Where(pa => pa.PropertyId.Equals(propertyId)).FirstOrDefault();
                if (propertyAddress == null)
                {
                    propertyAddress = new PropertyAddress() { PropertyId = propertyId };
                    teniacoApiDb.PropertyAddress.Add(propertyAddress);
                }
                propertyAddress.LocationLat = locationLat;
                propertyAddress.LocationLon = locationLon;
                propertyAddress.StateId = stateId;
                propertyAddress.CityId = cityId;
                propertyAddress.ZoneId = zoneId;
                propertyAddress.TownName = townName;
                propertyAddress.Address = address;
                propertyAddress.EditEnDate = DateTime.Now;
                propertyAddress.EditTime = PersianDate.TimeNow;
                propertyAddress.UserIdEditor = userId;

                teniacoApiDb.SaveChanges();
                return true;
            }
            catch (Exception exc)
            { }

            return false;
        }

        #endregion

        #region Methods For Work With PropertyFiles

        public List<PropertyFilesVM> GetAllPropertyFilesList(ref int listCount,
            List<long> childsUsersIds,
            long? propertyId = null,
            string propertyFileTitle = "",
            string propertyFileType = "",
            string jtSorting = null)
        {
            List<PropertyFilesVM> propertyFilesVMList = new List<PropertyFilesVM>();

            try
            {
                var list = (from pf in teniacoApiDb.PropertyFiles
                            where childsUsersIds.Contains(pf.UserIdCreator.Value) &&
                            pf.PropertyId.Equals(propertyId) &&
                            pf.IsActivated.Value.Equals(true) &&
                            pf.IsDeleted.Value.Equals(false)
                            select pf).AsQueryable();

                if (!string.IsNullOrEmpty(propertyFileTitle))
                    list = list.Where(a => a.PropertyFileTitle.Contains(propertyFileTitle));

                if (!string.IsNullOrEmpty(propertyFileType))
                    list = list.Where(a => a.PropertyFileType.Contains(propertyFileType));

                listCount = list.Count();

                propertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<PropertyFilesVM>>(list.OrderByDescending(pf => pf.PropertyFileId).ToList());
            }
            catch (Exception exc)
            { }

            return propertyFilesVMList;
        }

        public List<PropertyFilesVM> GetListOfPropertyFiles(int jtStartIndex,
              int jtPageSize,
              ref int listCount,
              List<long> childsUsersIds,
              long? propertyId = null,
              string propertyFileTitle = "",
              string propertyFileType = "",
              string jtSorting = null)
        {
            List<PropertyFilesVM> propertyFilesVMList = new List<PropertyFilesVM>();

            var list = (from pf in teniacoApiDb.PropertyFiles
                        where childsUsersIds.Contains(pf.UserIdCreator.Value) &&
                        pf.IsActivated.Value.Equals(true) &&
                        pf.IsDeleted.Value.Equals(false) &&
                        pf.PropertyId.Equals(propertyId)
                        select pf).AsQueryable();

            if (!string.IsNullOrEmpty(propertyFileTitle))
                list = list.Where(a => a.PropertyFileTitle.Contains(propertyFileTitle));

            if (!string.IsNullOrEmpty(propertyFileType))
                list = list.Where(a => a.PropertyFileType.Contains(propertyFileType));

            listCount = list.Count();

            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    if (listCount > jtPageSize)
                    {
                        //zonesVMList = _mapper.Map<List<Zones>, List<ZonesVM>>(list.OrderByDescending(s => s.ZoneId)
                        //         .Skip(jtStartIndex).Take(jtPageSize).ToList());

                        propertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<PropertyFilesVM>>(list.OrderByDescending(s => s.PropertyId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList());
                    }
                    else
                    {
                        //zonesVMList = _mapper.Map<List<Zones>,
                        //    List<ZonesVM>>(list.OrderByDescending(s => s.ZoneId).ToList());

                        propertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<PropertyFilesVM>>(list.OrderByDescending(s => s.PropertyId).ToList());
                    }
                }
                else
                {
                    if (listCount > jtPageSize)
                    {
                        switch (jtSorting)
                        {
                            case "PropertyFileTitle ASC":
                                list = list.OrderBy(l => l.PropertyFileTitle);
                                break;
                            case "PropertyFileTitle DESC":
                                list = list.OrderByDescending(l => l.PropertyFileTitle);
                                break;
                        }

                        if (string.IsNullOrEmpty(jtSorting))
                            propertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<PropertyFilesVM>>(list.OrderByDescending(s => s.PropertyId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList());
                        else
                            propertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<PropertyFilesVM>>(list.Skip(jtStartIndex).Take(jtPageSize).ToList());
                    }
                    else
                    {
                        propertyFilesVMList = _mapper.Map<List<PropertyFiles>, List<PropertyFilesVM>>(list.ToList());
                    }
                }

            }
            catch (Exception exc)
            { }
            return propertyFilesVMList;
        }


        #region old codes- comments - AddToPropertyFiles


        //public bool AddToPropertyFiles(List<PropertyFilesVM> propertyFilesVMList)
        //{
        //    try
        //    {
        //        if (propertyFilesVMList != null)
        //            if (propertyFilesVMList.Count > 0)
        //            {
        //                var propertyFilesList = _mapper.Map<List<PropertyFilesVM>, List<PropertyFiles>>(propertyFilesVMList);

        //                teniacoApiDb.PropertyFiles.AddRange(propertyFilesList);
        //                teniacoApiDb.SaveChanges();

        //                return true;
        //            }
        //    }
        //    catch (Exception exc)
        //    {
        //    }
        //    return false;
        //}


        #endregion

        public bool AddToPropertyFiles(List<PropertyFilesVM> propertyFilesVMList,
            List<int>? DeletedPhotosIDs,
            bool? IsMainChanged,
            long? PropertyId)
        {

            bool result = false;
            try
            {

                //for removing files
                if (DeletedPhotosIDs != null && DeletedPhotosIDs.Count > 0)
                {
                    foreach (int id in DeletedPhotosIDs)
                    {
                        var FileToDelete = teniacoApiDb.PropertyFiles
                            .Where(f => f.PropertyFileId == id).FirstOrDefault();

                        teniacoApiDb.PropertyFiles.Remove(FileToDelete);
                        teniacoApiDb.SaveChanges();
                    }

                    result = true;
                }


                if (propertyFilesVMList != null)
                    if (propertyFilesVMList.Count > 0)
                    {
                        //main photo is last record in files table
                        var MainFile = teniacoApiDb.PropertyFiles
                            .Where(a => a.PropertyId == PropertyId)
                         .OrderByDescending(a => a.PropertyFileId)
                         .FirstOrDefault();


                        var propertyFilesList = _mapper.Map<List<PropertyFilesVM>, List<PropertyFiles>>(propertyFilesVMList);

                        teniacoApiDb.PropertyFiles.AddRange(propertyFilesList);
                        teniacoApiDb.SaveChanges();


                        if (MainFile != null && IsMainChanged == false)
                        {
                            teniacoApiDb.PropertyFiles.Remove(MainFile);
                            teniacoApiDb.SaveChanges();

                            MainFile.PropertyFileId = 0;
                            teniacoApiDb.PropertyFiles.Add(MainFile);
                            teniacoApiDb.SaveChanges();
                        }





                        return true;
                    }




            }
            catch (Exception exc)
            {
            }
            return result;
        }


        public PropertyFilesVM GetPropertyFileWithPropertyFileId(int propertyFileId,
            List<long> childsUsersIds)
        {
            PropertyFilesVM propertyFilesVM = new PropertyFilesVM();

            try
            {
                propertyFilesVM = _mapper.Map<PropertyFiles,
                    PropertyFilesVM>(teniacoApiDb.PropertyFiles
                    .Where(p => childsUsersIds.Contains(p.UserIdCreator.Value))
                    .Where(e => e.PropertyFileId.Equals(propertyFileId)).FirstOrDefault());
            }
            catch (Exception exc)
            { }

            return propertyFilesVM;
        }

        public bool UpdatePropertyFiles(ref PropertyFilesVM propertyFilesVM,
            List<long> childsUsersIds)
        {
            int propertyFileId = propertyFilesVM.PropertyFileId;
            long propertyId = propertyFilesVM.PropertyId;
            string propertyFileExt = propertyFilesVM.PropertyFileExt;
            string propertyFilePath = propertyFilesVM.PropertyFilePath;
            string propertyFileTitle = propertyFilesVM.PropertyFileTitle;
            string propertyFileType = propertyFilesVM.PropertyFileType;

            try
            {
                PropertyFiles propertyFiles = (from c in teniacoApiDb.PropertyFiles
                                               where c.PropertyFileId == propertyFileId
                                               select c).FirstOrDefault();

                propertyFiles.PropertyId = propertyId;
                propertyFiles.PropertyFileExt = propertyFileExt;
                propertyFiles.PropertyFilePath = propertyFilePath;
                propertyFiles.PropertyFileTitle = propertyFileTitle;
                propertyFiles.PropertyFileType = propertyFileType;

                propertyFiles.EditEnDate = propertyFilesVM.EditEnDate.Value;
                propertyFiles.EditTime = propertyFilesVM.EditTime;
                propertyFiles.UserIdEditor = propertyFilesVM.UserIdEditor;
                propertyFiles.IsActivated = propertyFilesVM.IsActivated;
                propertyFiles.IsDeleted = propertyFilesVM.IsDeleted;

                teniacoApiDb.Entry<PropertyFiles>(propertyFiles).State = EntityState.Modified;
                teniacoApiDb.SaveChanges();

                return true;
            }
            catch (Exception exc)
            {
            }

            return false;
        }

        public bool ToggleActivationPropertyFiles(int propertyFileId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                var propertyFiles = (from c in teniacoApiDb.PropertyFiles
                                     where c.PropertyFileId == propertyFileId &&
                                     childsUsersIds.Contains(c.UserIdCreator.Value)
                                     select c).FirstOrDefault();

                if (propertyFiles != null)
                {
                    propertyFiles.IsActivated = !propertyFiles.IsActivated;
                    propertyFiles.EditEnDate = DateTime.Now;
                    propertyFiles.EditTime = PersianDate.TimeNow;
                    propertyFiles.UserIdEditor = userId;

                    teniacoApiDb.Entry<PropertyFiles>(propertyFiles).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;
        }

        public bool TemporaryDeletePropertyFiles(int propertyFileId,
            long userId,
            List<long> childsUsersIds)
        {
            try
            {
                var propertyFiles = (from c in teniacoApiDb.PropertyFiles
                                     where c.PropertyFileId == propertyFileId &&
                                     childsUsersIds.Contains(c.UserIdCreator.Value)
                                     select c).FirstOrDefault();

                if (propertyFiles != null)
                {
                    propertyFiles.IsDeleted = !propertyFiles.IsDeleted;
                    propertyFiles.EditEnDate = DateTime.Now;
                    propertyFiles.EditTime = PersianDate.TimeNow;
                    propertyFiles.UserIdEditor = userId;

                    teniacoApiDb.Entry<PropertyFiles>(propertyFiles).State = EntityState.Modified;
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;
        }

        public bool CompleteDeletePropertyFiles(int propertyFileId,
            List<long> childsUsersIds)
        {
            try
            {
                var propertyFiles = (from c in teniacoApiDb.PropertyFiles
                                     where c.PropertyFileId == propertyFileId &&
                                     childsUsersIds.Contains(c.UserIdCreator.Value)
                                     select c).FirstOrDefault();

                if (propertyFiles != null)
                {
                    teniacoApiDb.PropertyFiles.Remove(propertyFiles);
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;
        }

        public PropertyFeaturesValuesVM GetPropertyFeaturesValues(long propertyId,
            int propertyTypeId)
        {
            PropertyFeaturesValuesVM propertyFeaturesValuesVM = new PropertyFeaturesValuesVM();

            try
            {
                //propertyFeaturesValuesVM.ElementTypesVMList = _mapper.Map<List<ElementTypes>,
                //            List<ElementTypesTeniacoVM>>(teniacoApiDb.ElementTypes.ToList());

                if (teniacoApiDb.Features.Where(f => f.PropertyTypeId.Equals(propertyTypeId)).Any())
                {
                    propertyFeaturesValuesVM.FeaturesVMList = _mapper.Map<List<Features>,
                        List<FeaturesVM>>(teniacoApiDb.Features.Where(f => f.PropertyTypeId.Equals(propertyTypeId)).ToList());


                    // codes by sina
                    List<int> featuresCategoriesIds = teniacoApiDb.Features.Where(c => c.PropertyTypeId == propertyTypeId).Select(c => c.FeatureCategoryId).Distinct().ToList();
                    List<int> featureIds = teniacoApiDb.Features.Where(c => featuresCategoriesIds.Contains(c.FeatureCategoryId)).Select(c => c.FeatureId).Distinct().ToList();

                    propertyFeaturesValuesVM.FeaturesCategoriesVMList = _mapper.Map<List<FeaturesCategories>, List<FeaturesCategoriesVM>>(teniacoApiDb.FeaturesCategories.Where(f => featuresCategoriesIds.Contains(f.FeatureCategoryId)).ToList());




                    if (teniacoApiDb.FeaturesOptions.Where(fo => featureIds.Contains(fo.FeatureId)).Any())
                    {
                        propertyFeaturesValuesVM.FeaturesOptionsVMList = _mapper.Map<List<FeaturesOptions>,
                            List<FeaturesOptionsVM>>(teniacoApiDb.FeaturesOptions.Where(fo => featureIds.Contains(fo.FeatureId)).ToList());
                    }

                    if (teniacoApiDb.FeaturesValues.Where(fv => fv.PropertyId.Equals(propertyId)).Any())
                    {
                        propertyFeaturesValuesVM.FeaturesValuesVMList = propertyFeaturesValuesVM.FeaturesValuesVMList = _mapper.Map<List<FeaturesValues>,
                            List<FeaturesValuesVM>>(teniacoApiDb.FeaturesValues.Where(fv => fv.PropertyId.Equals(propertyId)).ToList());
                    }
                }
            }
            catch (Exception exc)
            { }

            return propertyFeaturesValuesVM;
        }

        #endregion

        #region Methods For Work With PropertyStates
        #endregion

        #region Methods For Work With PropertyTypes

        //public List<PropertyTypesVM> GetAllPropertyTypesList()
        //{
        //    try
        //    {
        //        var propertyTypes = teniacoApiDb.PropertyTypes.AsQueryable();

        //        return _mapper.Map<List<PropertyTypes>, List<PropertyTypesVM>>(propertyTypes.ToList());
        //    }
        //    catch (Exception exc)
        //    { }
        //    return new List<PropertyTypesVM>();
        //}


        public List<PropertyTypesVM> GetAllPropertyTypesList(
            ref int listCount,
            List<long> childsUsersIds)
        {
            List<PropertyTypesVM> propertyTypesVMList = new List<PropertyTypesVM>();

            try
            {
                var list = (from p in teniacoApiDb.PropertyTypes
                            where p.IsDeleted.Value.Equals(false) &&
                            p.IsActivated.Value.Equals(true)
                            select new PropertyTypesVM
                            {
                                PropertyTypeId = p.PropertyTypeId,
                                PropertyTypeTilte = p.PropertyTypeTilte,
                                UserIdCreator = p.UserIdCreator.Value,
                                CreateEnDate = p.CreateEnDate,
                                CreateTime = p.CreateTime,
                                EditEnDate = p.EditEnDate,
                                EditTime = p.EditTime,
                                UserIdEditor = p.UserIdEditor.Value,
                                RemoveEnDate = p.RemoveEnDate,
                                RemoveTime = p.EditTime,
                                UserIdRemover = p.UserIdRemover.Value,
                                IsActivated = p.IsActivated,
                                IsDeleted = p.IsDeleted
                            })
                            .AsEnumerable();

                propertyTypesVMList = list.OrderByDescending(s => s.PropertyTypeId).ToList();

            }
            catch (Exception ex)
            { }

            return propertyTypesVMList;
        }

        #endregion

        #region Methods for Work With PropertiesPricesHistories

        public List<PropertiesPricesHistoriesVM> GetListOfPropertiesPricesHistories(
           int jtStartIndex,
           int jtPageSize,
           ref int listCount,
           List<long> childsUsersIds,
           long propertyId,
           string jtSorting = null)
        {
            List<PropertiesPricesHistoriesVM> propertiesPricesHistoriesVMList = new List<PropertiesPricesHistoriesVM>();


            var list = (from p in teniacoApiDb.PropertiesPricesHistories
                        where p.IsActivated.Value.Equals(true) &&
                        p.IsDeleted.Value.Equals(false)
                        select new PropertiesPricesHistoriesVM
                        {
                            PropertyPriceHistoryId = p.PropertyPriceHistoryId,
                            CalculatedOfferPrice = p.CalculatedOfferPrice,
                            OfferPrice = p.OfferPrice,
                            PropertyId = p.PropertyId,
                            OfferPriceType = p.OfferPriceType,
                            UserIdCreator = p.UserIdCreator.Value,
                            CreateEnDate = p.CreateEnDate,
                            CreateTime = p.CreateTime,
                            EditEnDate = p.EditEnDate,
                            EditTime = p.EditTime,
                            UserIdEditor = p.UserIdEditor.Value,
                            RemoveEnDate = p.RemoveEnDate,
                            RemoveTime = p.EditTime,
                            UserIdRemover = p.UserIdRemover.Value,
                            IsActivated = p.IsActivated,
                            IsDeleted = p.IsDeleted,
                        }).AsQueryable();

            if (propertyId != null)
                if (propertyId > 0)
                    list = list.Where(a => a.PropertyId.Equals(propertyId));

            try
            {
                if (string.IsNullOrEmpty(jtSorting))
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        propertiesPricesHistoriesVMList = list.OrderByDescending(s => s.PropertyPriceHistoryId)
                                 .Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                        propertiesPricesHistoriesVMList = list.OrderByDescending(s => s.PropertyPriceHistoryId).ToList();
                }
                else
                {
                    listCount = list.Count();

                    if (listCount > jtPageSize)
                    {

                        if (string.IsNullOrEmpty(jtSorting))
                            propertiesPricesHistoriesVMList = list.OrderByDescending(s => s.PropertyPriceHistoryId)
                                     .Skip(jtStartIndex).Take(jtPageSize).ToList();
                        else
                            propertiesPricesHistoriesVMList = list.Skip(jtStartIndex).Take(jtPageSize).ToList();
                    }
                    else
                    {

                        propertiesPricesHistoriesVMList = list.ToList();
                    }
                }
            }
            catch (Exception exc)
            { }
            return propertiesPricesHistoriesVMList;
        }

        public PropertiesPricesHistoriesVM GetLastPropertiesPriceHistoryByPropertyId(
            List<long> childsUsersIds,
           long propertyId)
        {
            PropertiesPricesHistoriesVM propertiesPricesHistoriesVM = new PropertiesPricesHistoriesVM();

            try
            {

                propertiesPricesHistoriesVM = _mapper.Map<PropertiesPricesHistories,
                    PropertiesPricesHistoriesVM>(teniacoApiDb.PropertiesPricesHistories
                   .Where(h => h.PropertyId.Equals(propertyId)).OrderByDescending(c => c.CreateEnDate)
                    .ThenByDescending(c => c.CreateTime).FirstOrDefault());


            }
            catch (Exception exc)
            { }

            return propertiesPricesHistoriesVM;
        }

        #endregion

        #region Methods for Work With Positions

        public List<PositionsVM> GetAllPositionsList(
            ref int listCount,
            List<long> childsUsersIds,
            int? positionId)
        {
            List<PositionsVM> positionsVMList = new List<PositionsVM>();

            try
            {
                var list = (from d in teniacoApiDb.Positions
                            select new PositionsVM
                            {
                                PositionName = d.PositionName,
                                PositionId = d.PositionId,
                                UserIdCreator = d.UserIdCreator.Value,
                                CreateEnDate = d.CreateEnDate,
                                CreateTime = d.CreateTime,
                                EditEnDate = d.EditEnDate,
                                EditTime = d.EditTime,
                                UserIdEditor = d.UserIdEditor.Value,
                                RemoveEnDate = d.RemoveEnDate,
                                RemoveTime = d.EditTime,
                                UserIdRemover = d.UserIdRemover.Value,
                                IsActivated = d.IsActivated,
                                IsDeleted = d.IsDeleted,
                            }).AsQueryable();


                if (positionId.HasValue)
                    if (positionId.Value > 0)
                        list = list.Where(a => a.PositionId.Equals(positionId.Value));

                positionsVMList = list.OrderByDescending(s => s.PositionId).ToList();

            }
            catch (Exception)
            { }

            return positionsVMList;
        }

        #endregion

        #region Methods For Work With PropertiesViewers

        public List<PropertiesViewersVM> GetPropertiesViewersWithPropertyId(long? propertyId)
        {
            List<PropertiesViewersVM> propertiesViewersVMList = new List<PropertiesViewersVM>();
            try
            {
                if (propertyId.HasValue)
                    if (propertyId.Value > 0)
                    {
                        if (teniacoApiDb.PropertiesViewers.Where(v => v.PropertyId.Equals(propertyId.Value)).Any())
                        {
                            propertiesViewersVMList = _mapper.Map<List<PropertiesViewers>, List<PropertiesViewersVM>>(
                                teniacoApiDb.PropertiesViewers.Where(v => v.PropertyId.Equals(propertyId.Value)).ToList());
                        }
                    }

            }
            catch (Exception exc)
            { }
            return propertiesViewersVMList;
        }


        public int AddToPropertiesViewers(PropertiesViewersVM propertiesViewersVM)
        {

            try
            {

                if (propertiesViewersVM.UserIdCreator.HasValue)
                    if (propertiesViewersVM.UserIdCreator.Value > 0)

                    {
                        PropertiesViewers propertiesViewers = _mapper.Map<PropertiesViewersVM, PropertiesViewers>(propertiesViewersVM);

                        propertiesViewers.IsActivated = true;
                        propertiesViewers.IsDeleted = false;

                        teniacoApiDb.PropertiesViewers.Add(propertiesViewers);
                        teniacoApiDb.SaveChanges();

                        return propertiesViewers.PropertiesViewersId;
                    }

            }
            catch (Exception exc)
            { }

            return 0;
        }


        #endregion

        #region Methods For Work With PropertiesCallers
        public List<PropertiesCallersVM> GetPropertiesCallersWithPropertyId(long? propertyId)
        {
            List<PropertiesCallersVM> propertiesCallersVMList = new List<PropertiesCallersVM>();
            try
            {

                if (propertyId.HasValue)
                    if (propertyId.Value > 0)
                    {
                        if (teniacoApiDb.PropertiesCallers.Where(c => c.PropertyId.Equals(propertyId.Value)).Any())
                        {
                            propertiesCallersVMList = _mapper.Map<List<PropertiesCallers>, List<PropertiesCallersVM>>(
                                teniacoApiDb.PropertiesCallers.Where(v => v.PropertyId.Equals(propertyId.Value)).ToList());
                        }
                    }

            }
            catch (Exception exc)
            { }
            return propertiesCallersVMList;
        }


        public int AddToPropertiesCallers(PropertiesCallersVM propertiesCallersVM)
        {

            try
            {

                if (propertiesCallersVM.UserIdCreator.HasValue)
                    if (propertiesCallersVM.UserIdCreator.Value > 0)

                    {
                        PropertiesCallers propertiesCallers = _mapper.Map<PropertiesCallersVM, PropertiesCallers>(propertiesCallersVM);

                        propertiesCallers.IsActivated = true;
                        propertiesCallers.IsDeleted = false;

                        teniacoApiDb.PropertiesCallers.Add(propertiesCallers);
                        teniacoApiDb.SaveChanges();

                        return propertiesCallers.PropertiesCallersId;
                    }

            }
            catch (Exception exc)
            { }

            return 0;
        }


        #endregion

        #region Methods For Work With PropertiesFavorites


        public int AddToPropertiesFavorites(PropertiesFavoritesVM propertiesFavoritesVM)
        {

            try
            {

                if (propertiesFavoritesVM.UserIdCreator.HasValue)
                    if (propertiesFavoritesVM.UserIdCreator.Value > 0)

                    {
                        PropertiesFavorites propertiesFavorites = _mapper.Map<PropertiesFavoritesVM, PropertiesFavorites>(propertiesFavoritesVM);

                        propertiesFavorites.IsActivated = true;
                        propertiesFavorites.IsDeleted = false;

                        teniacoApiDb.PropertiesFavorites.Add(propertiesFavorites);
                        teniacoApiDb.SaveChanges();

                        return propertiesFavorites.PropertiesFavoriteId;
                    }

            }
            catch (Exception exc)
            { }

            return 0;
        }


        public bool CompleteDeletePropertiesFavorites(long propertyId, long userId)
        {
            try
            {
                var propertiesFavorite = (from c in teniacoApiDb.PropertiesFavorites
                                          where c.PropertyId == propertyId &&
                                             c.UserIdCreator == userId
                                          select c).FirstOrDefault();

                if (propertiesFavorite != null)
                {
                    teniacoApiDb.PropertiesFavorites.Remove(propertiesFavorite);
                    teniacoApiDb.SaveChanges();

                    return true;
                }
            }
            catch (Exception exc)
            { }

            return false;
        }
        #endregion

        #region Methods For Work With TypeOfUses

        public List<TypeOfUsesVM> GetAllTypeOfUsesList()
        {
            try
            {
                var typeOfUses = teniacoApiDb.TypeOfUses.Where(t => t.IsActivated.Value.Equals(true) && t.IsDeleted.Value.Equals(false)).AsQueryable();

                return _mapper.Map<List<TypeOfUses>, List<TypeOfUsesVM>>(typeOfUses.ToList());
            }
            catch (Exception exc)
            { }
            return new List<TypeOfUsesVM>();
        }

        #endregion


        #endregion
    }
}
