<script type="text/javascript">

    $(document).ready(function () {

        $('#error-alert').hide(100);

        for (var i = 0; i < statesList.length; i++) {
            var item = statesList[i];
            $('#slcStateId')
                .append($("<option></option>")
                    .attr("value", item.StateId)
                    .text(item.StateName));
        }

        $('#slcStateId').chosen({
            placeholder_text_single: ' ',
            placeholder_text_multiple: ' ',
            search_contains: true,
            max_shown_results: numberOfChosenItemsShow,
            rtl: rtl
        });

        $('#slcCityId').chosen({
            placeholder_text_single: ' ',
            placeholder_text_multiple: ' ',
            search_contains: true,
            max_shown_results: numberOfChosenItemsShow,
            rtl: rtl
        });

        $('#slcZoneId').chosen({
            placeholder_text_single: ' ',
            placeholder_text_multiple: ' ',
            search_contains: true,
            max_shown_results: numberOfChosenItemsShow,
            rtl: rtl
        });

        $('body').on('change', '#slcStateId', function (e) {
            e.preventDefault();

            var _this = $(this);
            var stateId = _this.val();

            $('#slcCityId').find('option')
                .remove()
                .end()
                .append('<option value="" selected>---</option>');

            for (var i = 0; i < citiesList.length; i++) {
                var item = citiesList[i];
                if (item.StateId == stateId)
                    $('#slcCityId')
                        .append($("<option></option>")
                            .attr("value", item.CityId)
                            .text(item.CityName));
            }

            $('#slcCityId').val(districtsVM.CityId).trigger("chosen:updated");

            $('#slcCityId').change();
        });


        $('body').on('change', '#slcCityId', function (e) {
            e.preventDefault();

            var _this = $(this);
            var cityId = _this.val();

            $('#slcZoneId').find('option')
                .remove()
                .end()
                .append('<option value="" selected>---</option>');

            for (var i = 0; i < zonesList.length; i++) {
                var item = zonesList[i];
                if (item.CityId == cityId)
                    $('#slcZoneId')
                        .append($("<option></option>")
                            .attr("value", item.ZoneId)
                            .text(item.ZoneName));
            }

            $('#slcZoneId').val(districtsVM.ZoneId).trigger("chosen:updated");
        });

        $('#slcStateId').val(districtsVM.StateId).trigger("chosen:updated");
        $('#slcStateId').change();

        //good
        //var map = new ol.Map({
        //    target: 'mapContainer',
        //    layers: [
        //        new ol.layer.Tile({
        //            source: new ol.source.OSM()
        //        })
        //    ],
        //    view: new ol.View({
        //        center: ol.proj.fromLonLat([37.41, 8.82]),
        //        zoom: 4
        //    })
        //});


        //var lineString = new ol.geom.LineString([
        //    [103.985150, 1.349480],
        //    [103.985656, 1.350743]
        //]);
        //lineString.transform('EPSG:4326', 'EPSG:3857');

        //var lineLayer = new ol.layer.Vector({
        //    source: new ol.source.Vector({
        //        features: [new ol.Feature({
        //            geometry: lineString,
        //            name: 'Line'
        //        })]
        //    }),
        //    style: new ol.style.Style({
        //        stroke: new ol.style.Stroke({
        //            color: 'yellow',
        //            opacity: 0.5,
        //            width: 15
        //        })
        //    })
        //});

        //var view = new ol.View({
        //    center: ol.proj.transform([103.986908, 1.353199], 'EPSG:4326', 'EPSG:3857'),
        //    zoom: 18
        //});

        //var map = new ol.Map({
        //    layers: [
        //        new ol.layer.Tile({
        //            source: new ol.source.OSM()
        //        }),
        //        lineLayer
        //    ],
        //    target: 'mapContainer',
        //    /*controls: ol.control.defaults({ attribution: false }).extend([new ol.control.Attribution({
        //        collapsible: false
        //    })]),*/
        //    view: view
        //});




        //two map
        //import Map from 'ol/Map';
        //import TileLayer from 'ol/layer/Tile';
        //import View from 'ol/View';
        //import XYZ from 'ol/source/XYZ';

        //var raster = new ol.layer.Tile({
        //    source: new ol.source.OSM()
        //});

        //const key = 'Get your own API key at https://www.maptiler.com/cloud/';
        //const attributions =
        //    '<a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> ' +
        //    '<a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>';

        //const roadLayer = new ol.layer.Tile({
        //    source: new XYZ({
        //        //attributions: attributions,
        //        url: 'https://api.maptiler.com/maps/streets/{z}/{x}/{y}.png?key=' + key,
        //        tileSize: 512,
        //        maxZoom: 22,
        //    }),
        //});

        //const aerialLayer = new ol.layer.Tile({
        //    source: new XYZ({
        //        //attributions: attributions,
        //        url: 'https://api.maptiler.com/tiles/satellite/{z}/{x}/{y}.jpg?key=' + key,
        //        maxZoom: 20,
        //    }),
        //});

        //const view = new View({
        //    center: [-6655.5402445057125, 6709968.258934638],
        //    zoom: 13,
        //});

        //const map1 = new Map({
        //    target: 'road',
        //    layers: [roadLayer],
        //    view: view,
        //});

        //const map2 = new Map({
        //    target: 'aerial',
        //    layers: [aerialLayer],
        //    view: view,
        //});







        //var projection = ol.proj.get('EPSG:3857');
        var raster = new ol.layer.Tile({
            source: new ol.source.OSM,
            zoom: 12,
            maxZoom: 17,
            minZoom: 1,
        });

        var vectorSource = new ol.source.Vector({
            wrapX: false
        });

        var coordinates;
        var strPolygon = '';

        var vectorLayer = new ol.layer.Vector({
            source: vectorSource,
            style: [
                /* We are using two different styles for the polygons:
                 *  - The first style is for the polygons themselves.
                 *  - The second style is to draw the vertices of the polygons.
                 *    In a custom `geometry` function the vertices of a polygon are
                 *    returned as `MultiPoint` geometry, which will be used to render
                 *    the style.
                 */
                new ol.style.Style({
                    stroke: new ol.style.Stroke({
                        color: 'blue',
                        width: 3
                    }),
                    fill: new ol.style.Fill({
                        color: 'rgba(0, 0, 255, 0.1)'
                    })
                }),
                new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 5,
                        fill: new ol.style.Fill({
                            color: 'darkblue'
                        })
                    }),
                    //geometry: function (feature) {
                    //    //map.removeInteraction(draw);
                    //    debugger;
                    //    // return the coordinates of the first ring of the polygon
                    //    coordinates = feature.getGeometry().getCoordinates()[0];
                    //    //console.log(coordinates);

                    //    var geom = feature.getGeometry().transform('EPSG:3857', 'EPSG:4326');
                    //    //console.log(geom.getCoordinates());

                    //    var multiPoint = new ol.geom.MultiPoint(coordinates);

                    //    strPolygon = JSON.stringify(geom.getCoordinates()[0]);
                    //    console.log(strPolygon);

                    //    return multiPoint;
                    //}
                })
            ]
        });

        var view = new ol.View({
            center: ol.proj.transform([51.24494, 36.66517], 'EPSG:4326', 'EPSG:3857'),
            //center: ol.proj.fromLonLat([116.5, 40]),
            zoom: 12,
            maxZoom: 17,
            minZoom: 1,
            constrainOnlyCenter: true,
        });

        var map = new ol.Map({
            logo: false,
            controls: ol.control.defaults({
                attributionOptions: ({
                    collapsible: false
                })
            }),
            //layers: [raster, vectorLayer],
            layers: [raster],//, vectorLayer],
            target: 'map',
            view: view
        });

        debugger;
        var coord2 = JSON.parse(districtsVM.StrPolygon);

        var points = [];
        for (var j = 0; j < coord2.length - 1; j++) {
            points[j] = ol.proj.transform([Number(coord2[j][0]), Number(coord2[j][1])], 'EPSG:4326', 'EPSG:3857');
        }
        var feature = new ol.Feature({
            geometry: new ol.geom.Polygon([points]),
            featureName: 'test',
            type: 'Point',
            desc: "Custom objects bound to this description"
        });

        vectorSource.addFeature(feature);
        map.addLayer(vectorLayer);

        var mapSatellite = new ol.Map({
            logo: false,
            controls: ol.control.defaults({
                attributionOptions: ({
                    collapsible: false
                })
            }),
            //layers: [raster, vectorLayer],
            target: 'mapSatellite',
            view: view
        });

        var worldImagery = new ol.layer.Tile({
            source: new ol.source.XYZ({
                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
                zoom: 12,
                maxZoom: 17,
                minZoom: 1,
            })
        });
        mapSatellite.addLayer(worldImagery);

        //var draw = new ol.interaction.Draw({
        //    source: vectorSource,
        //    type: 'Polygon',
        //});

        //var LocationLon = 51.24494;
        //var LocationLat = 36.66517;

        debugger;

        $('#btnReset').click(function (e) {
            e.preventDefault();

            window.location.reload();
        });
        //var select = new ol.interaction.Select();
        var modify = new ol.interaction.Modify({
            source: vectorSource,
            //features: select.getFeatures(),
        });
        //map.addInteraction(select);
        map.addInteraction(modify);
        //mapSatellite.addInteraction(modify);

        var draw; // global so we can remove it later

        //map.addInteraction(draw);

        //var geometryFunction, maxPoints;
        //geometryFunction = function (coordinates, geometry) {
        //    debugger;;
        //    if (!geometry) {
        //        geometry = new ol.geom.Polygon(null);
        //    }
        //    var start = coordinates[0];
        //    var end = coordinates[1];
        //    geometry.setCoordinates([
        //        [start, [start[0], end[1]], end, [end[0], start[1]], start]
        //    ]);
        //    debugger;
        //    return geometry;
        //};
        ////maxPoints = 2;
        //draw = new ol.interaction.Draw({
        //    source: vectorSource,
        //    type: ('Polygon'),
        //    geometryFunction: geometryFunction,
        //    //maxPoints: maxPoints
        //});
        //map.addInteraction(draw);
        //snap = new ol.interaction.Snap({ source: vectorSource });
        //map.addInteraction(snap);

        debugger;
        //  var vectorLayer = new ol.layer.Vector({
        //      source: vectorSource,
        //      style: function (feature) {
        //          debugger;
        //          //var label = 'test ' + i;
        //          var labelStyle = new ol.style.Style({
        //              //stroke: new ol.style.Stroke({
        //              //    color: 'lightblue',
        //              //    width: 1,
        //              //}),
        //              fill: new ol.style.Fill({
        //                  //color: 'rgba(0, 0, 255, 0.1)',
        //color: 'lightblue',
        //                  //color: 'rgba(174, 189, 221, 0.1)',
        //                  //color: 'rgba(85, 128, 168, 0.5)',
        //              }),
        //              text: new ol.style.Text({
        //                  font: '12px Calibri,sans-serif',
        //                  overflow: true,
        //                  fill: new ol.style.Fill({
        //                      color: 'red',
        //                  }),
        //                  stroke: new ol.style.Stroke({
        //                      color: '#fff',
        //                      width: 3,
        //                  }),
        //              }),
        //          });
        //          labelStyle.getText().setText(feature.A.featureName);
        //          return labelStyle;
        //      },
        //  });

        //mapSatellite.addInteraction(draw);
        ////snap = new ol.interaction.Snap({ source: vectorSource });
        //mapSatellite.addInteraction(snap);

        function addInteraction() {
            debugger;
            var value = 'Polygon';
            if (value !== 'None') {
                var geometryFunction, maxPoints;
                if (value === 'Square') {
                    value = 'Circle';
                    geometryFunction = ol.interaction.Draw.createRegularPolygon(4);
                } else if (value === 'Box') {
                    value = 'LineString';
                    maxPoints = 2;
                    geometryFunction = function (coordinates, geometry) {
                        debugger;;
                        if (!geometry) {
                            geometry = new ol.geom.Polygon(null);
                        }
                        var start = coordinates[0];
                        var end = coordinates[1];
                        geometry.setCoordinates([
                            [start, [start[0], end[1]], end, [end[0], start[1]], start]
                        ]);
                        debugger;
                        return geometry;
                    };
                }
                draw = new ol.interaction.Draw({
                    source: vectorSource,
                    type: ('Polygon'),
                    geometryFunction: geometryFunction,
                    maxPoints: maxPoints
                });

                map.addInteraction(draw);
                snap = new ol.interaction.Snap({ source: vectorSource });
                map.addInteraction(snap);

                //mapSatellite.addInteraction(draw);
                //snap = new ol.interaction.Snap({ source: vectorSource });
                //mapSatellite.addInteraction(snap);
            }
        }

        addInteraction();

        //function addmapSatelliteInteraction() {
        //    debugger;
        //    var value = 'Polygon';
        //    if (value !== 'None') {
        //        var geometryFunction, maxPoints;
        //        if (value === 'Square') {
        //            value = 'Circle';
        //            geometryFunction = ol.interaction.Draw.createRegularPolygon(4);
        //        } else if (value === 'Box') {
        //            value = 'LineString';
        //            maxPoints = 2;
        //            geometryFunction = function (coordinates, geometry) {
        //                debugger;;
        //                if (!geometry) {
        //                    geometry = new ol.geom.Polygon(null);
        //                }
        //                var start = coordinates[0];
        //                var end = coordinates[1];
        //                geometry.setCoordinates([
        //                    [start, [start[0], end[1]], end, [end[0], start[1]], start]
        //                ]);
        //                debugger;
        //                return geometry;
        //            };
        //        }
        //        draw = new ol.interaction.Draw({
        //            source: vectorSource,
        //            type: (value),
        //            geometryFunction: geometryFunction,
        //            maxPoints: maxPoints
        //        });
        //        //map.addInteraction(draw);
        //        mapSatellite.addInteraction(draw);
        //        snap = new ol.interaction.Snap({ source: vectorSource });
        //        mapSatellite.addInteraction(snap);
        //    }
        //}

        //addmapSatelliteInteraction();

        //var geom;

        //draw.on('drawend', function (evt) {
        //    debugger;
        //    coordinates = evt.feature.getGeometry().getCoordinates()[0];
        //    geom = evt.feature.getGeometry();//.transform('EPSG:3857', 'EPSG:4326');
        //    //var transform = geom.transform('EPSG:3857', 'EPSG:4326');
        //    //strPolygon = JSON.stringify(geom.getCoordinates()[0]);
        //    ////console.log(evt.feature.getGeometry().getCoordinates());
        //});

        $('body').on('click', '#btnSubmit', function (e) {
            e.preventDefault();
            var _this = $(this);

            debugger;

            var districtId = districtsVM.DistrictId;
            var stateId = $('#slcStateId').val();
            var cityId = $('#slcCityId').val();
            var zoneId = $('#slcZoneId').val();
            var districtName = $('#txtDistrictName').val();
            var villageName = $('#txtVillageName').val();
            var townName = $('#txtTownName').val();

            var coords = feature.getGeometry().getCoordinates()[0];

            if (coords == null) {
                $('#my-warning-modal').find('.modal-title').html('خطا');
                $('#my-warning-modal').find('#error').html('ناحیه روی نقشه مشخص نشده است');
                $('#my-warning-modal').modal("show");
                return;
            }

            var points = [];
            for (var j = 0; j < coords.length - 1; j++) {
                points[j] = ol.proj.transform([Number(coords[j][0]), Number(coords[j][1])], 'EPSG:3857', 'EPSG:4326');
            }

            strPolygon = JSON.stringify(points);

            //if (geom == null) {
            //    $('#my-warning-modal').find('.modal-title').html('خطا');
            //    $('#my-warning-modal').find('#error').html('ناحیه روی نقشه مشخص نشده است');
            //    $('#my-warning-modal').modal("show");
            //    return;
            //}

            //var transform = geom.transform('EPSG:3857', 'EPSG:4326');
            //strPolygon = JSON.stringify(geom.getCoordinates()[0]);

            if ((districtId != '') &&
                (stateId != '') &&
                (cityId != '') &&
                (zoneId != '') &&
                (strPolygon != '')) {
                $.ajax({
                    cache: false,
                    type: "Post",
                    url: "/AdminPublic/DistrictsManagement/UpdateDistricts",

                    data: {
                        'DistrictId': districtId,
                        'StateId': stateId,
                        'CityId': cityId,
                        'ZoneId': zoneId,
                        'DistrictName': districtName,
                        'VillageName': villageName,
                        'TownName': townName,
                        'StrPolygon': strPolygon,
                        'IsActivated': true,
                        'IsDeleted': false
                    },
                    success: function (result) {
                        debugger;
                        if (result.Result == "OK") {

                            $('#error-alert').removeClass('alert-danger');
                            $('#error-alert').addClass('alert-success');
                            $("html, body").animate({ scrollTop: 0 }, "slow");
                            $('#error-alert').show(1000);
                            $('#error-alert').html(result.Message);
                            $('#error-alert').show(500);

                            window.setTimeout(function () { window.location.reload(); }, 2500);
                        }
                        else
                            if (result.Result == "ERROR") {
                                $('#error-alert').removeClass('alert-success');
                                $('#error-alert').addClass('alert-danger');
                                $("html, body").animate({ scrollTop: 0 }, "slow");
                                $('#error-alert').show(1000);
                                $('#error-alert').html(result.Message);
                                $('#error-alert').show(500);
                            }
                    },

                });
            }
            else {
                $('#my-warning-modal').find('.modal-title').html('خطا');
                $('#my-warning-modal').find('#error').html('مقادیر را وارد کنید');
                $('#my-warning-modal').modal("show");
            }
        });

        //var iconGeometry = new ol.geom.Point(ol.proj.transform([LocationLon, LocationLat], 'EPSG:4326', 'EPSG:3857'));

        //var layer = new ol.layer.Vector({
        //    source: new ol.source.Vector({
        //        features: [
        //            new ol.Feature({
        //                //geometry: new ol.geom.Point(ol.proj.fromLonLat([4.35247, 50.84673]))
        //                //geometry: new ol.geom.Point(ol.proj.transform([51.24494, 36.66517], 'EPSG:4326', 'EPSG:3857'))
        //                geometry: iconGeometry
        //            })
        //        ]
        //    }),
        //    style: new ol.style.Style({
        //        image: new ol.style.Icon({
        //            anchor: [0.5, 46],
        //            anchorXUnits: 'fraction',
        //            anchorYUnits: 'pixels',
        //            src: '/images/mapmarker1.png'
        //        })
        //    })
        //});
        //map.addLayer(layer);
    });
</script>
