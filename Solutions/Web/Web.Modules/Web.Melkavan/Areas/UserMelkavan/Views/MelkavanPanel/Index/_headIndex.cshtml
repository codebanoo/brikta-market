@using Newtonsoft.Json
@using VM.Melkavan
@using VM.Public
@using VM.Teniaco
@{
    ViewData["Title"] = "ملکاوان";
}
@{
    string domainName = "";
    if (ViewData["DomainName"] != null)
        domainName = ViewData["DomainName"] as string;
}
@{
    bool onlyFavorite = false;
    if (ViewData["OnlyFavorite"] != null)
        if ((bool)ViewData["OnlyFavorite"] == true)
            onlyFavorite = true;
    ;
}

<script src="~/dactorapp/nouislider/nouislider.min.js"></script>
<link href="~/dactorapp/nouislider/nouislider.min.css" rel="stylesheet">

<script>
    var domainName = "@domainName";
    var isAuthenticated = "@User.Identity.IsAuthenticated" == 'True';
    var onlyFavorite = "@onlyFavorite" == "True";
</script>

<script type="text/javascript">
    @{
        List<PropertiesPricesForMapVM> propertiesPricesList = new List<PropertiesPricesForMapVM>();

        @Html.Raw("var propertiesPricesList = [];")
        ;




        if (ViewData["Records"] != null)
        {
            propertiesPricesList = (List<PropertiesPricesForMapVM>)ViewData["Records"];

            @Html.Raw("propertiesPricesList = " +
                 JsonConvert.DeserializeObject(JsonConvert.SerializeObject(propertiesPricesList)) + "; debugger;")
            ;

        }
    }
</script>

<!-- Scripts for Getting filters value -->
<script type="text/javascript">
    @{
        List<AdvertisementTypesVM> advertisementTypeList = new List<AdvertisementTypesVM>();

        @Html.Raw("var advertisementTypeList = [];")
        ;

        if (ViewData["AdvertisementTypesList"] != null)
        {
            advertisementTypeList = (List<AdvertisementTypesVM>)ViewData["AdvertisementTypesList"];

            var advertisementTypeListData = advertisementTypeList.Select(c =>
            new
            {
                DisplayText = $"{c.AdvertisementTypeTilte}",
                Value = c.AdvertisementTypeId
            });

            @Html.Raw(" advertisementTypeList = " +
                       JsonConvert.DeserializeObject(JsonConvert.SerializeObject(advertisementTypeListData)) + "; ")
            ;
        }
    }
</script>

<script type="text/javascript">
    @{
        List<PropertyTypesVM> propertyTypesList = new List<PropertyTypesVM>();

        @Html.Raw("var propertyTypesList = [];")
        ;

        if (ViewData["PropertyTypesList"] != null)
        {
            propertyTypesList = (List<PropertyTypesVM>)ViewData["PropertyTypesList"];

            var propertyTypesListData = propertyTypesList.Select(c =>
            new
            {
                DisplayText = $"{c.PropertyTypeTilte}",
                Value = c.PropertyTypeId
            });

            @Html.Raw(" propertyTypesList = " +
                       JsonConvert.DeserializeObject(JsonConvert.SerializeObject(propertyTypesListData)) + "; ")
            ;
        }
    }
</script>

<script type="text/javascript">
    @{
        List<TypeOfUsesVM> typeOfUsesList = new List<TypeOfUsesVM>();

        @Html.Raw("var typeOfUsesList = [];")
        ;

        if (ViewData["TypeOfUsesList"] != null)
        {
            typeOfUsesList = (List<TypeOfUsesVM>)ViewData["TypeOfUsesList"];

            var typeOfUsesListData = typeOfUsesList.Select(c =>
            new
            {
                DisplayText = $"{c.TypeOfUseTitle}",
                Value = c.TypeOfUseId
            });

            @Html.Raw(" typeOfUsesList = " +
                       JsonConvert.DeserializeObject(JsonConvert.SerializeObject(typeOfUsesListData)) + "; ")
            ;
        }
    }
</script>

<script type="text/javascript">
    @{
        List<DocumentTypesVM> documentTypesList = new List<DocumentTypesVM>();

        @Html.Raw("var documentTypesList = [];")
        ;

        if (ViewData["DocumentTypesList"] != null)
        {
            documentTypesList = (List<DocumentTypesVM>)ViewData["DocumentTypesList"];

            var documentTypesListData = documentTypesList.Select(c =>
            new
            {
                DisplayText = $"{c.DocumentTypeTitle}",
                Value = c.DocumentTypeId
            });

            @Html.Raw(" documentTypesList = " +
                       JsonConvert.DeserializeObject(JsonConvert.SerializeObject(documentTypesListData)) + "; ")
            ;
        }
    }
</script>

<script type="text/javascript">
    @{
        List<DocumentRootTypesVM> documentRootTypesList = new List<DocumentRootTypesVM>();

        @Html.Raw("var documentRootTypesList = [];")
        ;

        if (ViewData["DocumentRootTypesList"] != null)
        {
            documentRootTypesList = (List<DocumentRootTypesVM>)ViewData["DocumentRootTypesList"];

            var documentRootTypesListData = documentRootTypesList.Select(c =>
            new
            {
                DisplayText = $"{c.DocumentRootTypeTitle}",
                Value = c.DocumentRootTypeId
            });

            @Html.Raw(" documentRootTypesList = " +
                       JsonConvert.DeserializeObject(JsonConvert.SerializeObject(documentRootTypesListData)) + "; ")
            ;
        }
    }
</script>


<script type="text/javascript">
    @{
        List<DocumentOwnershipTypesVM> documentOwnershipTypesVMList = new List<DocumentOwnershipTypesVM>();

        @Html.Raw("var documentOwnershipTypesVMList = [];")
        ;

        if (ViewData["DocumentOwnershipTypesList"] != null)
        {
            documentOwnershipTypesVMList = (List<DocumentOwnershipTypesVM>)ViewData["DocumentOwnershipTypesList"];

            var documentOwnershipTypesVMListData = documentOwnershipTypesVMList.Select(c =>
            new
            {
                DisplayText = $"{c.DocumentOwnershipTypeTitle}",
                Value = c.DocumentOwnershipTypeId
            });

            @Html.Raw(" documentOwnershipTypesVMList = " +
                       JsonConvert.DeserializeObject(JsonConvert.SerializeObject(documentOwnershipTypesVMListData)) + "; ")
            ;
        }
    }
</script>


<script type="text/javascript">
    @{
        List<StatesVM> statesList = new List<StatesVM>();
        @Html.Raw("var statesList=[];")
        ;

        if (ViewData["StatesList"] != null)
        {
            statesList = (List<StatesVM>)ViewData["StatesList"];

            var statesListData = statesList.Select(s =>
         new
         {
             DisplayText = $"{s.StateName}",
             Value = s.StateId
         });

            @Html.Raw(" statesList =" + JsonConvert.DeserializeObject(JsonConvert.SerializeObject(statesListData)) + " ;")
            ;
        }

    }
</script>

<script type="text/javascript">
    @{
        List<CitiesVM> citiesList = new List<CitiesVM>();
        @Html.Raw("var citiesList=[];")
        ;

        if (ViewData["CitiesList"] != null)
        {
            citiesList = (List<CitiesVM>)ViewData["CitiesList"];

            var citiesListData = citiesList.Select(c =>
            new
            {
                DisplayText = $"{c.CityName}",
                Value = c.CityId,
                Data_StateId = c.StateId
            });

            @Html.Raw(" citiesList = " +
                      JsonConvert.DeserializeObject(JsonConvert.SerializeObject(citiesListData)) + "; ")
            ;
        }
    }
</script>

<script type="text/javascript">
    @{
        List<ZonesVM> zonesList = new List<ZonesVM>();

        @Html.Raw("var zonesList = [];")
        ;

        if (ViewData["ZonesList"] != null)
        {
            zonesList = (List<ZonesVM>)ViewData["ZonesList"];

            var zonesListData = zonesList.Select(c =>
            new
            {
                DisplayText = $"{c.ZoneName}",
                Value = c.ZoneId,
                Data_CityId = c.CityId
            });

            @Html.Raw(" zonesList = " +
                       JsonConvert.DeserializeObject(JsonConvert.SerializeObject(zonesListData)) + "; ")
            ;
        }
    }
</script>


<script type="text/javascript">
    @{
        List<BuildingLifesVM> buildingLifesList = new List<BuildingLifesVM>();

        @Html.Raw("var buildingLifesList = [];")
        ;

        if (ViewData["BuildingLifesList"] != null)
        {
            buildingLifesList = (List<BuildingLifesVM>)ViewData["BuildingLifesList"];

            var buildingLifesListData = buildingLifesList.Select(c =>
            new
            {
                DisplayText = $"{c.BuildingLifeTitle}",
                Value = c.BuildingLifeId
            });

            @Html.Raw(" buildingLifesList = " +
                       JsonConvert.DeserializeObject(JsonConvert.SerializeObject(buildingLifesListData)) + "; ")
            ;
        }
    }
</script>


<script type="text/javascript">
    @{
        List<TagsVM> tagsList = new List<TagsVM>();

        @Html.Raw("var tagsList = [];")
        ;

        if (ViewData["TagsList"] != null)
        {
            tagsList = (List<TagsVM>)ViewData["TagsList"];

            var tagsListData = tagsList.Select(c =>
            new
            {
                DisplayText = $"{c.TagTitle}",
                Value = c.TagId
            });

            @Html.Raw(" tagsList = " +
                            JsonConvert.DeserializeObject(JsonConvert.SerializeObject(tagsListData)) + "; ")
            ;
        }
    }
</script>


<script type="text/javascript">
    @{
        int currentYear = 0;

        @Html.Raw("var currentYear = 0;")
        ;

        if (ViewData["CurrentYear"] != null)
        {
            currentYear = (int)ViewData["CurrentYear"];

            @Html.Raw(" currentYear = " +
                       JsonConvert.DeserializeObject(JsonConvert.SerializeObject(currentYear)) + "; ")
            ;
        }
    }
</script>

<script type="text/javascript">
    @{
        List<BannersVM> bannersVMs = new List<BannersVM>();

        @Html.Raw("var banners = [];")
        ;

        if (ViewData["BannersList"] != null)
        {
            bannersVMs = (List<BannersVM>)ViewData["BannersList"];

            @Html.Raw(" banners = " +
                 JsonConvert.DeserializeObject(JsonConvert.SerializeObject(bannersVMs)) + ";")
            ;
        }
    }
</script>





<style>
    .hidden {
        display: none !important;
    }



    /* For sell range bar */

    .range-slider-origin {
        margin-right: -298px;
    }

    .range-slider-handle {
        margin-right: 298px;
        margin-top: 0px;
        background-color: #ebebeb;
        width: 30px;
        height: 30px;
    }

        .range-slider-handle:active {
            width: 30px;
            height: 30px;
            margin-top: -3px;
        }

    .range-slider-target {
        background-color: #ededed;
        border-radius: 4px;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .range-slider-base {
        height: 6px;
    }

    .range-slider-connect {
        background-color: #0095bf;
    }


   /* For rent rangebar */


       .rent-range-slider-origin {
        margin-right: -298px;
    }

    .rent-range-slider-handle {
        margin-right: 298px;
        margin-top: 0px;
        background-color: #ebebeb;
        width: 30px;
        height: 30px;
    }

        .rent-range-slider-handle:active {
            width: 30px;
            height: 30px;
            margin-top: -3px;
        }

    .rent-range-slider-target {
        background-color: #ededed;
        border-radius: 4px;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .rent-range-slider-base {
        height: 6px;
    }

    .rent-range-slider-connect {
        background-color: #0095bf;
    }



       /* For deposit rangebar */


       .deposit-range-slider-origin {
        margin-right: -298px;
    }

    .deposit-range-slider-handle {
        margin-right: 298px;
        margin-top: 0px;
        background-color: #ebebeb;
        width: 30px;
        height: 30px;
    }

        .deposit-range-slider-handle:active {
            width: 30px;
            height: 30px;
            margin-top: -3px;
        }

    .deposit-range-slider-target {
        background-color: #ededed;
        border-radius: 4px;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .deposit-range-slider-base {
        height: 6px;
    }

    .deposit-range-slider-connect {
        background-color: #0095bf;
    }



       /* For area rangebar */


       .area-range-slider-origin {
        margin-right: -298px;
    }

    .area-range-slider-handle {
        margin-right: 298px;
        margin-top: 0px;
        background-color: #ebebeb;
        width: 30px;
        height: 30px;
    }

        .area-range-slider-handle:active {
            width: 30px;
            height: 30px;
            margin-top: -3px;
        }

    .area-range-slider-target {
        background-color: #ededed;
        border-radius: 4px;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .area-range-slider-base {
        height: 6px;
    }

    .area-range-slider-connect {
        background-color: #0095bf;
    }



       /* For foundation rangebar */


       .foundation-range-slider-origin {
        margin-right: -298px;
    }

    .foundation-range-slider-handle {
        margin-right: 298px;
        margin-top: 0px;
        background-color: #ebebeb;
        width: 30px;
        height: 30px;
    }

        .foundation-range-slider-handle:active {
            width: 30px;
            height: 30px;
            margin-top: -3px;
        }

    .foundation-range-slider-target {
        background-color: #ededed;
        border-radius: 4px;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .foundation-range-slider-base {
        height: 6px;
    }

    .foundation-range-slider-connect {
        background-color: #0095bf;
    }



    /* Remove the caret in Bootstrap accordion */
    .accordion-button::after {
        display: none;
    }


    .button-style{
        background-color:#0095bf;
        width:40px; 
        height:40px;
        border-radius:10rem; 
        position:relative; 
        transition: background-color 0.2s ease
    }

    .button-style:active{
            background-color: #01BDF3;
    }

</style>


    <link href="~/lib/openlayers-v6.9.0/css/ol.css" rel="stylesheet" />
<script src="~/lib/openlayers-v6.9.0/build/ol.js"></script>

<style type="text/css">

    #mapContainer {
        position: relative;
        height: 200px;
        overflow: hidden;
        width: 100%;
    }

        #mapContainer .ol-viewport {
            height: 200px !important;
        }

        #customZoomButton {
  position: absolute;
  bottom: 10px; /* Distance from the bottom corner */
  right: 10px;  /* Distance from the right corner */
        background-color: rgba(0, 0, 0, 0.5);
  width:40px;
  height:40px;
  color: #fff;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  z-index : 1;
}

.adtype{
    width:28%;
      position: absolute;
  top: 10px; /* Distance from the bottom corner */
  right: 10px;  /* Distance from the right corner */
  cursor: pointer;
  z-index : 1;
}


.map-label {
    position: absolute;
    top: 4px; /* Adjust to place it appropriately */
    right: 4px; /* Adjust for alignment */
    background-color: rgba(0, 0, 0, 0.6);
    color: #fff;
    padding: 3px 6px;
    border-radius: 5px;
    font-family: IRANYekanX, Arial, sans-serif;
    font-size: 12px;
    z-index: 1000; /* Ensure it appears on top */
    pointer-events: none; /* Avoid blocking map interactions */
}



</style>